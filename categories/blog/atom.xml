<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on the world as code</title>
    <link>https://chroju.github.io/categories/blog/</link>
    <description>Recent content in Blog on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>written by chroju</copyright>
    <lastBuildDate>Sat, 25 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chroju.github.io/categories/blog/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Qiitaはじめました</title>
      <link>https://chroju.github.io/blog/2015/07/25/start-qiita/</link>
      <pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/07/25/start-qiita/</guid>
      <description>chroju - Qiita 気分でQiitaはじめてみた。Kobitoをちらちら使って簡単なメモを残していたりしたのだけど、そこから一発で上げられるのはやっぱ楽かなと思って。あと先日の暗号化に関する記事みたいなまとめ記事、tips系はやはりQiitaの方がフットワーク軽くて使いやすいような気がする。更新した場合にも履歴が残るし。
ブログとの使い分けが難しそうな気はするが、いわゆる勉強メモみたいな頻繁に見返すものをQiitaに上げて、ブログの方はもっとガッチリとした長文、たとえば勉強会の記録だとか技術に対する考え、あるいは何かを作った系の記事などを上げたらいいのではと思っている。まぁこのへんはあまり縛られず、あくまで中心に据えているのは自分用メモとしての役割なので、自分が使いやすいようなやり方でやれればいいかなと思っている。
ブログは多くとも週2回程度の更新だったが、Qiitaはもっと高い頻度でいろいろ貯めこんでいきたいし、そうできるような仕事をしていきたい所存。</description>
    </item>
    
    <item>
      <title>the world as code</title>
      <link>https://chroju.github.io/blog/2015/04/04/the-world-as-code/</link>
      <pubDate>Sat, 04 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/04/04/the-world-as-code/</guid>
      <description>世界を構成するのはテクストである、という考え方が好きだ。より正確な言い方をするならば記号論やミーム的な考え方になるのだと思うが、記述されたもの、意味を成して認識されたものだけが実在足りうる、というような世界観をなんとなく抱いている。『ニルヤの島』では個人の生が物語へと還元され、データとして外部記憶装置へ保存されるようになった。『from the nothing, with love』では、ジェームズが自らを「生起しつつあるテクスト」であると述懐する。あるいはヘプタポッドの言語は、未来をも決定論的に「記述」する。
特にことインターネットの隆盛により、世界はテクストの、ミームの満ちるものへと変容しつつあるように思う。インターネット上に存在する「個人」とは、すなわちミームに他ならない。インターネットへのアクセスをしていても、能動的にテクストを紡がない個人は存在しないに等しい。この世界では個人は、あるいはあらゆる事象はデータへと還元され、そして半永久的にミームの海を彷徨っていく。
上述したように、最近頓に多い「言葉」に関するSFのなかで、最も好きなのは『屍者の帝国』なのだけど、ここでは人間の魂自体が「言葉」によるものと解されており、そして屍者は「言葉」によってフランケンシュタインと化す。言葉は物質化する。書物がそうであるように。歴史上の人物がそうであるように。これが自らもまた「物質化した言葉」であるはずのヴァン・ヘルシングの言葉であるというのは皮肉でもあるのだと思うが、生きとし生けるものが言葉によりもたらされるというハッキリとした記述と、それに基づいて構成された世界観は実に興味深い。
Infrastructure as Code、物理的な世界の技術であったはずのITインフラが、近年言語により記述され、管理、構築されるフェーズへと転換したように。Internet of Things、家電や家具といった非電子的であったはずの「モノ」たちが、APIを提供して「言語」による働きかけを許すようになったように。我々エンジニアの一つの使命は、万物の情報化であると思う。言語が支配する世界にすべてを置き換え、言語を介した制御を可能とすること。それがエンジニアとしてやるべきことなのだと。
私はなぜ書くのか？という問いに対する答えはあまりに簡単で、それは生きるに等しい行為だからだ。語らぬ者は存在しないのならば、語る以外に選択肢はない。世界と関わりたいのならば、言語によって働きかけていくしかない。紡いだ言葉がミームの海を流れていき、対岸でやがて物語として物質化する日を夢見る。言葉が世界を構成し、言葉が万物を紡ぎ上げて、やがて物語と化していく。
the world as code.
世界は言葉で成り立っている。
あなたの人生の物語 (ハヤカワ文庫SF)posted with amazlet at 15.04.03テッド・チャン 早川書房 売り上げランキング: 10,379
Amazon.co.jpで詳細を見る </description>
    </item>
    
    <item>
      <title>はてなブログからの記事移行を完了した</title>
      <link>https://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress/</link>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress/</guid>
      <description>旧ブログから全記事移行完了しました。ちょっとだけ疲れた。
もともとはてなブログで記事を書いてたわけですが、こちらは記事のエクスポート形式がMovableType形式にしか対応してないので、そこからMarkdownに変換し直したりだとか、はてなキーワードリンクを削除したりとか、地道にいろいろやらねばならず。たぶんスクリプトでガチャーンと一発でやれるんでしょうけど、力が足りないのでvimでファイル開いて変換ポイント確認してはポチポチコマンドで置換してやりました。
エクスポートファイルの分割 はてなブログからエクスポートすると、最初は全記事が1ファイルに連なった状態で吐かれます。自分はMT使った経験ないんでわかりませんが、これは「そういうもの」と考えていいんですかね。一方のoctopressはエントリーごとに分割されているので、まずはこのエクスポートファイルを1記事ずつ分割してやらなくてはならない。あとヘッダの形式も微妙に両者で異なるので、ここの変換も必要。
なんか変換ツール落ちてないかなと堕落した感じで探しまわってたら、一応ありました。
 名前がMT to Markdownなので完全にMarkdownへ変換してくれるものかと期待したのだけど、実際やってくれるのは先ほど挙げた「分割」と「ヘッダの書き換え」程度です。中身はHTMLタグのまま。一方で自分の環境だと&amp;lt;が&amp;amp;lt;に変わってしまうといった副作用もあり。あと元のヘッダにあったBASENAMEだとかCONVERT BREAKSといった文字列がそのまま本文内に残ってたり。。。ちょっと謎。ただ、変換が楽になるのは確か。
vimによる置換 スクリプト力弱いので、あとはvimによる力技です。今回初めて複数ファイルを一挙にvimで扱うってやったけど、便利ですね。
vimではバッファリストがあるのは知っていたけど、一方で引数リストっていうのもあって、:args hoge.txt fuga.txtとかでファイルリストを作れます。元々は名前の通り、vimを起動するときに与えた引数が入ってるリストらしいのだけど、任意に書き換えができるのであまり「引数」リストという感じはしない。バッファ内の全ファイルへのコマンド実行は:bufdoで出来るし、引数リストについても似た感じで:argdoが使える。このあたりを上手く活用すれば、今回のような複数ファイルを一挙に処理するのはたやすい。
例えば先の&amp;amp;lt;を&amp;lt;に全置換したり。他にも置換コマンドはh1タグを#に変換するだとか、いろいろな形で使いました。
:argdo %s/&amp;amp;lt;/&amp;lt;/g  CONVERT BREAKSと書かれた行を全部消したり。
:argdo g/CONVERT BREAKS/d  自分が今回初めて身に付けた知識でもっとも有効だったのは、検索でマッチした文字列を置換後の文字列内で指定する方法ですかね。検索パターンの括弧でくくった部分（vimなのでエスケープして\(と\)で囲った部分、ということになりますが）を、置換パターンから\1で指定できる。これははてなキーワードのリンクを一掃するのに役立ちました。
:argdo %s/&amp;lt;a class=&amp;quot;keyword&amp;quot;\(.\{-}\)&amp;lt;\/a&amp;gt;/\1/g  あー、あとこのコマンドで重要なのは{-}の部分ですかね。これで最短マッチになるらしい。他、細かなとこだと改行コードを入力するには&amp;lt;C-v&amp;gt;&amp;lt;C-m&amp;gt;と打つとか、&amp;lt;C-r&amp;gt;/で直前の検索パターンをコマンドラインに入力できるとか、いろいろこの機会に調べられてタメになりました。
参考  Vimで最短マッチと検索してから置換 - // Nice Catch! :) Vim で直前の検索パターンを部分的に再利用する - Xeebi 改行コード変換 vi で改行コード一括置換　-eightsee.net  ファイルのリネーム また先のコードで分割したMarkdownファイルは自動的にファイル名も振ってくれるんですけど、日本語の場合は漢字をなんとなく頑張って読んでローマ字に変換してくれた、気持ちはありがたいけど残念な感じのものになっちゃいます。なのでこれも一括変換。
ファイル名一括変換だとrenameコマンドってのがあるのですね。Linuxだと標準で入ってるけどUNIX系にはないだとか。なのでMacにも入ってなかったので、Homebrewでインストール。
$ brew install rename  使い方としてはrename &#39;s/hoge/fuga/&#39; *.markdown形式が使える、要はvimの置換コマンドっぽく書けるので、vimmerならこれが便利ではないかと。正規表現も当然使えます。ただし、vimで必要なあの面倒くさいエスケープの数々が要らなくなっていたり、先ほど書いた\1によるマッチ文字列の流用が$1に変わっていたり、若干の使用感の違いはあります。でも便利。
参考  Linuxでrenameコマンドを使おう - Qiita  そんなこんなで記事の変換が終わったら、あとはoctopressのレポジトリで/source/_postsの中に全ファイルブチ込んでrake generateかければ生成されます。最初はちょっと戸惑いもありましたが、やれてしまうと案外簡単に移行できるなという感じです。</description>
    </item>
    
    <item>
      <title>お勉強ブログ、はじめます</title>
      <link>https://chroju.github.io/blog/2013/07/20/2013-07-20-post/</link>
      <pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2013/07/20/2013-07-20-post/</guid>
      <description>SEという職に就いて2年ちょい経ったわけだが、最近はPJリーダーとか顧客との調整とかその手の仕事ばかりを回されるようになってきて、実機を触る機会がめっきり少なくなってきてる。まぁうちはいわゆる大手SIerというヤツだから、徐々に技術っぽい仕事をしなくなるのは必然、ではある。だがしかし、あまり自分はそういうキャリアを望んでいないし、さすがに3年目で管理系の道に入ってしまうのは、ちょっと早すぎる。
というわけで技術ブログである。会社で触れないなら家でやるしかない。エンジニアとして自負したいのであれば、もう精一杯足掻くしかないだろうと。指を咥えて与えられた仕事だけしてたら単なるダラダラリーマンになりそうなので、それは避けたい。そしてゆくゆくは、身につけた技術によって職を替えてもみたいのだが。
現在位置を確認する 自分はインフラ系のSEなので、日頃はスイッチのconfig書いたりVMwareでガリガリ仮装環境作ったり、そういう仕事が多い。ちなみに顧客環境の都合で業務上Linuxに触れた経験がないのは内緒である。
というわけで、自力で学ぶのは会社から離れた方向。アプリ系を中心に据えていきたい。これまで自分が納めた言語はJava、それもわりと簡単なことしかできていないので、Javaの腕を磨くことと、もう一言語使えるようになることを目標にしたい。
とはいえ現在の業務も重要ではあるので、同時にインフラ周りも学べるような道が吉。
これから行く先を定める てわけで、当面の目標は二つ。
 VPSを借りて、Ruby on Railsで動くウェブサービスをつくる Androidアプリをなんかつくる  Javaに加える「もう一言語」はRubyにした。最近流行っているようだし、出来る事の幅も広そう。Pythonにも興味は惹かれたが、まあとりあえずRubyで。
そしてVPS。Ruby on RailsだとHerokuあたりで建てるのが主流みたいなんだけど、勉強も兼ねて足回りから全部自分で構築する。CentOSをいじって、ApacheとかDBとか入れてガリガリつくる。これでインフラ系SEとしての勉強も一応できるはず。
2番目の目標の方はサブ。1個の目標だけずーっと続けるのもなかなかしんどそうなので、息抜きとしてAndroidアプリをいじりたい。作りたいもののイメージとしては、Tumblrの過去ログを漁りやすくするようなアプリが出来たらいいなーと思っている。
ブログをどう活用するか と、ここまで書いておいてなんだが、実はすでに勉強は始めている。本を読みながら作ったりなんだりとしていたのだが、どうにも身になっている気がしなかったので、アウトプットの場としてブログを始めることにした次第。
はじめはEvernoteとかqfix_howmあたりに勉強記録をつければいいかと思ったが、それだとモチベーションが上がりにくいし、整形もしない気がしたのでブログにしてみた。はてブロならMarkdownで書けるからちゃんとフォーマットも考えつつ書けそうだし、参考文献へのリンクの処理とかも楽。んでさすがに本家の方とは内容がかけ離れすぎてるので、別ブログとして開設。まぁひっそりとやっていきます。
書く内容としては、何を学んだのか、何がわかったのか、わからなかった点はどこで、次回はどうするのか、ということを1日の勉強が終わったときに書き留めていきたい。特に「次回はどうするのか」がすげー重要だと個人的には思っていて、本を読んだら読みっぱなしではなく、「この本ではこのあたりのことがよくわからなかったから、次はこういう本を買おう」というビジョンが必要。そういうビジョンを持ちながら勉強するためにも、学んだ内容をアウトプットして整理する必要があると思っている。
あ、あとは「うたうとき」の方でたまに書いてたライフハック的というか、情報整理環境みたいのについての記事もこっちに回してくるつもり。そういうのってこだわりすぎてもいけないんだけど、ある程度整備しとかないと色々支障をきたすものだとも思っている。
次回以降、勉強ブログとして書き進めていきます。ちなみに現時点までの記録として、以下に開発環境と読んだ本をば。
これまでの足跡 開発環境  メインマシン
 iMac late 2010
 Mountain Lion
 Java : Eclipse 4.2
 Ruby : vim（良いIDEとかあるなら教えてくだしあ＞＜）
 Editor : vim（出来ること多すぎてハマり気味。精神衛生上良くない）
 サブマシン（いずれもVMware fusion上）
 Cent OS 6.4（Linux勉強用）
 Windows 8（ほぼ使ってない。一応持ってるWindows）
 流行りのvagrantなんかも触ってみたいですね！
  これまで読んだ本  Android  楽しみながら作ってみよう! はじめてのAndroidアプリプログラミングposted with amazlet at 13.</description>
    </item>
    
  </channel>
</rss>