<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chef Solo on the world as code</title>
    <link>http://localhost:1313/categories/chef-solo/</link>
    <description>Recent content in Chef Solo on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&amp;copy; Copyright notice</copyright>
    <lastBuildDate>Fri, 30 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/chef-solo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>chefでさくらVPSの初期構築を全部自動化してみた</title>
      <link>http://localhost:1313/post/2014-05-30-post/</link>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2014-05-30-post/</guid>
      <description>Chefでサーバー構築を全部自動化して、借りているさくらVPSに当ててみた。意地でも手作業はまったく入れない完全自動構築設定。これはよい。毎回手作業やらずに済むというのは、抜け漏れをなくすという点でも、構築時間を短縮するという面でも本当に楽。
前提 今回構築するサーバーの前提は次の通り。
 CentOS 6.4環境で試行 vagrantを使って試験後、さくらVPSに対して適用 基本の設定として以下を実施
 構築用のユーザーを作成
 構築用ユーザーにsudo権限を付与
 構築用ユーザーを秘密鍵認証でsshログイン許可
 rootによるsshログインを禁止
 パスワード認証によるログインを禁止
 sshのポート番号を変更
 ssh, http以外のアクセスをiptablesでシャットアウト
 nginxを導入
 将来的にunicornを入れるための設定を準備
 極力サードパーティクックブックは使わない（ブラックボックス化が嫌）
  レシピ まず「どんなサーバーだろうとまず実行するだろうセキュリティ上の設定」はdefault_tasksというレシピにまとめた。
default_tasks # sshdサービスの有効化 service &amp;quot;sshd&amp;quot; do supports :status =&amp;gt; true, :restart =&amp;gt; true, :reload =&amp;gt; true action [ :enable, :start ] end # sshd_configの配置 template &amp;quot;sshd_config&amp;quot; do path &amp;quot;/etc/ssh/sshd_config&amp;quot; source &amp;quot;sshd_config.erb&amp;quot; owner &amp;quot;root&amp;quot; group &amp;quot;root&amp;quot; mode 0600 notifies :restart, &amp;quot;service[sshd]&amp;quot; end # iptablesの設定 iptables_rule &amp;quot;iptables&amp;quot;  sshdの有効化と、templateを使ったsshd_configの配置、そしてiptablesの設定。このうちiptablesについてはサードパーティ・クックブックを使っている。</description>
    </item>
    
    <item>
      <title>Chef soloはじめの一歩</title>
      <link>http://localhost:1313/post/2014-05-06-02-post/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2014-05-06-02-post/</guid>
      <description>Capistranoでいろいろやったので今度はChef、正確にはChef solo。サーバー立てて最初にやること（ユーザー作成、sshd_configの設定、もろもろインストールとか）はだいたい決まっていると思うので、Chefで全部コード化してしまえたらやっぱり楽だなぁという思い。なおChefとCapistranoの境界線については、システム全体をまかなうのがChefであり、Capistranoはあくまでアプリ単位のデプロイに使うイメージでいる。rbenvやRubyを入れるのはChef。/var/www/RailsApp/配下（仮）をごにょごにょするのがCapistrano。
参考としたのはお馴染みのアレです。ただ、すでに出版から1年近く経っているので若干事情が変わっている箇所もあったりした。
入門Chef Solo - Infrastructure as Codeposted with amazlet at 15.03.01伊藤直也 (2013-03-11)
売り上げランキング: 2,821
Amazon.co.jpで詳細を見る 基本構成 chefの基本構成を取りあえず押さえる。
 chef: インフラ自動化のフレームワーク chef solo: 本来クラサバ構成で扱うChefをスタンドアロンで使えるようにしたもの knife-solo: リモートからchef soloの実行に必要なツール Berkshelf: サードパーティクックブックの管理に使う  インストール 上記のものを全部インストール。Gemfile書いてる場合はそっちに追加で。また最後にrbenv rehashを忘れずに。
gem install chef -v 11.10 --no-ri --no-rdoc gem install knife-solo --no-ri --no-rdoc gem install berkshelf rbenv rehash  ちなみにChefの最新はv11.12.xなんだけど、どうもバグがあるっぽく上手くいかなかったのでバージョン指定で古いの入れてる。
 参考：Chef 11.12.2のknife configureが失敗する - Qiita  セットアップ 初期設定。
knife configure # 対話は全部デフォでOK knife solo init chef-repo # chef-repoフォルダがレポジトリとして作られる cd chef-repo  chef soloを使うリモート側へもchefをインストール。</description>
    </item>
    
  </channel>
</rss>