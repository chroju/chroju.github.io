<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible Serverspec Docker Circle Ci on the world as code</title>
    <link>http://chroju.github.io/categories/ansible-serverspec-docker-circle-ci/</link>
    <description>Recent content in Ansible Serverspec Docker Circle Ci on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 18 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://chroju.github.io/categories/ansible-serverspec-docker-circle-ci/http/chroju.github.io/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ansible &#43; Serverspec &#43; Docker &#43; circle ci によるインフラCI</title>
      <link>http://chroju.github.io/blog/2015/11/18/ansible-serverspec-circle-ci/</link>
      <pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/11/18/ansible-serverspec-circle-ci/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.kenjiskywalker.org/blog/2014/11/13/circleci-docker-ansible-serverspec/&#34;&gt;CircleCIでDockerコンテナに対してansibleを実行しserverspecでテストをする - さよならインターネット&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この記事に書かれている内容を実際にやってみた。Ansibleを一旦は触ってみたところから、Circle.CIどころかCI経験が一切ない、ServerspecとDockerも使ったことがないという出発点だったので、得られるものはだいぶ大きい経験だった。完了したレポジトリは以下。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/chroju/ansible-ruby-devs&#34;&gt;chroju/ansible-ruby-devs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;ansibleにテストは必要か:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;Ansibleにテストは必要か？&lt;/h1&gt;

&lt;p&gt;AnsibleはPlaybookに書かれた設定通りにサーバーをセッティングしてくれるツールなのだから、傍証としてのテストは必要ないし、そもそもそれはAnsibleに対する信頼の問題だという話がある。（かのオライリーのServerspec本でも「Serverspecの必要性」を状況に応じて説明した章がある）が、自分は以下の理由からAnsible実行後のテストは必要と考えている。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;h2 id=&#34;playbookの書き方が間違っている:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;Playbookの書き方が間違っている&lt;/h2&gt;

&lt;p&gt;確かにPlaybookに書いた内容通りにサーバーは組まれるのだが、そもそもPlaybookの書き方がおかしくて、想定通りの実行結果にならない可能性はある。そのレベルであればコードレビューで気付くべきではないかという話もあるが、こういう趣味の個人開発では難しかったり、レビューで漏れがあったりというのも有り得るわけで、自動テストに任せられるならその方が確かかとは思う。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h2 id=&#34;冪等性の問題:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;冪等性の問題&lt;/h2&gt;

&lt;p&gt;特にshellモジュールを用いたときなどは冪等性が維持されない可能性があり、複数回の実行で想定外のサーバー状態になる可能性はある。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;テストツールの選定:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;テストツールの選定&lt;/h1&gt;

&lt;p&gt;普通にServerspec。Ansibleで定義したインベントリファイルやrolesをServerspecと共有してくれる&lt;a href=&#34;http://qiita.com/volanja/items/5e97432d6b231dbb31c1&#34;&gt;ansible_spec&lt;/a&gt;というツールもあり、当初はこちらを使おうとしていた。が、前述した「Ansibleの書き方自体が間違っている可能性」をテストするとなると、できるだけAnsibleとテストツールは疎結合とするべきと考え、ファイルや設定は一切共有しない形でServerspecを使っている。&lt;/p&gt;

&lt;h1 id=&#34;circle-ciの利用:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;Circle CIの利用&lt;/h1&gt;

&lt;p&gt;繰り返しになるが初である。インフラエンジニアがCIをすることはまぁない（なかった）。そんな頻繁に設定を変えるわけでもなし。インフラCIが可能かつ必要となったのは、Infrastructure as Codeの台頭と、クラウドネイティブ化によりImmutableかつ極めて速いライフサイクルでサーバーインフラが更新されるようになったことによるもの。&lt;/p&gt;

&lt;p&gt;で、Circle CIでググってもそんなに使い方みたいな初歩的な記事は出ない。どうもCIツールの使い方なんてのはJenkins登場の頃に身につけてて当然だろって感じの扱いっぽい。実際使いながら自分なりに理解したのは「レポジトリをpushすると、それを使って自動的にテストやデプロイを回してくれる」ツールということで、Circle CIについてはこんな感じに認識してるんだがあってんのかなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レポジトリの使用言語やファイル構成を見て良きに計らって勝手にテストしてくれる。&lt;/li&gt;
&lt;li&gt;もちろん自分でテストコマンドを書いてもOKで、Circle CIにやってほしいことは &lt;code&gt;circle.yml&lt;/code&gt; というYAMLファイルに書いてレポジトリの第一階層に置いておく。&lt;/li&gt;
&lt;li&gt;GitHub連携を前提としており、連携したレポジトリの &lt;code&gt;push&lt;/code&gt; をトリガーとして動作する。&lt;/li&gt;
&lt;li&gt;動作としてはCircle CI上でDockerコンテナ（ubuntuベース）を起動→レポジトリを &lt;code&gt;git clone&lt;/code&gt; →circle.ymlを読んで実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;実装:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;実装&lt;/h1&gt;

&lt;p&gt;実際のcircle.ymlはこうなった（といってもほぼ丸のまま冒頭記事のものを使っているが）。Dockerイメージのキャッシュには以下の記事も参考にした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stormcat.hatenablog.com/entry/2015/02/04/004227&#34;&gt;CircleCIでDockerイメージをキャッシュするのに、実はちょっとした工夫が必要な件 - tehepero note(・ω&amp;lt;)&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;machine:
  timezone:
    Asia/Tokyo
  services:
    - docker

dependencies:
  pre:
    - if [[ -e ~/docker/docker_ansible_image.tar ]]; then docker load --input ~/docker/docker_ansible_image.tar ; else docker build -t centos_ansible ~/ansible-ruby-devs/ ; mkdir -p ~/docker ; docker save -o ~/docker/docker_ansible_image.tar centos_ansible ; fi

  cache_directories:
    - &amp;quot;~/docker&amp;quot;

test:
  override:
    - docker run -v `pwd`/ansible:/ansible centos_ansible /bin/sh -c &#39;ansible-playbook /ansible/ci_site.yml -i /ansible/ci_hosts -c local &amp;amp;&amp;amp; cd /ansible/spec &amp;amp;&amp;amp; /home/develop/.rbenv/bin/rbenv exec bundle install &amp;amp;&amp;amp; /home/develop/.rbenv/bin/rbenv exec bundle exec rake spec&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この方法の肝はAnsibleとServerspecのフォルダを&lt;code&gt;docker run&lt;/code&gt;の&lt;code&gt;-v&lt;/code&gt;オプションでコンテナにマウントさせてしまって、ローカルでいずれも実行させている点だと思う。Dockerコンテナに対してSSHで外から処理を行うことももちろん可能ではあるが、ちょこちょこと小細工は必要だし、CI上の処理であればミニマムに済ませたいところ。&lt;/p&gt;

&lt;p&gt;テストにおいてはインベントリファイルも&lt;code&gt;site.yml&lt;/code&gt;もテスト用の設定値となるので、CI用のファイルを置いている。ただ、これらはレポジトリにとっては余分なファイルでしかないので、本来であれば取り除きたいような気もする。妙案は浮かばない。Dockerコンテナは2回目以降の実行だと&lt;code&gt;load&lt;/code&gt;するだけで済むし、AnsibleとServerspecはローカル実行なので、処理時間はだいぶ速い。&lt;/p&gt;

&lt;p&gt;実行結果はslackの個人チャンネルに流している。GtiHubに上げるだけで勝手にテストして結果も自動通知されるというのはとても楽しい。やれることの自由度が広すぎて夢が広がる。&lt;/p&gt;

&lt;h1 id=&#34;つまずいた点:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;つまずいた点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Dockerfile初挑戦につき、結構戸惑った。Ansibleでsshd_configを編集させていたのだが、コンテナにそもそもsshが入ってなくてコケたりした。&lt;/li&gt;
&lt;li&gt;Circle CIでのカレントディレクトリの扱いがわからず、しばらく &lt;code&gt;circle.yml&lt;/code&gt; で指定するファイルパスに悩まされた。クローンしたレポジトリの中にいる状態で始まるっぽい？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; に &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 付きでコマンド渡すときに &lt;code&gt;/bin/sh -c&lt;/code&gt; が必要だとしばらく気付かなかった。&lt;/li&gt;
&lt;li&gt;Dockerコンテナを &lt;code&gt;save&lt;/code&gt; して &lt;code&gt;load&lt;/code&gt; してるので、Dockerfile書き換えたら当然ながらCircle CIを「without cache」で実行しないとダメです。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>