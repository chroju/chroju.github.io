<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>書評 on the world as code</title>
    <link>http://chroju.github.io/categories/%E6%9B%B8%E8%A9%95/</link>
    <description>Recent content in 書評 on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 16 Aug 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://chroju.github.io/categories/%E6%9B%B8%E8%A9%95/http/chroju.github.io/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ハッカーマインドと3冊のエッセイ</title>
      <link>http://chroju.github.io/blog/2015/08/16/hackers-mind-and-their-essay/</link>
      <pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/08/16/hackers-mind-and-their-essay/</guid>
      <description>&lt;p&gt;ハッカー3大エッセイとは自分が勝手に呼んでいるだけなのだが、『ハッカーと画家』『UNIXという考え方』『それが僕には楽しかったから』の3冊のことである。しかし『それがぼくには』は重要な一冊だと思うんだけど、なんでまた絶版なんですかね。そんな古い本でもないのに。仕方なく図書館で借りたけど。&lt;/p&gt;

&lt;p&gt;いわゆるハッカーマインドを描いた本としていずれも似たような印象を抱きがちだが、実際に読んでみるとスタンスはだいぶ異なる。『ハッカーと画家』はコンピュータについてあまり詳しくない人に対して、ハッカーというのはこういう人種なのだと切々と説いた本であり、故にそれほど挑発的な印象は受けず、すらすらと読み進めていくことができる。もっともこれがハッカー以外に理解できるかというとかなり疑問ではあるが、ハッカーが比較的客観的に自らを解き明かした本として参考にはなる。著者のポール・グレアムのエッセイは&lt;a href=&#34;http://practical-scheme.net/wiliki/wiliki.cgi?naoya_t:%E3%83%9D%E3%83%BC%E3%83%AB%E3%83%BB%E3%82%B0%E3%83%AC%E3%82%A2%E3%83%A0%E3%81%AE%E3%82%A8%E3%83%83%E3%82%BB%E3%82%A4%E3%81%A8%E5%92%8C%E8%A8%B3%E4%B8%80%E8%A6%A7&#34;&gt;naoya_t氏による和訳&lt;/a&gt;がいくらか読めるので、これを読んで興味をそそられたら読んでみるのでもいいかもしれない。あと、Lispめっちゃ推してる。&lt;/p&gt;

&lt;p&gt;『UNIXという考え方』は、ハッカー向けにハッカーマインド、というかUNIX哲学を説く本なので、これは3冊の中では最も「読むべき」本だと思った。プログラムの移植性が重要であることだとか、ソフトウェアのレバレッジを効かせて効率性を最大限に高めていくべきだとか、我々がコードを書いたりシステムを作る上で重視すべきことがいくつも盛り込まれている。&lt;/p&gt;

&lt;p&gt;『それがぼくには楽しかったから』はまさにエッセイ、リーナス・トーヴァルズの半生を描いたもので、ハッカーマインド云々というよりはだいぶ読み物チック。終盤で著作権やOSSといった概念に対するリーナスの考え方が少し語られるが、ほとんどはLinuxがいかにして生まれたのか？を描いた物語と言っていい。自分はリーナスというハッカーをこれまで詳しくは知らなかったのだが、案外柔軟な人物であるという印象を受けた。OSSの考え方自体は肯定しながらも、それは押し付けるべきではない、具体的に名前を挙げてリチャード・ストールマンのやり方は強引に過ぎるとしていたり、自分は聖人君子ではなく、大金が舞い込んだときには当然喜んでしまったこともあるよなんて語っていたり、彼の人間性がとても良く出ている。まぁとはいえ、自分が否とみなしたものに対しては、それなりに厳しい批判を飛ばす人物ではあると思うが。&lt;/p&gt;

&lt;p&gt;こうした本に書かれた「ハッカーマインド」なるものは、我々が仕事をする上で必須のものではないと思うし、行き過ぎるとリーナスが言うような宗教戦争チックにもなりかねない。また技術に傾倒しすぎた単なるオタクが仕事の上でも重要な人物足りえるかというと、そういうわけでもない。リーナス・トーヴァルズは偉大なハッカーの1人であろうが、彼は同時にLinux開発者という立場での活動を行うにあたり、社会性を身につけたりもしてきたわけで。単にGeekであること自体が良いこととも自分は思えない。&lt;/p&gt;

&lt;p&gt;とはいえ、まだ生成されてまもなく、業界標準なんてものがあるんだかないのだかもわからない、進化の速いこの業界で仕事をしていくには、多少なりともハッカー的なマインドは必要だとも思うのだ。というか、じゃないと仕事が面白くならないんでは？　惰性で同じ技術をずっと使い続けたり、効率の悪い方法を繰り返したりしていてもお金は入るのだろうけど、それが必ずしも収入に結びつかないとしても、なんかカッコイイことやってみたいとか、楽しそうな新技術にトライしてみたいだとか、そういう感覚がないとエンジニアをやっている意味がないなと思う。エンジニアが会社を選ぶにあたって重要なのは、案外このポイントなのではなかろうか。&lt;/p&gt;

&lt;p&gt;残念ながら求人票からハッカーマインドは透けてこないし、転職面接の数分でそれを読み解くことも難しいだろう（自分は以前、面接でArch Linuxの話でたまたま意気投合する機会があったりして、そういう面接が出来たら話が別なのだろうけど）。その点、最近GitHubやQiitaでエンジニアたちが企業名を出して活動していることがあるが、あれは求人票やウェブサイトでは見えにくいその会社のハッカーマインドを、外部に知らしめていく良い手段だと感じる。ビジネス的に何を成して、社会をどう変えたいのかというよりも、エンジニアとしてどういったカタチで技術にコミットしていくかの方が自分には重要だ。そういう視点で仕事をしていけたらどんなにか幸せだろうし、またそれは茨の道でもあるのだろうなと思っている。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/511SV9NXW2L._SL160_.jpg&#34; alt=&#34;ハッカーと画家 コンピュータ時代の創造者たち&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;ハッカーと画家 コンピュータ時代の創造者たち&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.08.16&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;ポール グレアム &lt;br /&gt;オーム社 &lt;br /&gt;売り上げランキング: 6,887&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274064069/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/518ME653H3L._SL160_.jpg&#34; alt=&#34;UNIXという考え方―その設計思想と哲学&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274064069/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;UNIXという考え方―その設計思想と哲学&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.08.16&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;Mike Gancarz &lt;br /&gt;オーム社 &lt;br /&gt;売り上げランキング: 44,838&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274064069/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796880011/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51WZM2W6ZBL._SL160_.jpg&#34; alt=&#34;それがぼくには楽しかったから (小プロ・ブックス)&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796880011/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;それがぼくには楽しかったから (小プロ・ブックス)&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.08.16&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;リーナス トーバルズ デビッド ダイヤモンド &lt;br /&gt;小学館プロダクション &lt;br /&gt;売り上げランキング: 71,563&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796880011/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>『エンジニアのための時間管理術』読了</title>
      <link>http://chroju.github.io/blog/2015/03/07/book-review-time-management-for-engineer/</link>
      <pubDate>Sat, 07 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/03/07/book-review-time-management-for-engineer/</guid>
      <description>&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51jWtxU0sAL._SL160_.jpg&#34; alt=&#34;エンジニアのための時間管理術&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;エンジニアのための時間管理術&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.03.07&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;Thomas A. Limoncelli &lt;br /&gt;オライリー・ジャパン &lt;br /&gt;売り上げランキング: 12,858&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先日のデブサミでオライリーの書籍販売があったわけですけど、5000円以上購入でトートバッグプレゼントというのに釣られて買った1冊です。本当は2冊で5000円届くはずだったんだけど、そのときはディスカウントがあったばかりに5000円に届かず3冊という、得したんだか買いすぎちゃったんだかよくわからない感じでした。まぁ、前々から気になって立ち読みしまくってた1冊なので、買うきっかけくれたことには感謝。&lt;/p&gt;

&lt;p&gt;内容はGTDとか散々やってきてる自分にとってそれほど新鮮味のあるものではありませんでした。煩わしいタイムマネジメントに関することは全部頭の中から放り出して、その日のタスク、スケジュール、目標なんかはひとつの場所にまとめておこうねっていうのが全体の趣旨です。あとはエンジニアならではなのかな？と思えることとして、手順の文書化の話だったり、スクリプトによる雑事の自動化周りの話がちょっぴり載ってたりはします。&lt;/p&gt;

&lt;p&gt;本書内ではタイムマネジメントに使う媒体（デジタルでもアナログでもなんでもいいけど、とりあえず何かしら「1か所」にまとめる）のことをオーガナイザーと読んでいるのですが、そこに書くことは大きく3つあり、1つは365日のタスク。GTDをはじめ、よく聞かれるタスク管理法だと「やるべきこと」は全部1つのリストにドバっと書き出していることが多いわけだけど、本書ではそういう「永遠に終わらないリスト」は「破滅のリスト」と呼んで回避するよう告げている。タスクリストを1日分でクローズドにすることで、その日にやったことを明示的にリスト内で「潰せる」ようにし、達成感を味わえるようにした方がよいと。2つ目はカレンダー。日時の決まった予定だとか、繰り返しのルーチンはカレンダーに書いちゃった方が早い。3つ目が長期的な目標。月単位や年単位の長いスパンで何を実現したいのか？を書き出しておく。その手順は細かく分割した上で、365日のタスクリストや、カレンダー上に載ることになる。そして目標リストは定期的に見直して、更新していく。&lt;/p&gt;

&lt;p&gt;自分が今やってることとこれ、わりとよく似ていて。自分の場合、スケジュールがGoogle Calendarで、タスクリストはAny.do。以前todo.txtを使っているという記事を書いたこともあるのだけど、最近乗り換えてしまった。なぜかと言うとスマホアプリのCalを使うと、1日のGCal上の予定とAny.doのタスクがまとめて見られてすんごい楽だから。&lt;/p&gt;

&lt;div id=&#34;appreach-box&#34; style=&#34;text-align:left;&#34;&gt;
    &lt;img id=&#34;appreach-image&#34; src=&#34;http://a512.phobos.apple.com/us/r30/Purple6/v4/78/bb/1d/78bb1d61-0262-76c4-2edb-f421111365d4/mzl.fxvayqgf.png&#34; alt=&#34;Cal – Calendar for iCloud, Google &amp;amp;amp; Exchange&#34; style=&#34;float:left; margin:10px; width:25%; max-width:120px; border-radius:10%;&#34; pagespeed_url_hash=&#34;248610482&#34;&gt;
    &lt;div class=&#34;appreach-info&#34; style=&#34;margin: 10px;&#34;&gt;
      &lt;div id=&#34;appreach-appname&#34;&gt;Cal – Calendar for iCloud, Google &amp;amp; Exchange&lt;/div&gt;
      &lt;div id=&#34;appreach-developer&#34; style=&#34;font-size:80%; display:inline-block; _display:inline;&#34;&gt;
        開発元:&lt;a id=&#34;appreach-developerurl&#34; href=&#34;https://itunes.apple.com/jp/artist/halo-inc./id499497834?uo=4&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Any.DO&lt;/a&gt;
      &lt;/div&gt;
      &lt;div id=&#34;appreach-price&#34; style=&#34;font-size:80%; display:inline-block; _display:inline;&#34;&gt;無料&lt;/div&gt;
      &lt;div class=&#34;appreach-powered&#34; style=&#34;font-size:80%; display:inline-block; _display:inline;&#34;&gt;
        posted with &lt;a href=&#34;http://appreach.t-tu.com/&#34; title=&#34;アプリーチ&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;アプリーチ&lt;/a&gt;
      &lt;/div&gt;
      &lt;br&gt;
      &lt;div class=&#34;appreach-links&#34; style=&#34;float:left;&#34;&gt;
        &lt;div id=&#34;appreach-itunes-link&#34; style=&#34;display: inline-block; _display: inline;&#34;&gt;
          &lt;a id=&#34;appreach-itunes&#34; href=&#34;https://itunes.apple.com/jp/app/cal-calendar-for-icloud-google/id648287824?mt=8&amp;amp;uo=4&amp;amp;at=11lHd9&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
           &lt;img src=&#34;http://appreach.t-tu.com/img/itune_en.png.pagespeed.ce.8asOsm0ta-.png&#34; style=&#34;height:40px;&#34; pagespeed_url_hash=&#34;1074815294&#34;&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div id=&#34;appreach-gplay-link&#34; style=&#34;display:inline-block; _display:inline;&#34;&gt;
          &lt;a id=&#34;appreach-gplay&#34; href=&#34;https://play.google.com/store/apps/details?id=com.anydo.cal&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
           &lt;img src=&#34;http://appreach.t-tu.com/img/gplay_en.png.pagespeed.ce.1AAXzseXga.png&#34; style=&#34;height:40px;&#34; pagespeed_url_hash=&#34;45329112&#34;&gt;
           &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;appreach-footer&#34; style=&#34;margin-bottom:10px; clear: left;&#34;&gt;&lt;/div&gt;
  &lt;/div&gt;

&lt;p&gt;GTDが唄うような「すべてのタスクが網羅されたリスト」ってのはあまりに雑多で自分も嫌いで、なのでAny.doの中身は週に一度見直して、その週にやることを「TODAY」として扱うようにしている。日次リストが本当は理想なのだろうけど、残業も少なくない中で日次でできるタスクなんざたかが知れているので週次がちょうどいい。今日できなくても明日やればいい、みたいな調整もわりと楽に出来るし。&lt;/p&gt;

&lt;p&gt;長期的なやりたいこととか取り組んでいることはプレーンテキストで残している。タスク管理アプリのカテゴリー機能などを使う人も多いようだけど、長期的な取り組みはだいたいがその途上で疑問が湧いてきたり、参考URLなぞを書きたくなるもので。だから柔軟なフォーマットで記録しておきたいなという思いが強く、今はプレーンテキストを使っている。&lt;/p&gt;

&lt;p&gt;だいたいこれで上手く回ってるかなーと思ってはいるのだが、気にかかっていることが2つだけある。1つはルーチンの扱い。そのほとんどが家事ではあるのだが、定期的にやらなきゃならんことって案外多くて、Google calendarに全部記録するとなかなかにとんでもない量になって嫌気が差す。かといって他のリストを使うというのもあまり効率的には思えないので、現状は「日次タスク」というような大きな予定枠を取っておき、メモ欄にその内容を細かに書く、といった運用になっている。もうちょっとスマートにならぬものか。あとルーチンって定期的に決まったタイミングでやるもののみならず、普段はやらないけどたまに思い出さなくちゃならないよね！みたいなものもあって、そういうのまで「決まった日時に繰り返す」としてカレンダーに入れちゃうとちょっとしんどいなぁと思える。でも、そうした方が忘れずに済むのだろうなぁとも思うから、なるたけ割り切るようにしている。&lt;/p&gt;

&lt;p&gt;もう1つ気にかかっているのは、クローズしたタスクや、長期的な取り組みの進捗はきちんと記録を残したいなということ。例えるなら&lt;a href=&#34;http://shigotano.info/mbr/taskchute2/paypal.php&#34;&gt;TaskChute&lt;/a&gt;。自分はこれを仕事で使っているのだが、完了したタスクは取り消し線を引いた上できちんと残るようになってて、今週どのPJに多くの時間を割いたのかとか、そういやあのタスクいつやったっけ、みたいなのを後から振り返れるようになっている。これをAny.doや、プレーンテキストによる長期タスク管理の中でも回したい。進んでいる感覚を持ちたい。暫定的には週次レビューでタスクの棚卸しをするとき、その週のやったことリストを残すことで運用している。自分が何かをやったんだ、前に進んでいるんだという実感を持つことはすごく大事。なんとなく頭の中がもやっとしてるときに、達成記録を読むとちょっとホッとするし、逆に最近取り組んでいない領域があると、ああやらなきゃなって思える。&lt;/p&gt;

&lt;p&gt;んで、書評じゃなくて自分のタスク管理の話になってしまったが、毎日のライフサイクルをエンジニアリングするという思想は今後も重視していきたいなと思う。もうずっと迷いながら、やり方を模索しながらなのでときに嫌になったりはするのだけど、エンジニアリングすること自体が楽しくもあるし、それが「システム」である限りは常に保守運用は必要だよなとも思っている。とりあえず中心に置いている考え方は、「ルーチンを確実に回し、タスクを効率的に処理して、やりたいことをやる時間を増やす」こと。ここだけブレなければ大丈夫かなと思っている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>『実践Vim』でVimの思想を身につける</title>
      <link>http://chroju.github.io/blog/2014/10/02/2014-10-02-post/</link>
      <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2014/10/02/2014-10-02-post/</guid>
      <description>&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048916599/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51xLKL7w92L._SL160_.jpg&#34; alt=&#34;実践Vim 思考のスピードで編集しよう!&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048916599/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;実践Vim 思考のスピードで編集しよう!&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.03.01&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;Drew Neil &lt;br /&gt;アスキー・メディアワークス &lt;br /&gt;売り上げランキング: 15,673&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048916599/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;何ヶ月か前にKindleでアスキー本のセールをやっていたことがあって、そのときに買ったのをやっと読み終えた。技術書を電子書籍で読むというのは、感覚の問題なんだけどどうも身が入らない。ドッグイヤー付けたりとか書き込んでみたりとか出来なかったり、あるいは満員電車の中とかでも手軽に読めすぎてしまって、腰を据えて勉強する感覚がなくなるからなのかなぁという気がしている。なお、これまでKindle読むのにはXPERIA Z1fを使っていたが、さすがにしんどくてiPad miniを買った模様。もちろん、他にも理由はあったけど。&lt;/p&gt;

&lt;p&gt;自分はVimを使い始めて1年ちょいというところで、これまでVim本をきちんと読んだことはなかったのだが、読んでよかったと思う。&lt;/p&gt;

&lt;p&gt;Vimの情報はネットにありふれすぎていて、素のVimから触り始める人ってあんまりいないような気がする。自分も最初からKaoriya版を使っていたし、使い始めてまもなくGitHubやQiitaから他人のvimrcを拝借してきて、NeoBundleでプラギン入れて使っていた。特にプラギンまわりが楽しすぎて、ほうほうVimはこんなことができるのかー！とｗｋｔｋしながら1か月ぐらいはvimrc触りまくってたように思う。自分の&lt;a href=&#34;https://github.com/chroju/dotfiles/commits/master/.vimrc&#34;&gt;GitHub&lt;/a&gt;見るとまーよくわかる。&lt;/p&gt;

&lt;p&gt;でもこの本にも書いてある通り、まずは素の状態で試してみるべきなのだ、本来。Vimは最初からできることが豊富にある。テキストを扱う上で必要な操作がいくらでも揃っているので、まずはそれらを味わってみて、足りなければvimrcで味付けしていけばいい。そうじゃないとVimの設計思想というか、Vimによってテキストをどう扱うべきなのかという原則論が見えてこない。&lt;/p&gt;

&lt;p&gt;本書はプラギンの話は皆無で、Vimが最初から備えている機能を中心に解説されている。&lt;code&gt;.&lt;/code&gt;を始めとした繰り返し操作を多用する考え方だとか、テキスト対Vimというありがちな考え方だけではなく、ファイル対Vimという考え方もしなくてはならないとか、学べることは本当に多かった。あまりに分量が多いので一気にすべてのことを実践できるわけではないが、これはと思ったとこから取り入れていきたい。おそらくVimはツールではなくて思想なのだ。親指シフトやHHKBなんかと同じように、最速でテキストを編集するための思想。もちろんここでいう「Vim」には「Emacs」も当てはまってくるのだろうけど。あと正規表現ちゃんと覚えなあかんなと思った。後半の検索、置換のあたりは当然ながら正規表現を使える前提の話が多くて、きちんと使えてない自分には少ししんどかった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>『Webを支える技術』読了</title>
      <link>http://chroju.github.io/blog/2013/12/28/2013-12-28-post/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2013/12/28/2013-12-28-post/</guid>
      <description>&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774142042/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51qo6pgjaSL._SL160_.jpg&#34; alt=&#34;Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774142042/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.03.01&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;山本 陽平 &lt;br /&gt;技術評論社 &lt;br /&gt;売り上げランキング: 13,031&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774142042/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;言わずと知れた名著、なんですかね。元はと言えば山本陽平氏の&lt;a href=&#34;http://yohei-y.blogspot.jp/2005/04/rest_23.html&#34;&gt;REST解説記事&lt;/a&gt;をWebで見かけて、えっらいわかりやすかったもんで著作にも手を出してみたという感じ。あとRails触り始めたというのもあって、一度は読んでおくべきかな、と。&lt;/p&gt;

&lt;p&gt;全体の印象としてはかなり平易な言葉で書かれてて読みやすい。ただ、多少の前提知識は必要とされるので、ウェブサービスを初めてこれから作ってみようみたいな人が読んでも厳しいと思う。自分はRailsかじってたので、それになぞらえて読み進めることができた。というか、この本読むとRuby on Railsが本当にRESTfulに設計されているんだってことが追認できる。&lt;/p&gt;

&lt;p&gt;目次&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第1部 Web概論&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第1章 Webとはなにか&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第2章 Webの歴史&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第3章 REST ―― Webのアーキテクチャスタイル&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第2部 URI&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第4章 URIの仕様&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第5章 URIの設計&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第3部 URI&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第6章 HTTPの基本&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第7章 HTTPメソッド&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第8章 ステータスコード&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第9章 HTTPヘッダ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第4部 ハイパーメディアフォーマット&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第10章 HTML&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第11章 microformats&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第12章 Atom&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第13章 Atom Publishing Protocol&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第14章 JSON&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第5部 Webサービスの設計&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第15章 読み取り専用のWebサービスの設計&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第16章 書き込み可能なWebサービスの設計&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第17章 リソースの設計&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;ポイントピックアップ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POSTとPUTの使い分け。前者は作成したリソースURIをサーバーが規定し、後者はクライアント（というかリクエスト）で規定できる。&lt;/li&gt;
&lt;li&gt;HTTPメソッドには「冪等性」と「安全性」の性質がある。冪等性は「ある操作を何度行っても結果が同じこと」。DELETEメソッドは何度発行しようと同じ結果になる。安全性は「操作対象のリソースの状態を変化させないこと」。GETを発行してもリソースは変化しない。POSTは冪等でも安全でもない。&lt;/li&gt;
&lt;li&gt;セマンティックWeb、ウェブの意味論。リソースの意味をどのようにプログラムから処理するか？&lt;/li&gt;

&lt;li&gt;&lt;p&gt;RESTfulなウェブサービスの性質はアドレス可能性、接続性、統一インタフェース、ステートレス性の4つ。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アドレス可能性 ＝ URIで一意にリソースを指し示せる性質。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;接続性 ＝ リソースをリンクで接続する性質。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;統一インタフェース ＝ GET/POST/PUT/DELETEということ（でOK？）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ステートレス性 ＝ HTTPはステートレス。但しCookieによるセッション管理が現実には行われる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Webサービス設計において重要なことはシンプルに保つこと、リソースを基準として考えること、POSTでだいたいなんでもできること（え？）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;リソースはそれ自身ですべての情報を表せた方が通信が効率的になるため、あえて正規化を行わない（このへん、DB設計と同一視してたわ）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>