<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>環境構築 on the world as code</title>
    <link>http://chroju.github.io/categories/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</link>
    <description>Recent content in 環境構築 on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 02 Feb 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://chroju.github.io/categories/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rails環境構築（4）nginx導入</title>
      <link>http://chroju.github.io/blog/2014/02/02/2014-02-02-post/</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2014/02/02/2014-02-02-post/</guid>
      <description>&lt;p&gt;nginxの導入はyumを使ってサクッと。まずリポジトリを登録して、その後yumを使ってインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リポジトリが正しく登録されているか確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yum list nginx --disablerepo=* --enablerepo=nginx
（中略）
Installed Packages
nginx.x86_64                1.4.4-1.e16.ngx           @nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum install&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールは以上。EPEL様々ですね。あとは仮想ホスト設定用にディレクトリを作っておくという作業を入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/nginx/sites-available
$ sudo mkdir /etc/nginx/sites-enabled
$ sudo rm -f conf.d/*.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nginx.confを開いて、sites-enabledを読み込ませるための設定を追加する。具体的には以下の1行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include /etc/nginx/sites-enabled/*;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上、終わり。最後にサービスを立ち上げて、自動起動を設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service nginx start
$ sudo chkconfig nginx on
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rails環境構築（3）PostgreSQLインストール</title>
      <link>http://chroju.github.io/blog/2014/01/26/2014-01-26-post/</link>
      <pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2014/01/26/2014-01-26-post/</guid>
      <description>

&lt;p&gt;ポスグレのインストール。yumで入るようなんだけど、聞くところによるとバージョンが古いらしい。念のため確認してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yum list | grep postgresql
（中略）
postgresql.i686                           8.4.18-1.el6_4                base
postgresql.x86_64                         8.4.18-1.el6_4                base
postgresql-contrib.x86_64                 8.4.18-1.el6_4                base
postgresql-devel.i686                     8.4.18-1.el6_4                base
postgresql-devel.x86_64                   8.4.18-1.el6_4                base
postgresql-docs.x86_64                    8.4.18-1.el6_4                base
postgresql-ip4r.x86_64                    1.05-1.el6                    epel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うん、確かに古い。この記事を書いている時点では9.3.2とか出てるけど、yumで用意されてるのは8.4である。最新を入れればいいというわけでもないが、さすがにちょっと古いような気が。（ところでyumに入ってるパッケージの調べ方、これであってんのかな？）&lt;/p&gt;

&lt;p&gt;てわけで新しいバージョンをWebから持ってくる。&lt;a href=&#34;http://yum.postgresql.org/repopackages.php&#34;&gt;PostgreSQL RPM Repository (with Yum)&lt;/a&gt;にいろいろあるので適切なリンクURLをコピー。1コ前のバージョンでPostgresql 9.2にしときましょか。自分のOSがなんだかわかんなくなったらunameコマンドで確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ uname -a
Linux xxx 2.6.32-358.23.2.el6.x86_64 #1 SMP Wed Oct 16 18:37:12 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CentOS 6 x86_64であることがわかったので、wgetでダウンロード。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget -P /tmp http://yum.postgresql.org/9.2/redhat/rhel-6-x86_64/pgdg-centos92-9.2-6.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いてRPMにインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rpm -ih /tmp/pgdg-centos92-9.2-6.noarch.rpm
warning: /temp/pgdg-centos92-9.2-6.noarch.rpm: Header V4 DSA/SHA1 Signature, key ID 442df0f8: NOKEY
########################################### [100%]
########################################### [100%]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rpmコマンドのオプションとして-iを付けるとパッケージのインストールが出来る。さらにhを付けると####で進捗が表示されるそうだ。必須オプションではないので、hについてはお好みで。&lt;/p&gt;

&lt;p&gt;いよいよyumでインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yum -y install postgresql92-server.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;……yum installって補完はできないんですかね入れたら初期化して起動て自動起動設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service postgresql-9.2 initdb
$ sudo service postgresql-9.2 start
$ sudo chkconfig postgresql-9.2 on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでで一旦インストールとしては終了。あとは基本的な設定をいくつか入れておく。&lt;/p&gt;

&lt;p&gt;まずpg_hba.confを触る。これはDBに対するクライアントからのアクセスを制御するファイルで、さきほどinitdbしたときに作成されている。管理している内容としてはどのDBに対するどのユーザーのどこ（IP）からのアクセスを、どの認証方式で認証するか。必要に応じて書き入れてやる必要があるが、ひとまず参考書通りの設定をしておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vim /var/lib/pgsql/9.2/data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# TYPE  DATABASE     USER           ADDRESS                     METHOD

local  all           postgres                                   peer
local  all           all                                        md5
host   all           all            127.0.0.1/32                md5
host   all           all            ::1/128                     md5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終わったらPostgreSQLをリロード。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service postgresql-9.2 reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はここまで。&lt;/p&gt;

&lt;h2 id=&#34;参考:5419e2ec8926a05a7006e3e9b972b490&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.postgresql.jp/document/8.2/html/auth-pg-hba-conf.html&#34;&gt;pg_hba.confファイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://morizyun.github.io/blog/postgresql-mac-centos-rails/&#34;&gt;Mac MountainLion/CentOS 6.4へのPostgreSQL 9.2の導入手順 - 酒と泪とRubyとRailsと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails環境構築（2）Rubyのインストール &#43; α</title>
      <link>http://chroju.github.io/blog/2014/01/23/2014-01-23-post/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2014/01/23/2014-01-23-post/</guid>
      <description>

&lt;p&gt;環境構築エントリーその2。まっさらなOSにRubyを入れていきます。&lt;/p&gt;

&lt;p&gt;まずはいろいろパッケージのインストール。ぶっちゃけ参考書通りにやってるだけなので、どこまで必要なのかはよくわかってない。wgetとgitが必須であるのは言わずもがなだし、openssl-devel、make、postgresqlなんかもまぁ必要だろう。gccとかは要る……のか？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum -y install gcc gcc-c++ make autoconf openssl-devel readline-devel libyaml-devel postgresql9.1-devel wget git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いて意気揚々とRubyを入れたいとこだが、その前にrbenvを入れる。以前にエントリーで書いたこともあったけど、rbenvを使ってRubyをインストールすると、複数のバージョンのRubyを切り替えて使えるようになるので大変便利。インストールもwgetでダウンロードしてビルドしてなんてやり方をせず、rbenv installコマンドで簡単にできるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rbenv自体のインストールもgithubからのクローンで済むのでスマートですね。ついでにもう1個git cloneしているのはruby-buildって奴で、これがないとrbenv install（rbenv使ってRubyをインストールするためのコマンド）が使えないらしい。で、入れたらPATHを通します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
$ echo &#39;eval &amp;quot;$(rbenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PATHを通したらbash_profileを再読み込みして、それからtype rbenvコマンドを打ってインストールの正常完了を確認する。ちなみに自分は最初、bash_profileの再読み込み忘れて慌てました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ~/.bash_profile
$ type rbenv # rbenv is a functionと表示されればOK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでの手順はGitHubでrbenvのREADMEにも書かれてるから一読を推奨。&lt;/p&gt;

&lt;p&gt;rbenvが入ったので、早速Rubyをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv install --list #インストール可能なバージョンが一覧表示される
$ rbenv install 1.9.3-p484 #入れるバージョンは任意で
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろん複数バージョン入れてもOK。Rubyのインストールが完了したら、どのバージョンを使うか確定させる。使うコマンドはrbenv global。安易に想像できる話ではあるが、rbenv localもある。前者が文字通りシステム全体、どのシェルでも使われるバージョンであるのに対し、後者はローカル環境、すなわち今後入れるRailsのアプリケーションディレクトリとか、そういう環境でのRubyバージョンを指定するもの。今はローカル環境がないので、rbenv globalだけ指定すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv global 1.9.3-p484
$ ruby -v #確認
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上でRubyは入ったわけだけど、ついでに今後使うのでBundlerも入れておく。BundlerはRubyGemsを管理するためのツールであり、RubyGemsとはRubyのパッケージ管理システムのことである。GemはRailsでもめちゃめちゃ使うし、そもそものRailsもGemで入れることになるので、ここでBundlerを入れておく。&lt;/p&gt;

&lt;p&gt;ちなみにGem自体はRubyと一緒にすでに入っている。が、バージョンが古い場合があるので更新してあげる必要がある。GemだけでももちろんRailsをインストールしたりはできるんだけど、その後の落とした各Gemの管理がマンドクセーってなるので、Bundlerが必要になる。まぁ詳しくは次回あたりで。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem update --system
$ gem -v #最新のバージョンになったことを確認
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;じゃあ喜び勇んでGemを使ってBundler入れましょう！と行きたいところだが、まだやることがある。デフォルトだとGemで何かをインストールしたとき、ずらずらーっとメッセージが出てくるのだが、それを消すためのおまじない。これで体感2倍ぐらいインストールが速くなるらしい。方法は簡単で、~/.gemrcファイルを新規で作成して、以下の内容を書き入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem: --no-ri --no-rdoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;書き入れるって簡単にいうけどエディタは何使えばいいんだよ？って人はviあたり使っとけばいいと思う。もっといえば$ sudo yum install vimすればいいと思うんだが、そのあたりの話はまたおいおい。&lt;/p&gt;

&lt;p&gt;はい、やっとこれで準備完了。Bundler入れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv exec gem install bundler
$ bundle -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで作業完了！のはずなんだが、なぜか自分はbundleにPATHが通ってなかったらしく、$ bundle -vできませんでした。なんでだろ？　仕方ないので&lt;a href=&#34;http://qiita.com/hyshhryk/items/7e728ad57d963454b142&#34;&gt;ココ&lt;/a&gt;のやり方に従ってなんとかPATHは通ったんだけど、リンク先が何をやっていたのかはっきり言ってわかっておらず、不安。EXECUTABLE DIRECTORYってなんスか？&lt;/p&gt;

&lt;p&gt;まーとりあえずRubyとBundlerは入ったので、次回はRailsのインストールといきますかね。&lt;/p&gt;

&lt;h2 id=&#34;参考:38de241a039a08b121a3b1b43f554f40&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ruedap.com/2011/05/14/ruby-gem-install-no-ri-no-rdoc-gemrc&#34;&gt;RubyGemsでgemのインストール時に&amp;ndash;no-ri &amp;ndash;no-rdocをデフォルトにする - アインシュタインの電話番号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ongaeshi/items/b07beebca21ba7ed8e7f&#34;&gt;rbenv &amp;amp; ruby-build の使い方メモ - Qiita [キータ]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ruby on Rails環境構築はじめます</title>
      <link>http://chroju.github.io/blog/2014/01/18/2014-01-18-post/</link>
      <pubDate>Sat, 18 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2014/01/18/2014-01-18-post/</guid>
      <description>&lt;p&gt;Ruby on Railsのアプリ構築の勉強もそこそこに進んできたので、そろそろ環境構築始めてみようかと。（あんまりブログで書けてないけど……）。てわけで、この本買いました。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4844333755/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51Mb377pxwL._SL160_.jpg&#34; alt=&#34;Ruby on Rails環境構築ガイド&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4844333755/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Ruby on Rails環境構築ガイド&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.03.01&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;黒田 努 &lt;br /&gt;インプレスジャパン &lt;br /&gt;売り上げランキング: 44,343&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4844333755/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これまで環境としてはMax OS X 10.8にVMware FusionでCentOS浮かべて、その上でコード書いてWEBlick立ち上げてってやってたんだけど、考えてみればWEBlickでやるなら手元のMacで良かったわけで。いちいちコード書くのにSSHつなぐとかまぁ無駄なわけで。ということで、環境は次のように変えていく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開発環境：Mac OS X 10.8（物理）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ruby 2.0.0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rails 4.0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MySQL&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ステージング：CentOS 6.4（Virtual Box）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ruby 2.0.0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rails 4.0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MySQL&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nginx&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;unicorn&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;vagrant + chef soloで構築予定&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;本番環境：CentOS 6.4（VPS）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;構成はステージングと同様&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apacheは仕事でも使ったことがあるんで、流行りに乗ってnginx + unicornでやってみます。んでさらに流行りに乗ってvagrantとchef solo使おうかと。vagrantはちなみにもう試してみたけど、さっくり仮想マシンが立ってしまってビビる。あとでブログにまとめる予定。ただしchefはちょっとしっかりやんないと使えなさそう。&lt;/p&gt;

&lt;p&gt;もともと自分はインフラをメインで飯食ってるんで、こころへんはあまり迷わずにいきたいところ。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>