<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on the world as code</title>
    <link>http://chroju.github.io/categories/docker/</link>
    <description>Recent content in Docker on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 04 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://chroju.github.io/categories/docker/http/chroju.github.io/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dockerファーストインプレッション</title>
      <link>http://chroju.github.io/blog/2015/12/04/docker-first-impression/</link>
      <pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/12/04/docker-first-impression/</guid>
      <description>

&lt;p&gt;前回上げたインフラCIを試みた際、CircleCIを利用する中で初めてDockerに触れたので、今更ながらのファーストインプレッション。&lt;/p&gt;

&lt;h2 id=&#34;仮想マシン-と考えるとdockerは理解しづらい:ccbe1575a20deb569178af4585ba95c4&#34;&gt;「仮想マシン」と考えるとDockerは理解しづらい&lt;/h2&gt;

&lt;p&gt;Dockerを「仮想マシン」と称する文章も随所で見かけていたが、これを仮想マシンとして捉えると理解からは遠のく。自分自身、Dockerの概念的な理解にはかなり手こずっていて、OSがないのにどうやって「マシン」が動くのかわからなかったし、 &lt;code&gt;chroot&lt;/code&gt; のようにファイルシステム上に仮想的なディレクトリツリーを設けるものなのかと思っていた。&lt;/p&gt;

&lt;p&gt;Dockerは隔絶された名前空間上で展開されるプロセスに過ぎない。確かにコンテナはOSのような振る舞いを見せるが、そこにいわゆるVMwareやXenのような仮想「マシン」はない。あくまでホストOSの一部リソースを切り出して、仮想的に扱う技術に過ぎない。&lt;/p&gt;

&lt;h2 id=&#34;vagrantの代替:ccbe1575a20deb569178af4585ba95c4&#34;&gt;Vagrantの代替？&lt;/h2&gt;

&lt;p&gt;一度理解して、 &lt;code&gt;docker run&lt;/code&gt; を叩けるようになると利便性は即座に理解できる。OSをブートさせるわけではないのでコンテナの起動は従来の「仮想マシン」と比べて格段に速く、CircleCIで使われている用途同様、テスト用にまっさらな環境が即席で欲しいときには大変重宝する。こういう用途にはもともとVagrantが適していたのだと思うが、本当にすぐ使い捨ててしまいたいようなOS環境であれば、Dockerを使ったほうが遥かに手軽に起動も破棄もこなせる。&lt;/p&gt;

&lt;p&gt;ただあまりに簡単に起動、破棄ができるものの、作成したコンテナのイメージはコンテナ終了後も基本的に残存するので、調子に乗っているうちにいつの間にかディスクがかなり消費されていることが何度かあった。コンテナライフサイクルの把握と運用整備はマスト。&lt;/p&gt;

&lt;h2 id=&#34;ポータブルなインフラストラクチャー:ccbe1575a20deb569178af4585ba95c4&#34;&gt;ポータブルなインフラストラクチャー&lt;/h2&gt;

&lt;p&gt;Dockerを実用できる一例として、先日Traildashを採用する機会があった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/AppliedTrust/traildash&#34;&gt;AppliedTrust/traildash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CloudTrailという、AWS APIへのアクセスログをjsonで吐いてくれるAWSサービスがあるのだが、それをElasticsearchで集計してKibanaでブラウザ表示してくれるツール。このツールはDockerイメージで配布されていて、自分のサーバー上にpullしてきて、AWS APIへアクセスするための環境変数をいくつか設定するだけで使えるようになる。自分はElasticsearchの運用経験はないのだが、実質的に &lt;code&gt;docker run&lt;/code&gt; コマンド一発だけでそれが使えてしまう。（そのことの是非は置いておくとして）Dockerがアプリケーションサイドで実現することってこういうことなんだろうと。herokuが出たとき、ローカルからインターネットへのサービスのポータビリティが劇的に向上したわけだが、Dockerは稼働先を問わないわけで、ポータビリティはさらに拡大する。&lt;/p&gt;

&lt;p&gt;これはインフラ側としても嬉しいところで、今までnginxやらDBやらというミドル的な部分はアプリとしての要求もあり、インフラとしての要求もあり、双方の要件がガッシリ絡んでしまっていて、設定を後から見返すと「これなにゆえにこうなったんだっけ？」ってことが少なくなかったり、構築分担が面倒だったりというのがあって。コンテナとしてアプリをデプロイするとなると、サーバーとコンテナが明確に分離される。疎結合になる。ミドルの調整はコンテナ内だけを気にして行えばよいので、サーバーはとりあえずDocker動いてくれればいいやみたいな状態になる。雑だけど楽だろうなという気がぼんやりしている。&lt;/p&gt;

&lt;h2 id=&#34;dockerの運用:ccbe1575a20deb569178af4585ba95c4&#34;&gt;Dockerの運用&lt;/h2&gt;

&lt;p&gt;とりあえず前述のTraildashはDockerによる本番運用（外に出すものではないので本番といえるか微妙ではあるが）の発端にはなりそうなものの、いわゆるアプリ、サービスを本番稼働させるのがどんなもんなのかってところは自分自身見えてない。これをきちんと本番で扱うには可用性やら信頼性やらを担保しなくてはならないわけで、クラスタ構成に用いる&lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt;を導入するだとか、いわゆるインフラとしてのお仕事はやっぱり必要になる。そのへんどこかで試せればなぁとは思うので、ひとまずは自分の http;//chroju.net をDocker化しようかなどと。この前OSCでさくらのクラウド2万円クーポンもらったし、Dockerによる個人PaaS的なものでも作ってみようか。&lt;/p&gt;

&lt;p&gt;テストとしての利用には申し分のないところで、先日記事で上げたが&lt;a href=&#34;http://chroju.github.io/blog/2015/11/18/ansible-serverspec-circle-ci/&#34;&gt;AnsibleとServerspecのテスト&lt;/a&gt;に使えるまっさらなOS環境としてDockerは重宝している。Infra as Codeと大変相性がよくて、よくこのタイミングで出てきてくれたなという感じがする。時代の要請なのだろうか。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>