<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Rails on the world as code</title>
    <link>http://localhost:1313/categories/ruby-on-rails/</link>
    <description>Recent content in Ruby on Rails on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&amp;copy; Copyright notice</copyright>
    <lastBuildDate>Sat, 08 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kaminariの実装をしてみた</title>
      <link>http://localhost:1313/post/exhibi-update/</link>
      <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/exhibi-update/</guid>
      <description>久しぶりに稼働させているExhiBiというサービスの機能を少し更新した。といってもそれほど大した話ではないですが、一応書き留め。
kaminari ページネーションでデファクトスタンダード状態であるkaminariを使ってみました。
amatsuda/kaminari bundlerでインストールすればほぼ設定とかなくても使えます。最初のローンチのときに入れなかったので、viewを結構いじらなくちゃいけなくて大変かなーと思っていたのだけど、そんなことはなかった。主に変更は2点で、まずはcontrollerで#indexのようなリソースを拾ってくるアクションに.pageをかましてやるようにします。
# もともとはExhibition.all.order... def index @exhibitions = Exhibition.page(params[:page]).order(&amp;quot;start_date DESC&amp;quot;) end  あとはviewでページネーションを表示するためのヘルパーを1行追加すれば終わり。以下はslimの場合。
= paginate @exhibitions  なお、実装当初はundefined method &#39;deep_symbolize_keys&#39;などというちょっと関係ねーだろこれって感じのエラーが出たりして焦ったのは秘密です。原因はconfig/locales/ja.ymlが一切インデントされてなかったことなんですけど、そんなのがここに波及するんですね。。。てかyamlの書き方よくわかってねーわ。
もちろん、1ページあたりの表示数とかページャーの表示の仕方だとか、いろいろ細かく設定はできますが、とりあえずこれだけでページャーは実装されます。あーこりゃデファクトスタンダードになるわなという簡単さ。早く入れればよかった。なお、本当にまだ入れただけなのでCSSとかぜんぜん調整してないです。
id以外の要素でmodle#showにアクセスする 例えばExhiBiの場合は美術館ごとのページにアクセスするには、これまでmuseums/2みたいなURLになっていたわけですが、カッコ悪いし使い勝手も悪いのでmuseums/motなど、英名でアクセスできるよう変えました。参考にしたのは以下ページ。
Railsで、URLにIDでなく名前を入力して、アクセスする方法 - Qiita やってることはなんともシンプルで、Museum.find(n)で呼んでいたところをMuseum.find_by_name_en_or_id(hoge)と出来るようにしただけですね。#to_paramでサービス内のリンクもすべて英名表記URLに変更できています。こういう柔軟さはRailsやっぱりいいですね。
ただ自分の場合ちょっと問題があったのは、これまでテーブルに英名表記のカラムを入れてなかったので、新たに追加する必要がありました。まぁ普通にbundle exec rake g migrationしてからrake db:migrateするだけなんですけど、ローカルで開発しているときに何故かこれが通らず、一旦rake db:migrate:resetしてから改めて打つハメになったりした。このへんの話は以下記事がちょっと詳しかったり。
rake db:reset と rake db:migrate:reset の違い | EasyRamble 自分はインフラエンジニアなので、Railsを実務で使うってことはほとんどこの先皆無だとは思うんですけど、自己表現手段としてやっぱりRailsぐらい使えておくと良さそうだなと改めて思います。例えばインフラの勉強でサーバー運用してみようとなっても、上で何か動いてないとあんまり勉強にならなかったり。自分がどんなことをしているのか？を外にアッピルする意味では、こういうの1つぐらい持っとくといいのだろうなと思います。yamlの勉強しなきゃとか、今回そういう派生効果もありましたので。近々作れたらもう1個サービス作ってみようと思ってます。</description>
    </item>
    
    <item>
      <title>bundle installはどのパスに対してすべきなのか問題</title>
      <link>http://localhost:1313/post/2014-01-14-post/</link>
      <pubDate>Tue, 14 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2014-01-14-post/</guid>
      <description>今まであまり意識していなかったのだが、bundle installコマンドを打ったときにGemはどこにインストールされるのか？という問題がある。オプションなしにこのコマンドを実行した場合、Gemはシステム側（すなわちusr/lib/ruby/gems/云々）に入ってしまうわけだが、一つの環境で複数アプリを構築している場合はこれだと困るし、何より各アプリごとにGemfileを用意している意味が無い。というわけで、bundle installはパスを指定すべきである、ということ。
% bundle install --path vendor/bundle  Railsの場合はvendor/bundleディレクトリがあるので、ここを明示的に指定してやれば良い。これでGemも含めてアプリ内で「閉じた」状態にすることができる。
まぁこのへんの話は今更自分が書くまでもなく、いくつか参考になるエントリーがあった。ただ、自分が使っていた有名なオンラインのRoRチュートリアルにはこのことが書かれてなかったので、書き留めた次第。
 Rails開発環境の構築（rbenvでRuby導入からBundler、Rails導入まで） - Qiita [キータ] Bundler再履修: bundle execって何？ gemはどこに入るの？ - memo.yomukaku.net  
で、先日のエラーについてもこれが原因ではないかと思ったのだが。。。そんなことはありませんでした。</description>
    </item>
    
    <item>
      <title>twitter-bootstrap-railsでundefined methodのエラーに嵌る</title>
      <link>http://localhost:1313/post/2014-01-09-post/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2014-01-09-post/</guid>
      <description>完全に嵌った。さっぱりわからん。
undefined method `to_css&#39; for nil:NilClass  twitter-bootstrap-railsを試してみているのだが、インストールしていざブラウザからアクセスしてみると、undefined methodのエラーが出てしまう。どのページにアクセスしてもダメ。
エラーメッセージ読んでも、そもそも#to_cssメソッドがどこにあるのかもわからんのだが、名前からしてLESSのコンパイルでトチってそうだという想像をしている。でもそれ以上はわかんない。ググっても情報はほとんどないし。
試しにrails newから全部やり直してみたりしたのだが、それでも尚ダメだった。READMEの通りにやってるはずなんだけどなぁ……。使ったコマンドは以下のみ。
rails new TestApp (Gemfileを編集) bundle install rails g bootstrap:install less rails g bootstrap:layout application fluid rails g Scaffold User name:string mail:string rake db:migrate rails g bootstrap:themed Users rails s  仕方ないので他のGem使おうかと。んー……なんなんだろ。</description>
    </item>
    
    <item>
      <title>Bundle execサボってエライ目にあった</title>
      <link>http://localhost:1313/post/2013-12-08-02-post/</link>
      <pubDate>Sun, 08 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013-12-08-02-post/</guid>
      <description>今までよくわからなくてほっといたけどこれ使わなきゃダメだったわ……
bundle exec rails g devise:install Railsのログイン機構作るためにDevise入れてみてたんだけど、本来上のコマンドを入れるべきところでふつーにrails g devise:installとしてしまった。そしてrails g devise User ゴニョゴニョ。すると何が起きたか。
title=&amp;ldquo;スクリーンショット_2013-12-08_22.57.54-3 by chroju, on Flickr&amp;rdquo;&amp;gt;
い……いねぇ……。確かにgenerateしたはずなのにurbはあるけどコントローラーもヘルパーもねぇ……。でもね、この状態でブラウザ開くとなんかログインできるんだよ。動くんだよ。幽霊かと。お前ソースはどこにあんのかと。んで探ってみたらあった。
title=&amp;ldquo;スクリーンショット 2013-12-08 22.57.19 by chroju, on Flickr&amp;rdquo;&amp;gt;
なんかすげえとこにあった！！！！
あー、要はこれがbundle execの有無による違いね。bundle execプレフィックスを付けると今の環境のGemfileからインストールしてくれるけど、付けない場合はシステム側のRubyにdeviseをインストールしてしまう。だからこんなとこにいろいろ入ってしまったと。あー。失敗だ……。
なんかbundle execを省略する方法もあるらしいけど、よくわかってないものをよくわかってないままに省略するのも危険なので、しばらくは自戒込めてプレフィックス付けるようにします。</description>
    </item>
    
    <item>
      <title>『RailsによるアジャイルWebアプリケーション開発』読了〜「設定より規約」なら、規約をまず知りたい</title>
      <link>http://localhost:1313/post/2013-11-04-post/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013-11-04-post/</guid>
      <description>RailsによるアジャイルWebアプリケーション開発 第4版posted with amazlet at 15.03.01Sam Ruby Dave Thomas David Heinemeier Hansson オーム社 売り上げランキング: 138,293
Amazon.co.jpで詳細を見る Rails入門の定番書。このブログで何度か読んでいる途中経過を報告してきたか、ようやく読み終えることができた。読了というか、読み終わったのはもうだいぶ前ではあるんだけど。しかし予定していた以上に時間をかけてしまった。。。最初は写経しながら読んでいたのだが、どうにも時間がかかりすぎてイライラしていて、途中からはザーッとRailsの概略を掴むためだけのような読み方になってしまった。写経した方がやっぱり頭には入ると思うのだけど、それでサンプルアプリを作ったところで、応用してすぐ自分のアプリを作れるとは限らなくて、なんとももどかしい。結果としてはまだ消化しきれてなくて、行ったり来たり読み返しながら自分なりにアプリを作り始めているのが今の段階。
この本は表題通り、架空のアジャイル開発案件を進めるかのように、徐々にRailsアプリを作る過程をなぞっていくことで、Railsで出来ること、Railsでアプリを作ることを教える構成を取っている。なので実践的でわかりやすい反面、解説なしにいきなりソースを提示されたりもするので「なぜこういうコードで動くのか？」が掴みにくいことも少なくなかった。アプリの完成まで読み進めると、その後に「Rails詳説」としてRailsの規約やらフレームワークを解説するページが現れるのだが、個人的には正直逆の構成の方が掴みやすい。あるいはアジャイル開発を1段階進めていくごとに、そこで書いたソースの詳細な解説を挟むようにしてほしい。
というのも、Railsはコードを省略したり、フレームワークによって自動生成されたりするものが非常に多い。だから初見ではどこまで書けば良いのか、どこからオートで作り上げてくれるのか、感覚が掴めないのだ。俺はウェブアプリケーションとしては初歩的なJavaアプリの経験しかないのだが、それと比べてRailsのアプリ構築は遥かに簡単な印象を受ける。正確に言えば、自分で書かなくてはならない部分が少ない。しかしそれ故に、手で書かなかった部分がどう動いているのかがわかりづらく、技術を手中に収めた感覚がない。Javaのウェブアプリはプラグインなどを使わない限りは「書いたものが動く」感覚だったので、手とアプリが連動しているという錯覚があった。
本書のような「実際に作る過程を見せる」という技術書は世の中に数多くあるし、基本的にはその方が「わかりやすい」本になるのだと思う。が、ことRailsに関しては作る前に「Railsは何を成してくれるのか」を解説してくれる本が必要なんじゃないかと。もちろん、本書においては「Rails詳説」の章がその役割を果たしているわけで、もう少し読み込まないとRailsをモノには出来そうにない。
次の本としては、これまた定番であるレシピブックを買った。これとRails詳説を片手に、Railsがどう動くのか？を学びながら、まずはローカル環境でアプリを作ってみる。外観まで含め、年内にきちんと形になるところまで持っていきたい。
Rails3レシピブック 190の技posted with amazlet at 15.03.01高橋 征義 松田 明 諸橋 恭介 ソフトバンククリエイティブ 売り上げランキング: 57,121
Amazon.co.jpで詳細を見る </description>
    </item>
    
    <item>
      <title>RoRでログイン機能を実装する</title>
      <link>http://localhost:1313/post/2013-10-06-post/</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013-10-06-post/</guid>
      <description>sessionに情報を保存することで「ログイン」状態を実現する 逆に言えばsession破棄で「ログアウト」扱いになる Railsにはsessionオブジェクトが用意されており、これを使えば簡単にsessionへアクセス可能  ……というわけで。
1. sessionコントローラを作成する $ rails g controller sessions new create destroy   コントローラ作成のときは複数形！ newはログイン画面表示時に、createはログイン処理時に、destroyはログアウト処理時に使用  コントローラを作成したらとりまログイン処理を書いていく
 &amp;lt;span class=&amp;quot;synPreProc&amp;quot;&amp;gt;def&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;synIdentifier&amp;quot;&amp;gt;create&amp;lt;/span&amp;gt;↲ user = &amp;lt;span class=&amp;quot;synType&amp;quot;&amp;gt;User&amp;lt;/span&amp;gt;.find_by_name(params[&amp;lt;span class=&amp;quot;synConstant&amp;quot;&amp;gt;:name&amp;lt;/span&amp;gt;])↲ &amp;lt;span class=&amp;quot;synStatement&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; user &amp;lt;span class=&amp;quot;synStatement&amp;quot;&amp;gt;and&amp;lt;/span&amp;gt; user.authenticate(params[&amp;lt;span class=&amp;quot;synConstant&amp;quot;&amp;gt;:password&amp;lt;/span&amp;gt;])↲ session[&amp;lt;span class=&amp;quot;synConstant&amp;quot;&amp;gt;:user_id&amp;lt;/span&amp;gt;] = user.id↲ redirect_to tasks_url↲ &amp;lt;span class=&amp;quot;synStatement&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt;↲ redirect_to login_url, &amp;lt;span class=&amp;quot;synConstant&amp;quot;&amp;gt;:alert&amp;lt;/span&amp;gt; =&amp;gt; &amp;lt;span class=&amp;quot;synSpecial&amp;quot;&amp;gt;&amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;synConstant&amp;quot;&amp;gt;無効なユーザー名／パスワードです。&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;synSpecial&amp;quot;&amp;gt;&amp;quot;&amp;lt;/span&amp;gt;↲ &amp;lt;span class=&amp;quot;synStatement&amp;quot;&amp;gt;end&amp;lt;/span&amp;gt;↲ &amp;lt;span class=&amp;quot;synPreProc&amp;quot;&amp;gt;end&amp;lt;/span&amp;gt;↲   フォームで入力した値など、URLパラメータを受け取るときはparamsを使う authenticateメソッドは、引数とuserのパスワードダイジェストを比較して論理値を返す タスク管理アプリを作っているので、ログイン成功時のリダイレクト先はtasks_url ちな、hoge_urlは絶対パス、hoge_pathは相対パスになるらしい 302 Redirectでは完全修飾URLに飛ぶのが仕様なので、redirect_toではhoge_urlを使う 失敗時はlogin_urlに返し、エラーメッセージを渡す  2.</description>
    </item>
    
    <item>
      <title>RoRでScaffold作成を間違えたときの対処法が知りたい</title>
      <link>http://localhost:1313/post/2013-09-21-post/</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013-09-21-post/</guid>
      <description>generate scaffoldはMVC全部作ってくれて便利なんだけど、うっかりカラム名間違えたりしたときの対処法ってあるのかしら。後から変更したい場合は全部逐一手動で変更してね☆ってことだとさすがに面倒臭すぎるんだが……。
とりあえず今はscaffoldを削除してイチから作り直す形で対処しているが。
$ rails destroy scaffold hoge このとき、db:migrateすでにしちゃってるならsqlite入ってDROP TABLEするのも忘れずに。
後からアプリ改修して新しい属性付け足したりとかって場面もあるだろうし、何かしらscaffoldに変更をかける手段はあるんじゃないかと思って探してるんだけど見つからない。ぐぬぬ。</description>
    </item>
    
    <item>
      <title>バージョン管理に注意しながら、Ruby on Railsの動作環境を構築する</title>
      <link>http://localhost:1313/post/2013-09-16-post/</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013-09-16-post/</guid>
      <description>資料によっていろいろ言っていることが違うので、自分なりに調べながらまとめる。こういうのchef?とかで書いとけば環境構築楽になるんだろうな。
必要なもの  Ruby ……当然のごとく Rails ……当然のごとく
 rbenv ……RubyとRailsの管理システム
 ruby-build ……rbenvとセットで使うっぽいがよくわかってない
 Git ……バージョン管理。必須ではない気もするがあった方がいい。rbenvとかのインストールにも使う。
 RubyGems ……Rubyのパッケージ管理システム
 Bundler ……Gemパッケージの管理システム
  こんなところだろうか。直接的に必要なものの他に、それぞれを管理するためのツールが必要だったりしてなかなかに複雑であった。あとhomebrewとかのあたりまで遡るとキリが無くなりそうなのでさすがに割愛。というかOSによっても違ってきちゃうし。readlineとかopensslとかも依存関係があるっぽいんだけどよくわからないので割愛……。んー、意味あるのかこの記事。俺がRoRで使ってる環境はちなみにCent OSなので、その前提で書きます。
rbenv 本とか読んでるとRubyのバージョン管理にはRVM使わせているものが多いんだけど、rbenvの方が軽くてBundlerとの相性も良いらしい。よってrbenvを使うことにする。
参考：(http://passingloop.tumblr.com/post/10512902196/difference-between-rbenv-and-rvm)
インストール先のパスが迷う。。。ホームフォルダに不可視で入れるのが気持ちとしてスッキリするのでそれを採用。
$ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv で、bash_profileにパスを追加。
echo &#39;export PATH=&#34;$HOME/.rbenv/bin:$PATH&#34;&#39;  ~/.bash_profile echo &#39;eval &#34;$(rbenv init -)&#34;&#39;  ~/.bash_profile source ~/.bash_profile 追記 実はこの記事書く前にすでにRVM入れちゃってたんだけど（今読んでる『RailsによるアジャイルWebアプリケーション開発』にはRVMが紹介されてたので）、RVM削除してrbenvを入れなおそうと思い立って調べてみた。そこで辿り着いたRVMのアンインストールコマンドがなかなかに衝撃的だったので追記。
$ rvm seppuku 切腹！！！ｗｗｗｗ
ruby-build よくわかってないけど入れる。わかっていることとしては、これがないとrbenv installコマンドが使えない。rbenvのプラグインとしての位置づけらしいので、.rbenvフォルダ配下に入れる。公式のREADMEにもそう書かれてます故。
$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build Ruby Rubyはrbenvを使ってインストール。バージョンについては都度変わるので、$ rbenv install -lコマンドで落とせるバージョンを確認しつつ、必要なものを入れる感じで。まぁ使うバージョン選択できるんだから、そんなにセンシティブになる必要はないと思うが。</description>
    </item>
    
    <item>
      <title>『RailsによるアジャイルWebアプリケーション開発』第II部読了</title>
      <link>http://localhost:1313/post/2013-09-04-post/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013-09-04-post/</guid>
      <description>「仕事で忙しい」という最悪の理由により全然勉強してなかった件。Rails本、やっと第II部読み終わった……。
 基本的に rails generate hoge コマンドで色々作れる。scaffold、model、controllerとか、コマンドで作ればRailsが必要なファイルを用意してくれる。あとは作られたファイルをガチャガチャいじってアプリを作っていくというのが基本の流れ。
 特にscaffold。これをバチコンと叩き込むとコントローラ、モデル、ビュー、マイグレーションファイルから何から全部作られる。英語で「足場」という意味らしいがまさにそんな感じ。
 scaffold作ると編集画面（edit.html.erb）とか部分テンプレート（form.html.erb）まで作られるという至れり尽くせり感ビビる。
 create()やupdate()などの基本的なアクションも作られるので、実装したい動作によっては新しいコントローラをわざわざ作るまでもなかったり。
 テスト用のファイルも自動生成される。コントローラの機能を試すファンクションテスト、モデルの動きを試すユニットテスト、そしてアプリのフローを試す統合テスト。
 テスト用ファイルの編集方法がいまいちよくわからず。このあたりは試してみないと実感わかないかも。
 複数モデル（テーブルと読み替えてOK？）間の関係を表すには、modelsファイルにhas_manyやbelongs_toを追加する。DBを直接弄ったりはしない。
 button_to()に:remote=&amp;gt;trueを加えるだけでAjaxが追加できる。……え？
 そもそもAjax使ったことないんでこのへんはもう少し見直したいが。。。Ajaxと言っても、再読み込みなしで画面の一部が再描画される程度の話か。
 ちなみRailsのCSSは標準でSCSSが使われている。SCSSって最近まで知らなかったけどクソ便利すぎて笑う。最初からCSSがこういう文法ならいいのに……。これもまた勉強が必要なり。
 コントローラのrespond_toメソッドは出力形式を色々替えられる。format.json、format.atomとか。
 メールの送信機能もある。。。（このへんになるともう色々出来過ぎてよくわからなくなってきた）
 Railsのコードは当然ながらRubyで書くわけだが、他にヘルパーメソッドというものがある。フォーム用にボタンリンクを作るbutton_to()とか、リンクを作るlink_to()とか。Rubyをそもそもまだちゃんと理解できていないので、どれがRubyの文法でどれがヘルパーメソッドなのかの見分けもいまいちついていない状態。
  わーすげー簡単にまとめてしまった。全体の感想としては、とにかく何かと簡単かつ便利。自分でコーディングが必要な範囲は最低限。Javaでウェブアプリを組んだ経験があり、そのときはMVCそれぞれのファイルを全部イチから手で作っていたわけだが、RORではrails generate scaffoldで一発である。なんてこったい。しかし逆に言えばアプリの構造自体は全部任せて、中心的な機能や外観のコーディングだけに集中できるんだから、効率が良いわけで。
SCSSとかAjaxとか、ウェブアプリを作る上でよく使われる技術が標準で備わっているというのも利点だろう。だから覚えることも多い。SCSS、Ajax、あとはDBもか。DBはSQL文を直接発行するようなことはないように組まれているけど、has_manyとか正しく書くためにはDBの構造あたりを正しく知っていなくてはならない。うむ、これからいろいろと学ばなくては。
しかしこの本、いきなり実例から入ってしまうので理解がしやすいやらしにくいやら。実際に何か作りながら説明していく本というのは少なくないが、この本は第III部でRails全体の詳説が入る。「ここで入れるなら先に解説してくれよ！」と個人的には言いたい。いきなり知らないメソッドをバシバシ盛り込まれてどんどんコーディングを進められるより、そもRailsとはどういったディレクトリ構造になっていて、どういった動作をするものなのかという中身を知ってからの方が実例を理解しやすいのではと思う。まぁこのへんは好みか。
第III部を読みつつ、そろそろとりあえず何か作ってみてもいいかもしれない。SCSSやAjaxを知らない以上、見た目にこだわったりとかはできないけど、とにかくアプリっぽいもの、データを追加して編集して表示させてっていうものをまずは作る。9月はそれが目標だなー。</description>
    </item>
    
    <item>
      <title>『RailsによるアジャイルWebアプリケーション開発』第I部 読了</title>
      <link>http://localhost:1313/post/2013-07-25-post/</link>
      <pubDate>Thu, 25 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013-07-25-post/</guid>
      <description> 第I部はRailsのインストールから、とりあえずウェブアプリケーションを作って公開するまで。あとRoRにおけるMVCモデルの概要と、Rubyの簡単な紹介が主。
第1章 Railsのインストール  apt-getを使って必要な依存関係をインストールしているけど、Cent OSではapt-getが使えず。yumで入れようとしたが、yumにはnodejsがないらしく入らない。。。やむを得ずwgetで落としてきて展開しました。 エディタはTextMateがオススメとあるけど、変えるのめんどいし取りあえずvimでいいか。。。  第2章 Hello, Rails!  ポート3000を使うってことでiptablesで開けてあげたりとか、そのへんは自分でやる必要があった。こういうのスムーズに出来るようにならなきゃなんだろうなぁ。 eRubyの&amp;lt;% %&amp;gt;でコード埋め込むのがなんか気持ち悪いと思ってしまう。同じ理由でJSPも苦手だった。……と思ったら、この後の章で似たようなことが書いてあった。元々HTMLとJavaScript書いたりしてたからなんだろうけど、こういうのはなるたけ分離したいと思ってしまう。  第3章 Railsアプリケーションのアーキテクチャ  ちょっと置いてけぼり感あったので、この後の章でアプリ作りながら再読する。  第4章 Ruby入門  一応Rubyの基礎はさらったので割愛しよう……と思ったら！！！　『作りながら学ぶRuby入門』より記述範囲が広かった！ そういえばあの本、例外の処理とか出てこなかったな……。もう1冊、きちんとRubyの基礎をさらえる本を読んだ方が良さそうな気がしてきた。  キーワードreturnは省略可能です。returnがない場合、最後に評価した式の結果が戻り値になります。（p.39）  はあ！？
 Rubyの文法ってなんか慣れない。。。
  </description>
    </item>
    
    <item>
      <title>Ruby on Railsを学ぶ、とはどこまでの範囲を学ぶのか</title>
      <link>http://localhost:1313/post/2013-07-21-post/</link>
      <pubDate>Sun, 21 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013-07-21-post/</guid>
      <description>VPSを使ってRuby on Railsでウェブサービスを作るにあたり、「まずは足元から」ということでLinuxの勉強から始めてボチボチやっていたんだけど、「むしろ取りあえずアプリ動かしてみた方が良いのではないか」と思い立ち、方針を転換。Linux→DB→Railsなんてゆっくりやるより、まずは動かしてみることにした。購入したのは以下の本。
RailsによるアジャイルWebアプリケーション開発 第4版posted with amazlet at 15.03.01Sam Ruby Dave Thomas David Heinemeier Hansson オーム社 売り上げランキング: 138,293
Amazon.co.jpで詳細を見る 各所で絶賛されているのを見かけた上、立ち読みしてみた感じでもRubyのインストールという初歩から始まっていてわかりやすそうだった。候補としてはもうひとつ、インプレスの『基礎 Ruby on Rails』もあったんだけど、ザッと見た感じでは『Railsによる〜』の方が記載が細かそうだったのでこっちを選んだ。
さて、VPSでRuby on Railsを作るにあたり、どこまでの範囲を学べば良いのだろう。今回買った本だとおそらくはRailsとRuby、DBあたりのコーディングが内容の主なようで、インフラ側のチューニングの話なんぞは載っていなさそうだった。自分が想像するとこだとLinuxというかOSの準備、VPSであるならばOSに接続するためのSSHの使い方、ウェブに公開するのでそのあたりのセキュリティ、DBやApacheなどのアプリインストールなどなど、やることはかなりありそう。あとView側の問題として、Coffe ScriptやSCSSあたりもやんなくちゃいけないんだろうな。JavaScriptとCSSはそれなりに書いたことあるけど、せっかくだし挑戦してみたい。
……という感じのビジョンを描いているのだが、やはり全部まともにイチからやっていたらかなりの時間が必要だと思う。とりあえず作ってみて、あとは気になったところを徐々に手をつけていく感じでやっていきたい。あと、環境構築系だとこの本が良さそうだなーと目をつけている。
Ruby on Rails環境構築ガイドposted with amazlet at 15.03.01黒田 努 インプレスジャパン 売り上げランキング: 44,343
Amazon.co.jpで詳細を見る ……で、『Railsによる〜』はとりあえず1章読破したのだが、まさかのここでつまずくという事件発生。つまずくのはえーよｗｗｗ
CentOSにRVMを入れようとしたのだが、以下のコマンドが通らなかった。curlのエラーっぽいんだけど、今をもって解消できてない。一応他の方法でRVMは入ったので、しばらく保留にしとこうかと思っている。
 bash </description>
    </item>
    
  </channel>
</rss>