<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Octopress on the world as code</title>
    <link>http://chroju.github.io/categories/octopress/</link>
    <description>Recent content in Octopress on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 01 Mar 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://chroju.github.io/categories/octopress/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>はてなブログからの記事移行を完了した</title>
      <link>http://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress/</link>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://chroju89.hatenablog.jp/&#34;&gt;旧ブログ&lt;/a&gt;から全記事移行完了しました。ちょっとだけ疲れた。&lt;/p&gt;

&lt;p&gt;もともとはてなブログで記事を書いてたわけですが、こちらは記事のエクスポート形式がMovableType形式にしか対応してないので、そこからMarkdownに変換し直したりだとか、はてなキーワードリンクを削除したりとか、地道にいろいろやらねばならず。たぶんスクリプトでガチャーンと一発でやれるんでしょうけど、力が足りないのでvimでファイル開いて変換ポイント確認してはポチポチコマンドで置換してやりました。&lt;/p&gt;

&lt;h2 id=&#34;エクスポートファイルの分割:6542ff07ba9940bcfbe79c8ca068e0ca&#34;&gt;エクスポートファイルの分割&lt;/h2&gt;

&lt;p&gt;はてなブログからエクスポートすると、最初は全記事が1ファイルに連なった状態で吐かれます。自分はMT使った経験ないんでわかりませんが、これは「そういうもの」と考えていいんですかね。一方のoctopressはエントリーごとに分割されているので、まずはこのエクスポートファイルを1記事ずつ分割してやらなくてはならない。あとヘッダの形式も微妙に両者で異なるので、ここの変換も必要。&lt;/p&gt;

&lt;p&gt;なんか変換ツール落ちてないかなと堕落した感じで探しまわってたら、一応ありました。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/railsbros-dirk/2351046.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;名前がMT to Markdownなので完全にMarkdownへ変換してくれるものかと期待したのだけど、実際やってくれるのは先ほど挙げた「分割」と「ヘッダの書き換え」程度です。中身はHTMLタグのまま。一方で自分の環境だと&lt;code&gt;&amp;lt;&lt;/code&gt;が&lt;code&gt;&amp;amp;lt;&lt;/code&gt;に変わってしまうといった副作用もあり。あと元のヘッダにあったBASENAMEだとかCONVERT BREAKSといった文字列がそのまま本文内に残ってたり。。。ちょっと謎。ただ、変換が楽になるのは確か。&lt;/p&gt;

&lt;h2 id=&#34;vimによる置換:6542ff07ba9940bcfbe79c8ca068e0ca&#34;&gt;vimによる置換&lt;/h2&gt;

&lt;p&gt;スクリプト力弱いので、あとはvimによる力技です。今回初めて複数ファイルを一挙にvimで扱うってやったけど、便利ですね。&lt;/p&gt;

&lt;p&gt;vimではバッファリストがあるのは知っていたけど、一方で引数リストっていうのもあって、&lt;code&gt;:args hoge.txt fuga.txt&lt;/code&gt;とかでファイルリストを作れます。元々は名前の通り、vimを起動するときに与えた引数が入ってるリストらしいのだけど、任意に書き換えができるのであまり「引数」リストという感じはしない。バッファ内の全ファイルへのコマンド実行は&lt;code&gt;:bufdo&lt;/code&gt;で出来るし、引数リストについても似た感じで&lt;code&gt;:argdo&lt;/code&gt;が使える。このあたりを上手く活用すれば、今回のような複数ファイルを一挙に処理するのはたやすい。&lt;/p&gt;

&lt;p&gt;例えば先の&lt;code&gt;&amp;amp;lt;&lt;/code&gt;を&lt;code&gt;&amp;lt;&lt;/code&gt;に全置換したり。他にも置換コマンドはh1タグを&lt;code&gt;#&lt;/code&gt;に変換するだとか、いろいろな形で使いました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:argdo %s/&amp;amp;lt;/&amp;lt;/g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CONVERT BREAKSと書かれた行を全部消したり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:argdo g/CONVERT BREAKS/d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自分が今回初めて身に付けた知識でもっとも有効だったのは、検索でマッチした文字列を置換後の文字列内で指定する方法ですかね。検索パターンの括弧でくくった部分（vimなのでエスケープして&lt;code&gt;\(&lt;/code&gt;と&lt;code&gt;\)&lt;/code&gt;で囲った部分、ということになりますが）を、置換パターンから&lt;code&gt;\1&lt;/code&gt;で指定できる。これははてなキーワードのリンクを一掃するのに役立ちました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:argdo %s/&amp;lt;a class=&amp;quot;keyword&amp;quot;\(.\{-}\)&amp;lt;\/a&amp;gt;/\1/g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あー、あとこのコマンドで重要なのは&lt;code&gt;{-}&lt;/code&gt;の部分ですかね。これで最短マッチになるらしい。他、細かなとこだと改行コードを入力するには&lt;code&gt;&amp;lt;C-v&amp;gt;&amp;lt;C-m&amp;gt;&lt;/code&gt;と打つとか、&lt;code&gt;&amp;lt;C-r&amp;gt;/&lt;/code&gt;で直前の検索パターンをコマンドラインに入力できるとか、いろいろこの機会に調べられてタメになりました。&lt;/p&gt;

&lt;h3 id=&#34;参考:6542ff07ba9940bcfbe79c8ca068e0ca&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scriptogr.am/error1009/post/201211151634&#34;&gt;Vimで最短マッチと検索してから置換 - // Nice Catch! :)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lesguillemets.github.io/blog/2014/08/05/vim-reuse-last-search-for-replace.html&#34;&gt;Vim で直前の検索パターンを部分的に再利用する - Xeebi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eightsee.net/?m=pc&amp;amp;a=noticeinfodetail&amp;amp;notice_no=31&#34;&gt;改行コード変換 vi で改行コード一括置換　-eightsee.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ファイルのリネーム:6542ff07ba9940bcfbe79c8ca068e0ca&#34;&gt;ファイルのリネーム&lt;/h2&gt;

&lt;p&gt;また先のコードで分割したMarkdownファイルは自動的にファイル名も振ってくれるんですけど、日本語の場合は漢字をなんとなく頑張って読んでローマ字に変換してくれた、気持ちはありがたいけど残念な感じのものになっちゃいます。なのでこれも一括変換。&lt;/p&gt;

&lt;p&gt;ファイル名一括変換だと&lt;code&gt;rename&lt;/code&gt;コマンドってのがあるのですね。Linuxだと標準で入ってるけどUNIX系にはないだとか。なのでMacにも入ってなかったので、Homebrewでインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install rename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使い方としては&lt;code&gt;rename &#39;s/hoge/fuga/&#39; *.markdown&lt;/code&gt;形式が使える、要はvimの置換コマンドっぽく書けるので、vimmerならこれが便利ではないかと。正規表現も当然使えます。ただし、vimで必要なあの面倒くさいエスケープの数々が要らなくなっていたり、先ほど書いた&lt;code&gt;\1&lt;/code&gt;によるマッチ文字列の流用が&lt;code&gt;$1&lt;/code&gt;に変わっていたり、若干の使用感の違いはあります。でも便利。&lt;/p&gt;

&lt;h3 id=&#34;参考-1:6542ff07ba9940bcfbe79c8ca068e0ca&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yahihi/items/dd8b3cc7c7041c3f03b9&#34;&gt;Linuxでrenameコマンドを使おう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そんなこんなで記事の変換が終わったら、あとはoctopressのレポジトリで&lt;code&gt;/source/_posts&lt;/code&gt;の中に全ファイルブチ込んで&lt;code&gt;rake generate&lt;/code&gt;かければ生成されます。最初はちょっと戸惑いもありましたが、やれてしまうと案外簡単に移行できるなという感じです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>