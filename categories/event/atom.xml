<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Event on the world as code</title>
    <link>https://chroju.github.io/categories/event/</link>
    <description>Recent content in Event on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>written by chroju</copyright>
    <lastBuildDate>Sun, 25 Oct 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chroju.github.io/categories/event/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>オープンソースカンファレンス2015 Tokyo/Fall行ってきた</title>
      <link>https://chroju.github.io/blog/2015/10/25/osc-2015-tokyo-fall/</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/10/25/osc-2015-tokyo-fall/</guid>
      <description>戦利品、ConoHaちゃんかわええ。
オープンソースカンファレンスに初めて行ってみた。2015 Tokyo/Fallです。だいぶ奥地の方でやってるなぁという印象があってなかなか行きづらかったのだが、実際行ってみると自然に囲まれて静かで建物綺麗で過ごしやすそうないい大学ですね。ちょっぴり休憩でもくもくしたりしてみたけどだいぶ捗ったし、もう少し近所なら作業環境に使いたい感じが（）
ぼっち参戦かつ初参戦かつコミュ障な故、ブースがんがん回ってがんがん自分から話しかけるみたいな度胸はなく、だいたいセッション聴いてました。ので、セッションごとにちょっとまとめる。
はじめてのオープンソース・ライセンス オープンソース自体の考え方だとかは知ってはいたのだが、ライセンスがMITとかApacheとかそういういろいろがあるのがよくわかってなかったので。話の中で教えていただいたGithubによる、オープンソースライセンスの選び方 | オープンソース・ライセンスの談話室というページが確かに詳しそうなので後で読まなければなと思った。ギッハブ使ってるのに全然これ理解してなかった。
実録！Hinemos導入経験者が語る、実運用でのあるある話 最近実務でHinemosを使っているもので。監視設定をグループ（スコープ）単位で作ってしまうと静観するときに設定変更がしんどいだとかっていう本当にあるあるな話と、Hinemos Utilityが便利だという話など。Hinemos Utility、設定のインポートエクスポートがあるので、GUIポチポチの面倒臭さから救われそうな気はした。あるある話の方は他の監視ツールでもわりと似たところあるので、結局アーキテクチャーってどんなツールでも大して変わらんのかなぁ、そのへんどうにかしたツールないかなぁとか思った。
そういえばセッションはTISの主催だったのだが、同社といえばZabbixの池田氏の印象が強いので、Zabbixと比較して同社としてどう考えてるのかってあたりも聞きたかった。
[飲食OK]（発表者募集中！）1日目-ライトニングトーク（by OSCスポンサー） なかなかカオスにライトニングトーク。飲食OKでしたけど学食せっかくなので使いたかったので無飲食で。言及してるとキリがないので割愛。
Ubuntuの最新情報 Ubuntu使ってない。てかDebian系ほとんど触った経験ないんで触らなきゃなと思いました。
ZabbixでDockerも監視してみよう 最後の質疑で出た話で、新陳代謝の高いコンテナの監視に既存ツールの分単位での監視感覚が役に立つのか？っていうのがあったのだけど、わりとそれに同意した。自分はコンテナを実サービスで運用した経験がないのでアレなのだが、その性質からして既存サーバーより速いスピードで起動停止を繰り返すことは有り得ると思うし、むしろアーキテクチャーの考え方がスピーディーなものに変わるためには監視ツールの在り方も変わんなきゃならないんじゃないかなぁと思った。答えは出てないけど。
コンテナ(Docker)時代のインフラ技術・運用管理に迫る！ Docker最新事情という感じで、Dockerの概要もそこそこに周辺ツールや開発状況をいろいろ舐めていく感じのセッション。Docker触り始めたばかりの自分にはとてもありがたかった。Docker machine、Docker Swarm、docker-composeだとかなかなかにワクワクする話。
aozorahackの今までとこれから ～インターネット電子図書館「青空文庫」をエンジニアリングで支える～ ここから2日目。春に青空文庫アイディアソンが開かれて話題になりましたが、そのときから興味があったので話を聞いてみた。青空文庫の誕生が1997年、オープンソースという言葉が生まれたのが1998年ということで、オープンソースより古い歴史を持つ青空文庫がOSSライクな発想をしていたはずもない！という出発点だったようなのだが、それを変えていこうという試み。もともとサードパーティ的にビューアやコンバータを作る動きは周辺にあったわけで、それをまとめて今風の開発をしていくとなると面白そうだなと思う。自分は業務エンジニア＋趣味エンジニアでしかないけど、こういうボランティアというか、自らの意志で参画していくエンジニアリング活動というのがOSSの在り方なんだとここで初めて腑に落ちた気がした。
Solaris ZoneとPuppet、Serverspecでインフラ CI Solarisわからないけどインフラ周りの知識手広くしたいなということで行ってはみたがやっぱりわからなかった。知識って広くて浅いか狭くて深いかの二択だと勝手に思ってたけど、実際それなりに出来るエンジニアってそこそこ手広く平均点取れる人が多い気がしていて、例えばこのセッションであればUNIX（Solaris）の知識にコンテナ（Zone）の知識、んでPuppetはRubyだし、ServerspecもRubyというかRSpecなんですよね。エンジニアとしての幅、ちょっと見直したいなと思わされたセッション。
【パネルディスカッション】今こそ語るエンジニアの幸せな未来 ～OSC東京編～ 春に行ったJAWS DAYSでも同様のパネディスを聴いてはいたので実質第二回というか。こういう話題が定期的に持ち上がるようになったのって、さくらインターネットが15周年迎えたこともあるようにエンジニアの高齢化（家庭環境の変化）があるような気はする。働き方はライフステージによっても、世の中の技術動向やビジネス動向によっても変わるので、結局時間と金銭的余裕のあるうちに勉強して、常に自分が働きやすい場所にいられるようバリューを磨いておくしかないのだろうなと思う。そういう話でした。
以上、9セッション。知識のザッピングとしてこういうセッション形式のイベントはやはり良いなと。いわゆる勉強会だとだいたいが自分の興味関心のあることだけに集中してしまうのだが、こういう機会だとせっかくなのでってことで脇道に逸れたりしやすいので、知識の幅増やす機会にはなりやすいですね。OSS、TISのようにビジネスとして取り扱っている人たちもいれば、aozorahackのような草の根の動きもあったり、有り様はいろいろであって、んでGitHubで取りあえずソース読むところからいつでも手を付けられる時代にあるので、何かしらやってみると面白いのかもしれない。尻込みしてるのではなく。
テロ #osc15tk pic.twitter.com/OEa2JYMezY
&amp;mdash; T.Kabu (@disco_v8) 2015, 10月 24 
懇親会、TRIGGER ANIMATION EXPOに行けるチャンスがここしかなかったのと、200人という大所帯にぼっち参戦する勇気がないのと（あと、さすがに薄い話しかできなさそうであまり意味はないかなと思った）で行かなかったんだけど、生ハム原木はうらやましかった。</description>
    </item>
    
    <item>
      <title>JAWS-UG初心者支部の立ち上げに行ってきた #jawsug_bgnr</title>
      <link>https://chroju.github.io/blog/2015/05/15/jaws-ug-for-beginners-at-first/</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/05/15/jaws-ug-for-beginners-at-first/</guid>
      <description>JAWS-UG初心者支部【第1回】2015年5月14日(木) - JAWS-UG初心者支部 | Doorkeeper
AWS初心者具合がどれぐらいかと言うと、先日のJAWS DAYS 2015のハンズオンセッションでアカウント作り、それっきり一度もログインしていないぐらいの初心者なんですが、今回JAWS-UGの初心者支部というのが出来ると聞いたので飛び込むにはちょうどいいと思い行ってきました。しかし会場の内田洋行さん、初めて行ったけど大変ナウいオフィスでびっくりした。横に長い会場だったけど、6面スクリーン同時投影でどの席でも見やすいとかハンパない。
AWSは入口が山のようにある 初心者と口で言うのは簡単ですが、それを脱する手段も実は山のようにあるのがAWSで。そもそもがマウスでポチポチやればサーバー立ち上がっちゃうっていうサービス自体の簡易性を反映してなのかなんなのか知りませんが、入口といえる部分は非常に多いです。今回の勉強会では「入口」の紹介に非常に時間を割いていたなという印象。
自分が特に印象深かったのはセルフペースラボとWebiner。前者はウェブ上で無料で（有料コースもあり）使える実践的なラボ空間で、自学自習でAWSの使い方が学べるとのこと。自分はVMwareを今専門としているのだが、VMwareでも同様のHands on Labsがあったりして、使えるもん使わなきゃ損だなと。後者はオンライン・セミナーで、毎週開催されているそうです。火曜日18:00からが初心者向け、水曜日18:00からがBlack Belt Tech、すなわち「黒帯」ですので中級者向けのセミナー。
他にも技術書の読み方や推薦があったり、ちょっと上級者向けな気はしたけどRe:Inventの紹介があったり（まーこういうのは早いうちから知っておいて、アンテナ高めといた方が良いのだろう）。とにかく勉強しようと思ったらいくらでもAWSを知るための入口はあるし、しかもかなり敷居の低いところから始めることもできるので、やらないで指くわえてたらどんどん置いていかれてしまうだけだなと。
人と会うこと 勉強会界隈ではよく言われる話で、本番は懇親会ってのがあります。まぁこの集まり自体が「Users Group」であることからもわかる通り、エンジニア同士の会社の枠を超えたつながりってすごく重視されていて、今日のなかでも何度も話に出ました。というか「隣の人と話してみましょう」なワークセッションが設けられていたぐらいの。これはあれですね。勉強会自体の初心者が多いことも見越してのことだったんでしょうね。
自分はもうとにかくコミュ障というか人と話さず済むならそれが一番って感じの人間なんですけど、ここまで言われると話さないわけにもいかないんじゃないかなと思いつつあるし、てか勉強会参加の第一の目的が「コミュ障脱却」になってくるのではないかという話も。。
これまでの勉強会で他の参加者と話したことは皆無ではなくて、んでやっぱり社外のエンジニアだと技術との向き合い方だとか、会社環境における技術選択の方式だとかが全然違うことが多くて、そういうの聞いてるだけで確かに楽しいのは知ってるんですよね。んでユーザーグループとなるとそのつながりがずっと続いていくわけで、絶えず情報交換しながら自分の会社に持ち帰って試してみて、また勉強会に課題を持ってくるみたいなサイクルが出来てくるわけじゃないですか。会社内だとなかなか解決できないことを外に出すこともできるわけで、閉塞感を打破する矛先を持っておくことってすごい重要なんじゃないかって気がします。近所にもJAWSの支部あるっぽいんで、そっちにも顔出してみたい……ですね、なんとか。あー、初心者向けならコミュ障のための勉強会参加法も教えてほしいなぁ。
初心者の中での隔絶 セッションを聞きながらTwitterでハッシュタグ追っていたのですが、結構レベル高くないか？難しいよ？みたいな声もちょこちょこ聞こえていて、「初心者」とひとえに言ってもレベルの差があるのだと気付いた次第。
それを言ってしまうと多分自分は「なんちゃって初心者」です。オンプレミスのインフラエンジニアとしては数年の業務経験がありますし、VPS使ってるしAWSもアカウントは持ってるしで、完全な初心者かと言うとそうではない。一方で本当に「AWSってよく聞くけどなんなの？ 導入したらおいしいの？」ぐらいの人もいるのだし、敷居をどこまで下げていくかって案外むずかしい話なのかもしれないなと。初心者向けを謳っているのに「いやいや難しいでしょ」で人が離れてしまったら悲しいし、そこへのフォローってどうしたらいいのかなとか。
あと「わからないことを取りあえずスルーする力」ってのも必要な気がした。今日のセッションって結構具体的なAWSのサービス名も出たりして、自分も全然わからない言葉は少なくなかったんですけど、一つ一つの単語や一部の話はわからなくとも、全体として何を言っているのか掴めれば取りあえずOKってことも多いし、わからない部分にこだわりすぎず、ある程度スルーする力って必要だと思うのです。でもこれって日々「わからないこと」と向き合っているエンジニアならではの特性っていう部分もあると思うので、そうじゃない人も入ってくる可能性のあるこの初心者支部では課題になりそうとも思った。
やろうと思えばいくらでもやることあるし、やらないと置いて行かれるだけだってのが理解できたので、できることからガツガツやっていきたい所存。とはいえ「目的のない勉強」は行き詰まりやすいので、AWSで何ができるのか、自分は何をしたいのかをちょっと考えてみようかなと。とりあえず「紫本」買ってみるか。。。</description>
    </item>
    
    <item>
      <title>JAWS DAYS 2015でAWS童貞捨ててきた</title>
      <link>https://chroju.github.io/blog/2015/03/22/jaws-days-2015/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/03/22/jaws-days-2015/</guid>
      <description>JAWS DAYS、前々からやってるのは知ってたんですけど、自分はAWS経験ないし行ってもわかんねーかなと思ってなんとなく行かずにいたんですが、今回タイムテーブル覗いてみたら初心者向けハンズオンもあったので意を決して行ってきました。
ハンズオンでAWSアカウント作り、とりあえずEC2のインスタンスを1つばちこんと立てて、もう1こ簡単なREST API使ったサービスをばちこんと立てたので、無事にAWS童貞捨てることができました。クリック1つでサーバーが立つってのは知ってはいたけど、実際やってみるとほんと楽だなと。ていうかこれがあるならインフラエンジニアって何のためにいんの？ってやっぱり思うのですよね。もちろん大規模に組むならどこにどのサービス使ってスケーリングの設定はどうでみたいのがいるし、サーバーとストレージとLB立てるってだけがエンジニアではないと思うけど、サーバー1つ立てんのにいちいち申請上げて手順書き出して何人日もかけてやってる自分と比べると、デプロイのスピードも容易性も、おまけに確実性も段違いなわけで。わかってる、わかってるつもりだったけど、こりゃもう無理だなというか、クラウドファーストってよりAWSファーストが前提にあって、オンプレミスはなにか制限がある場合の最終手段にしかならんよなということを改めて実感してしまった気がします。
セッションは結果としてわりとミーハーに聞いてしまって、ソニックガーデン倉貫さんの話だとかハンズラボ長谷川社長の話だとか、さくらインターネット田中社長がモデレーターをつとめるパネディスとかに参加してました。特に倉貫さんの「納品のない受託開発」の話、これまできちんと聞いたことなかったのですんごい興味を惹かれました。「受託開発」と言ってますけど、実質的には顧客との関係は受託開発よりも強固なもので。要するにビジネスモデルはあるけどエンジニアがいないようなスタートアップに対し、技術顧問を務めるような形で開発と運用を請け負うのですね。それはシステムを作って収めるというよりは、顧客の課題解決を一緒になってシステム開発によって実現していくこと。エンジニアの働き方の概念自体が変化する話。これをソニックガーデン社外の人間がすぐ真似できんのかと言ったらそうではないかもしれませんけど、現状の特に死に体になってる受託開発界隈に対して一石を投じるには十分過ぎる話だと思いました。
  「納品のない受託開発」の先にある「エンジニアの働きかたの未来」  from Yoshihito Kuranuki 
あとハンズラボの話に関してはこのツイートの内容に尽きる気がします。正直、羨ましいというか、今でこそ先駆的な一例に過ぎないけど、たぶんこういう例は徐々に増えていく、その一端なのだろうなと思っている。
ハンズやあきんどスシローのすごいところは、それまでtech companyっぽくない印象だった業態が、じつは #jawsdays で先進的な事例として講演できるようなことをやってのけたところだと思う。 クラウドだからできた。
&amp;mdash; Haruka Iwao (@Yuryu) 2015, 3月 22 
AWSのポイントはやっぱり、やろうと思えばすぐなんでもやれるって点だと思うんですよね。サービスやシステムを構築するにあたり、インフラをデリバリーするスピードがAWSによって格段に上がった。今まで何人日、何人月という工数をかけて、それでもヒューマンエラーで障害起こしてたようなインフラが意味を成さなくなった。じゃあその時代にインフラエンジニアは何をしなければならないのか？ってのは、ほんとちゃんと考えなきゃ死ぬな―これ。</description>
    </item>
    
    <item>
      <title>Developers Summit 2015に行ってきた</title>
      <link>https://chroju.github.io/blog/2015/02/21/developer-summit-2015/</link>
      <pubDate>Sat, 21 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/02/21/developer-summit-2015/</guid>
      <description>Developers Summit 2015の2日目に行ってきました。うちの会社とは少し毛色が違うイベントということもあり、これまで業務時間を利用して行くということはなかなかできなかったんですが、今年はたまたま休みが入ったので行けました。
マネジメント的な話から、かなり技術よりの話まで、幅広く聞くことができたのは面白かったです。一方でそれほどベンダーロックインされた話もなく、自分の業務に何かしらのフィードバックを持ち込みやすそうな構成になっているのだなという点もよくわかりました。人は多くてちょい疲れますけど。。あと会場の目黒雅叙園、IT系のイベントやってるとは思えないぐらい綺麗な場所ですね。。まぁ元は結婚式場などなどなわけだけど。渡風亭とか、屋内に茅葺きの一軒家があるもんでびっくりした。
以下、参加セッション別に簡潔に。
進化する！インテル RealSense テクノロジー インテルが売り出している、Kinectのような3Dカメラのデモを交えた紹介。990ドルで買えて、SDKキットは無料で落とせるらしいので、こういうのも試してみると面白いのかも。自宅での趣味開発ってこれまでコード書いてるだけに結局は終始してしまっていたのだけど、昨今の流行りに乗ってラズパイでなんかやってみたりっていうIoTっぽいのも楽しそうだし、Unityみたいな簡単に本格的なアプリケーションを作れるフレームワークもいいのかなと。RealSenseもUnityに対応しているみたいです。
関連  Engadget Fes：インテル「RealSense 3Dカメラ」をタッチ＆トライ。表情も認識 #egfes - Engadget Japanese  クラウドを活かす組織運営 ～クラウドガバナンス入門 すでにSlideShareが上がってますね。
  デブサミ2015 クラウドを活かす組織運営 ガバナンス入門  from Yuya Yoshida  様々なケーススタディを元にした、組織内でクラウドを導入する場合のガバナンスノウハウの紹介。クラウドの導入とは単なる技術的な変革にとどまらず、リソース調達のタイムスパンが飛躍的に短くなったり、管理手法としてスパイラルが適していたりと、ビジネスの枠組み自体が変化することを意識して、ガバナンスルールを変えなくてはならないという点が印象的でした。またスキルセットの話（属人化とか能力評価の方法）はクラウド運営にとどまらず、いろいろと応用できそうな話でした。 ## おさえておきたいモダンなチーム開発を支えるツール連携 こちらもSliedeShareあり。   おさえておきたいモダンなチーム開発を支えるツール連携【20-B-4】 #devsumi #devsumiB  from Tomoharu Nagasawa  システム企画にConfluence、BTSにJIRA、開発にGitHubといった形でそれぞれ個別のツールを使って管理しているところを、Atlassian社のツールを使って連携させていきましょうというような話。こういったツールとまったくもって無縁の仕事をしているので若干ぼんやり聞いてしまいましたけど、やっぱツールで仕事回せるのは間違いが少なくて良さそうだな、と。上がどうにもしてくれないなら、自分でなんとかせねばなぁ。 ## 実践！Infrastructure as a Codeの取り組みと改善 サイバード社の実例に基づいたInfrastructure as a Codeの現場レベルでのお話。正直言って途中から用語についていけなくなってしまったのだけど、オンプレミスでVMware上に仮想マシン立ててばかりいる自分とは隔世の感があることだけはよくわかりました。Chefはともかく、AWSには早いとこ業務で関わりを持たなくてはまずそう。AMI？ ChefとAWSの連携？ オートスケーリングの制御？ ## 情報革命時代における新しい多様性の共存と、これからのエンジニアのキャリア、評価制度について ビズリーチCTOの竹内氏によるお話。「多様性」とは内向型人間（イントロバート）と外向型人間（エクストロバート）のことであり、エンジニアには前者が多い一方で、営業には後者が多く、両者が相互理解していくこと、また近代資本主義下ではエクストロバート偏重文化があることを指摘した上で、イントロバートに対する配慮をどのように進めるべきかという内容でした。自分もイントロバートではあると思うので、結構興味深い内容。 外向型の振る舞い方を内向型に対して強要すること、またその逆はハラスメントに相当すると考え、双方の立場を理解して付き合っていかなくてはならないと。またイントロバートはビジネススキル、マネジメントスキルがなかなか理解できない側面もあるので、そういったスキルはきちんと理論的に分解して説き、「インストール」していくべきである。確かに自分も「なるべく社交的に振る舞わなくてはならない」という強迫観念のようなものがあるんですけど、一方で外向型の人が内向型に合わせてくれても良いはずなんですよね、多少は。 このあたりのお話はスーザン・ケイン氏の主張が下地になっているとのことなので、後で調べてみたいところ。  変革のSIer～挑戦者たち～ NRIと日立ソリューションズのSEによるパネディス形式でのセッション。ごめんなさい、本日寝不足につき正直半分寝てました。。
お話としては大きく二本立てで、保守的なSIerの内部で新しいものを導入していくにはどうすればいいのか？という話と、SIerが持つ技術をOSS化した事例の紹介。前者についてはリスク（悪い面の話だけではなく、将来予測が難しいことをリスクと呼ぶ）を可視化して検討を重ねていくことが大切であり、後者についてはオープン化の時代に対応していくために、OSSとして自社技術を公表することによる外部へのアピールの重要性と、またそれを実践するにあたっての困難が話の主軸でした。
大きなことをやる必要はない、世の中には解決すべき問題は多いので、小さなことからでも変えていくべきだという話がセッションの中でありましたが、自分としてはドラスティックな変革が必要だよなーという思いもあってちょっともにょもにょ。結局小さなことしかゲリラ戦を仕掛けていくしかないとしたら、なかなかに気の遠くなる話です。</description>
    </item>
    
    <item>
      <title>Rakuten Technology Conference 2014に行ってきた</title>
      <link>https://chroju.github.io/blog/2014/11/02/2014-11-02-post/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2014/11/02/2014-11-02-post/</guid>
      <description>イベント終了から1週間後にレポートとか遅すぎますね。これの前の週のオープンソースカンファレンスがせっかく土日開催だし行こうかなと思っていたんだけど、土曜に徹夜仕事があったんでさすがにしんどくて行けなくて、じゃあこっち行こうかな、と行ってみた具合。
中嶋聡氏→三木谷氏→OpenStackの話→Matz氏→Chefの中の人という大変ミーハーなタイムテーブルで回ったけど、著名なハッカーの話を聞く機会というのは何度か設けておくべきなんだろうと思う。当然ながらウェブや雑誌で何度も著名な人の話は読んでいるわけだけど、実際目の前で話してもらうと記憶への残り方とか、影響の受け方とかやっぱし違ってくる。
エンジニアとしての哲学 特にMatz氏の話を聞いていて思ったのが、エンジニアとして哲学というか思想というか、そういうのはきちんと持っておきたいなということ。
エンジニアというのは知的生産、クリエイティブワーカーだという人もいるが、意識によっては単なる流れ作業の駒になりかねない。実際、自分の今の仕事というのはそちらに近くて、顧客からの要件をいかに盛り込むか、いかに期日までにリリースして検収をもらうか、というところにばかり目がいってしまっていて、全体のデザインが出来ていないことはままある。短期的に売りを上げるだけであれば別にそれでいいのだが、思想のないシステムは運用上のトラブルが多いだとか、更改や拡張に対する思慮に欠けているだとか、長期的には利を失うことにつながりやすい。
キャリアデザインとしても、思想がないエンジニアはブレる。というか、単に売り上げて金回すサラリーマンエンジニアになりたいのか、それともいわゆるハッカーとしてやっていきたいかの境界線の一つがそこなんじゃないかなと。どちらが良し悪しではないし、どちらでも人生で「やっていく」上では困りはしないとは思うのだが、どちらが自分にとって楽しいかが問題だ。自分は結構収入面って後回しに考えていて、自分が思うような価値を生み出せる人間になれればいいと思うし、その対価として金が得られればそれでいいのかなと思う。
リクルーティングとしてのイベント いろいろと縁があって、ビジネス的なつながりがない企業の中では楽天がおそらく一番多く訪問してるんだけど、今回はだいぶ中の方まで入り込めて、ちょっとだけ実態が理解できたように思う。噂の楽天ランチは大変楽しみにしてたのだが、思ってたより薄めの味付けで社員の健康を考えている会社って素晴らしいなぁと感心してしまった。でもその後、カフェテリアで開かれる午後のセッションに行ったら無料でピザやらポテトやら唐揚げやらコーラやら配られてたんで、「あかん、これ罠や」と思いました。
あと周知の通り社内は英語公用語化していて、イベント自体も英語が基本なんだけど、実態としては会場内の案内は日本語遣うスタッフもいたし、本当に英語しか喋らない外人スタッフもいるし、日本語喋る外人スタッフもいるしでわりと脳味噌混乱した。参加者側も外国籍の人が半分ぐらいいたんじゃないかという感じ。
こういうあたり、単純にエンジニアイベントというよりは、楽天という会社の在り方をアピールする機会として本当にうまく活かしていたなと思う。夜のBeer Bashの裏でHiring Partyも開かれているのはちょっとびっくりしたけど。</description>
    </item>
    
    <item>
      <title>RubyHiroba 2014に（少しだけ）行ってきた</title>
      <link>https://chroju.github.io/blog/2014/09/22/2014-09-22-post/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2014/09/22/2014-09-22-post/</guid>
      <description>本当に少しだけというか2時間だけ居られました。LTほぼずっと聴いてて永和システムマネジメントさんの生活発表会を聴いて帰ってきました。
アンテナの広さとか インフラエンジニアである自分がRubyに興味持ったのは、最近インフラ界隈でもRuby使う機会多いなと思っていて。ChefやCapistranoがそうだし、あとVagrantfileもRubyの文法で書かれてるし。あと何かしら言語も身につけるべきだよなと思った時、汎用性が高そうだよなとか日本製だからというのもあって選んでます。でもRubyで何ができるんだろ？っていまいちちゃんと定まってなくて、最近はWebスクレイピングを少しやってたりしたんだけど。
LT聴いてると話題の幅が広くて驚く。何がやれるんだろ？なんて悩んでるのがそもそもおかしくて、コンピュータ上で情報を扱うのであれば言ってしまえば何でもいいのであって。きちんとアンテナ広げて何やりたいのかとか、何がやれるのかとか探って書いてかないと嘘だよなと。何が一番印象に残った？となるとRubicureなんだけど、手のつけやすいとこからとにかく書くって重要だと思う。他だとロジバンとか言語学かじってた人間としては興味をひかれた。
LTはきっかけ 「勉強会」って言われるとその場でいろんなことめちゃくちゃ吸収して文字通り「勉強するんだ」と意気込むような感じするけど、ぶっちゃけ5分のLTで得られる情報量は「勉強」って程のものではない。あれはこんな界隈があるんだとか、あんなことやってるエンジニアがいるんだって知るきっかけで、そこから自分で興味持って更に調べるなり、発表者に聞くなりするきっかけにすべきもんなんだなって今回遅まきながら気づいた。一方で発表者の側にとっても自分を知ってもらったり、マイナーな領域を広めたりするチャンスでもあって、コミケじゃないけどあまり主客を分けた意識になってしまうのは危険だと思った。流動的に自分も「主」の側に回れるようにならなきゃいけない。
みんなずっとコード書いてる。。。 常にみなさんMBAなりMBPなり開いてコード書くかプレゼン資料修正するかしてた気がする。そもそもうちの会社だと自分用ノートPC持ってるとセレブ扱いされる（商売道具なんだから値段云々言ってる場合じゃねーだろと個人的には思うんだが）んだけど何なんだよこの違いとか思った。とはいえ自分もノートPC持ってるけどコードはあんま書いてないので書かなきゃなと思う。MBAやっぱり羨ましいけど、VAIO ProにArch Linux入れたんで頑張る。入れた経緯は今度書く。
とにもかくにも自分、視野狭いなーと思いました。視野の狭さ故に自分がやれることとか、今後の働き方の選択肢も勝手に狭めている気がして。情報集めてコードに落としこむことをもっと意識したい。とりあえずるびまはちゃんと読もう。</description>
    </item>
    
  </channel>
</rss>