<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git Github 開発環境 on the world as code</title>
    <link>https://chroju.github.io/categories/git-github-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/</link>
    <description>Recent content in Git Github 開発環境 on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>written by chroju</copyright>
    <lastBuildDate>Sun, 04 Oct 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chroju.github.io/categories/git-github-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>個人開発環境にGithub Flowを適用する</title>
      <link>https://chroju.github.io/blog/2015/10/04/individual-github-flow/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/10/04/individual-github-flow/</guid>
      <description>Github、joinしたのは2013年で作ったものは軒並みちゃんと突っ込んではいるんだけど、単に一区切りついたらadd =&amp;gt; commit =&amp;gt; pushしているだけでちゃんと使っていなかったので、個人開発ではあるがGithub Flowを取り入れてみた。
What is Github flow ? Githubを用いた開発作業を進めるにあたっての指針みたいなものです。基本的にはmasterブランチ上では作業せず、作業工程ごとにブランチ作って、終わったらプルリクしてmasterにマージしてもらうことでデプロイとしましょうね、というものだと理解している。至ってシンプルではあるけど、これを取り入れるだけで従来やっちゃってた「masterで作業してるのでデプロイしても動かないレポジトリがGithub上にある」みたいな状態が防げて良さそうだと思った。
ちなみにGit-flowというのもあるようだけど、こちらは全然別個のツールらしく理解していない。Git-flowの問題解決としてGithub Flowが提唱されたようだが、そもそも開発工程の制御のためだけにツールを追加したくはないなと思ったのでGithub Flowを採用した。
Github Flowの理解にはこの文章が良さそう。なお、dotfilesのような大した更新のないレポジトリにはさすがに適用していない。
GitHub Flow (Japanese translation)
実際の開発工程 あくまでGithub Flowに沿う形という程度なので、そのままそっくり適用できてはないとは思うが。
開発開始 ブランチを切る。ブランチ名は機能追加等の開発要件であればdev_hoge、バグフィックスであればhotfix_hogeとする。
$ git checkout -b dev_hoge  開発中 普通であればレビューを依頼するタイミングなど、開発の切りがついたところでpushしていくのだろうが、分散して開発しているわけではないので、1日の開発が終わる段階でpushしている。そもそも開発に使っている環境が複数あるので、Github上のdevelopブランチも常に最新化していつどこでもfetch可能にしたいなという思いがある。従来はDropboxで各環境間の同期を取っていたが、プラグインの有無やbundleなどで度々不具合もあったので改めた。
$ git add -A $ git commit -m &amp;quot; ... $ git push origin dev_hoge  git add .ではなく-Aなのは、そちらじゃないとgit rmしたファイル等が含まれないとこちらの記事に書いてあったゆえ。
開発終了 開発が終わり、masterへのマージを必要とする段階に来たらプルリクを出す。プルリクって別のコミッターからしか不可なのかと思っていたが、自分のレポジトリに自分で出すことも可能だったのでそうしている。本来であればテストツール等走らせるべきではあるのだろうが、今のところはプルリクに対して特にレビュー等なく（自分のコードだし）そのままマージしている。
後述するがバグや開発課題の管理にはGithub issueを用いているので、マージの際はissueのナンバーをコメントに入れている。これでGithub上のリンクとして働いてくれるので便利。

参考：Gitコミットメッセージの7大原則 - rochefort&amp;rsquo;s blog
マージ後 作業ブランチを消して、ローカルのmasterを最新化する。
マージにはgit mergeを使用し、git rebaseは使わないことにしている。そもそもrebase完全に理解してないというのもあるが、要するに歴史改変にあたるような操作があまり好めないというのが強い。個人の開発においては作業ブランチの変更中にmasterに更新が入ることは少ないので、このやり方でおそらく不都合はしないと思っている。
$ git checkout master $ git branch -a $ git branch -d dev_hoge $ git push --delete origin dev_hoge $ git fetch $ git marge origin/master  参考 GitのRebaseによるBranchの運用 ｜ Developers.</description>
    </item>
    
  </channel>
</rss>