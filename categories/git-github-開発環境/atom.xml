<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git Github 開発環境 on the world as code</title>
    <link>https://chroju.github.io/categories/git-github-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/</link>
    <description>Recent content in Git Github 開発環境 on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 04 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://chroju.github.io/categories/git-github-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>個人開発環境にGithub Flowを適用する</title>
      <link>https://chroju.github.io/blog/2015/10/04/individual-github-flow/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/10/04/individual-github-flow/</guid>
      <description>

&lt;p&gt;Github、&lt;a href=&#34;https://github.com/chroju&#34;&gt;joinしたのは2013年&lt;/a&gt;で作ったものは軒並みちゃんと突っ込んではいるんだけど、単に一区切りついたらadd =&amp;gt; commit =&amp;gt; pushしているだけでちゃんと使っていなかったので、個人開発ではあるがGithub Flowを取り入れてみた。&lt;/p&gt;

&lt;h1 id=&#34;what-is-github-flow:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;What is Github flow ?&lt;/h1&gt;

&lt;p&gt;Githubを用いた開発作業を進めるにあたっての指針みたいなものです。基本的にはmasterブランチ上では作業せず、作業工程ごとにブランチ作って、終わったらプルリクしてmasterにマージしてもらうことでデプロイとしましょうね、というものだと理解している。至ってシンプルではあるけど、これを取り入れるだけで従来やっちゃってた「masterで作業してるのでデプロイしても動かないレポジトリがGithub上にある」みたいな状態が防げて良さそうだと思った。&lt;/p&gt;

&lt;p&gt;ちなみにGit-flowというのもあるようだけど、こちらは全然別個のツールらしく理解していない。Git-flowの問題解決としてGithub Flowが提唱されたようだが、そもそも開発工程の制御のためだけにツールを追加したくはないなと思ったのでGithub Flowを採用した。&lt;/p&gt;

&lt;p&gt;Github Flowの理解にはこの文章が良さそう。なお、dotfilesのような大した更新のないレポジトリにはさすがに適用していない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow (Japanese translation)&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;実際の開発工程:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;実際の開発工程&lt;/h1&gt;

&lt;p&gt;あくまでGithub Flowに沿う形という程度なので、そのままそっくり適用できてはないとは思うが。&lt;/p&gt;

&lt;h2 id=&#34;開発開始:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;開発開始&lt;/h2&gt;

&lt;p&gt;ブランチを切る。ブランチ名は機能追加等の開発要件であれば&lt;code&gt;dev_hoge&lt;/code&gt;、バグフィックスであれば&lt;code&gt;hotfix_hoge&lt;/code&gt;とする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git checkout -b dev_hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;開発中:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;開発中&lt;/h2&gt;

&lt;p&gt;普通であればレビューを依頼するタイミングなど、開発の切りがついたところで&lt;code&gt;push&lt;/code&gt;していくのだろうが、分散して開発しているわけではないので、1日の開発が終わる段階で&lt;code&gt;push&lt;/code&gt;している。そもそも開発に使っている環境が複数あるので、Github上のdevelopブランチも常に最新化していつどこでも&lt;code&gt;fetch&lt;/code&gt;可能にしたいなという思いがある。従来はDropboxで各環境間の同期を取っていたが、プラグインの有無やbundleなどで度々不具合もあったので改めた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git add -A
$ git commit -m &amp;quot;
...
$ git push origin dev_hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;ではなく&lt;code&gt;-A&lt;/code&gt;なのは、そちらじゃないと&lt;code&gt;git rm&lt;/code&gt;したファイル等が含まれないと&lt;a href=&#34;http://qiita.com/otukutun/items/9feb513c596418e94fc6&#34;&gt;こちらの記事&lt;/a&gt;に書いてあったゆえ。&lt;/p&gt;

&lt;h2 id=&#34;開発終了:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;開発終了&lt;/h2&gt;

&lt;p&gt;開発が終わり、masterへのマージを必要とする段階に来たらプルリクを出す。プルリクって別のコミッターからしか不可なのかと思っていたが、自分のレポジトリに自分で出すことも可能だったのでそうしている。本来であればテストツール等走らせるべきではあるのだろうが、今のところはプルリクに対して特にレビュー等なく（自分のコードだし）そのままマージしている。&lt;/p&gt;

&lt;p&gt;後述するがバグや開発課題の管理にはGithub issueを用いているので、マージの際はissueのナンバーをコメントに入れている。これでGithub上のリンクとして働いてくれるので便利。&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/chroju/21903884486/&#34; title=&#34;スクリーンショット 2015-10-04 14.19.25&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/735/21903884486_cae2057f70_z.jpg&#34; width=&#34;640&#34; height=&#34;576&#34; alt=&#34;スクリーンショット 2015-10-04 14.19.25&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://rochefort.hatenablog.com/entry/2015/09/05/090000&#34;&gt;Gitコミットメッセージの7大原則 - rochefort&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;マージ後:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;マージ後&lt;/h2&gt;

&lt;p&gt;作業ブランチを消して、ローカルのmasterを最新化する。&lt;/p&gt;

&lt;p&gt;マージには&lt;code&gt;git merge&lt;/code&gt;を使用し、&lt;code&gt;git rebase&lt;/code&gt;は使わないことにしている。そもそも&lt;code&gt;rebase&lt;/code&gt;完全に理解してないというのもあるが、要するに歴史改変にあたるような操作があまり好めないというのが強い。個人の開発においては作業ブランチの変更中にmasterに更新が入ることは少ないので、このやり方でおそらく不都合はしないと思っている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git checkout master
$ git branch -a
$ git branch -d dev_hoge
$ git push --delete origin dev_hoge
$ git fetch
$ git marge origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考
&lt;a href=&#34;http://dev.classmethod.jp/tool/git/development-flow-with-branch-and-rebase-by-git/&#34;&gt;GitのRebaseによるBranchの運用 ｜ Developers.IO&lt;/a&gt;
&lt;a href=&#34;http://kray.jp/blog/git-pull-rebase/&#34;&gt;git pull と git pull –rebase の違いって？図を交えて説明します！ | KRAY Inc&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;コンフリクトした場合:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;コンフリクトした場合&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git ls-files -u&lt;/code&gt;でコンフリクトしたファイルが一覧化されるとのことなので、確認の上で開いて直す。もしローカルかリモートのいずれかを全面採用するのであれば、&lt;code&gt;git checkout&lt;/code&gt;の&lt;code&gt;--ours&lt;/code&gt;と&lt;code&gt;--theirs&lt;/code&gt;オプションを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git ls-files -u
git checkout --ours hoge
git checkout --theris hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://d.hatena.ne.jp/sinsoku/20110831/1314720280&#34;&gt;Gitでコンフリクトした時のための備忘録 - アジャイルSEを目指すブログ&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;リモートのmasterがローカルより先に行っている場合:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;リモートのmasterがローカルより先に行っている場合&lt;/h2&gt;

&lt;p&gt;ローカル環境が複数あるので、このような場合は多々ありえる。そういうときは基本的にはmergeすればいいだけではあるが。masterはリモートレポジトリの最新化が原則となるので、コンフリクトした場合は99%リモートを優先させる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git show-branch --all --color
git fetch origin
git diff origin/master
git merge origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://qiita.com/yuyuchu3333/items/a30387bdd6a0afc1185c&#34;&gt;gitのリモートリポジトリの更新を確認する - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;バグ-開発課題の発生:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;バグ、開発課題の発生&lt;/h2&gt;

&lt;p&gt;先に少し触れたが、開発すべきTODOはすべてGithub issueで管理することにした。今までどうしていたかというと特に管理はしておらず、思いつくままに開発してしまっていたのだが、これでGithubに開発に必要なものはすべて集約できるのではないかと思う。個人でのGithub issue運営には下記の記事を参考にさせてもらっているが、特に難しいことはせず、タスク管理ツールのような形で使っている。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://azu.github.io/slide/udonjs/github-issue.html#3&#34;&gt;一人で使えるGithub Issue&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;覚えられない:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;覚えられない&lt;/h1&gt;

&lt;p&gt;Github Flowは便利なのだが、Gitのコマンド体系がどうにも覚えづらくて仕方がない。どうにもならんのでaliasを駆使してなるべく覚える内容を少なくしようと努めているが、あとは慣れるしかないのかなぁと。Githubのコマンドは本当に多い。体系自体を学ぶのであれば&lt;a href=&#34;https://progit-ja.github.io/&#34;&gt;Pro Git&lt;/a&gt;がわかりやすく、epubの配布もあるのでKindleでいつでも読めて最高なのだが、数多あるコマンドを網羅しようとか思うとこれだけではつらい。Qiitaでまとめ記事が上がるたびに覗いてみて、今の自分のキャパで使えそうなのをつまみ食いしていく形で覚えればいいのかなと思っている。&lt;/p&gt;

&lt;p&gt;今のalias設定はこんなの。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias]
  a  = add
  aa = add --all
  br = branch
  bra = branch -a
  brd = branch -d
  co = checkout
  cob = checkout -b
  coo = checkout --ours
  cot = checkout --theirs
  cl = clone
  clr = clone --recursive
  cm = commit
  cmm = commit -m
  d  = diff
  f  = fetch
  lg = log
  lga = log --graph --decorate --online
  lgp = log -p
  mg = merge
  mgn = merge --no-ff
  ps = push
  psd = push --delete origin
  pso = push origin
  psm = push origin master
  pl = pull
  s  = status -s
  sb = status -s --branch
  ss = status
  sh = show
  sba = show-branch --all
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;今後:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;今後&lt;/h1&gt;

&lt;p&gt;やりたいこととしてはCI。Circle CIとかと連動させて自動テストしたりというところまで組み込めたら、個人開発としてだいぶ理想的な状態かなと思う。そのままデプロイまで自動化できれば最高か。またGitの理解がやはりどうにも覚束ない部分があり、まだまだ使いこなせているとは言いがたいので、aliasをカンペ代わりに育てつつ、ガンガン覚えていきたい。特にミスったときの&lt;code&gt;reset&lt;/code&gt;系コマンドがあまりに多くてなぁ……。&lt;/p&gt;

&lt;h1 id=&#34;その他参考記事:ff8afc85bcd5eb86c0ff83ef6f674cc0&#34;&gt;その他参考記事&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://keijinsonyaban.blogspot.jp/2011/05/git.html?m=1&#34;&gt;見えないチカラ: 【翻訳】Gitをボトムアップから理解する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/git-command-line-shortcuts/&#34;&gt;Gitコマンドラインショートカット | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yuroyoro.hatenablog.com/entry/20101008/1286531851&#34;&gt;.gitconfigに設定してるaliasなどのまとめ - ( ꒪⌓꒪) ゆるよろ日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/sinsoku/20111025/1319497900&#34;&gt;図で分かるgit-mergeの&amp;ndash;ff, &amp;ndash;no-ff, &amp;ndash;squashの違い - アジャイルSEを目指すブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>