<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Poem on the world as code</title>
    <link>http://chroju.github.io/categories/poem/</link>
    <description>Recent content in Poem on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 03 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://chroju.github.io/categories/poem/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2016年の行動規範</title>
      <link>http://chroju.github.io/blog/2016/01/03/manifesto-2016/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/01/03/manifesto-2016/</guid>
      <description>

&lt;p&gt;うまいことまとまらないのでつらつら。&lt;/p&gt;

&lt;h2 id=&#34;問題意識:d46ca0be31fde7498833cd9b20e5a80e&#34;&gt;問題意識&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;時間、お金の使い方がいまだに下手。

&lt;ul&gt;
&lt;li&gt;きちんと考えず浪費している機会が多い。&lt;/li&gt;
&lt;li&gt;時間ならタスクシュート、お金ならZaimを使ったりした経験はあるが結局とまったりしている。&lt;/li&gt;
&lt;li&gt;昨年は10年以上続いていた日記すらもとめてしまった。&lt;/li&gt;
&lt;li&gt;何か忙しい課題が仕事なりプライベートなりに鎮座すると、他に回す手が一切なくなったりしてバランス悪い。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ環境の再考。

&lt;ul&gt;
&lt;li&gt;インプットが「ググって終わり」の場合が多く、次にその情報が必要になったときも結局ググってる。&lt;/li&gt;
&lt;li&gt;読んだ本が本当に身になっている気がしない。&lt;/li&gt;
&lt;li&gt;Evernoteがメモの死蔵場になっている。&lt;/li&gt;
&lt;li&gt;デジタルメモはVimと&lt;a href=&#34;https://github.com/glidenote/memolist.vim&#34;&gt;memolist.vim&lt;/a&gt;を基本にしているけど、書き散らして終わってる感。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術探求の不足

&lt;ul&gt;
&lt;li&gt;やってるけどやりきれてないというか。&lt;/li&gt;
&lt;li&gt;Qiitaで話題になっているのを見て、ザッと読んでなんとなく無理そうと思うと閉じちゃったり。&lt;/li&gt;
&lt;li&gt;いつか使うかな？と思ってPocketにつっこんでそのまんまの積読があまりに多い。&lt;/li&gt;
&lt;li&gt;流行ってる→やろうとか、こういうツールほしい→作ろうの瞬発力上げたい。&lt;/li&gt;
&lt;li&gt;本読みたい。というか去年文化資本にあまりに触らなすぎた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;仲間がほしい

&lt;ul&gt;
&lt;li&gt;懇親会とか行ってもその場限りの話しかできなかったりでエンジニア仲間社外にあんまいない。&lt;/li&gt;
&lt;li&gt;社内の技術課題解決するのに社外で話すってのも大切そう。&lt;/li&gt;
&lt;li&gt;ていうかエンジニアとしてもうちょい知名度上げてみたい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;解消していくために:d46ca0be31fde7498833cd9b20e5a80e&#34;&gt;解消していくために&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;時間とお金の定量評価

&lt;ul&gt;
&lt;li&gt;お金は娯楽費にx万までみたいな予算持ってるので、時間も定量評価したい。コード書く時間を週に必ずx時間とか。&lt;/li&gt;
&lt;li&gt;タイムロギングしたいけどTogglとか使うの面倒。とりあえずやってみるか。難しけりゃ1日の最後にノートに記憶から書き出すんでもいいかなと。&lt;/li&gt;
&lt;li&gt;週ごとのノートにしたい。PDCA回すのにちょうど良いスパンだと思う。今週ダメなら来週帳尻合わせるとか出来るわけで。&lt;/li&gt;
&lt;li&gt;そういう用途だと紙ノートよりEvernoteの方が良さそう。1ノートに対して1週間という形が取れるので。&lt;/li&gt;
&lt;li&gt;じゃあ日記もここに載ってくる形でいっか。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモをもっかいちゃんとする

&lt;ul&gt;
&lt;li&gt;技術テーマごとにちゃんとノート取る。ブログに上げるといった方がいいか。&lt;/li&gt;
&lt;li&gt;ブログ記事にならないレベルのものはQiita。二番煎じ三番煎じでQiitaレベルに値しないものはGist。&lt;/li&gt;
&lt;li&gt;でもGistあんまり使いやすくない……。&lt;/li&gt;
&lt;li&gt;メモを見返す時間をちゃんと作る。週次レビュー的なあれ。金曜夜が第一候補。無理なら土曜。&lt;/li&gt;
&lt;li&gt;というかそれぐらいの時間は取れるようなスケジューリングをする。去年はそれすら難しいぐらいアホほど予定入れてた。&lt;/li&gt;
&lt;li&gt;頭のなかちゃんと棚卸するの大事。&lt;/li&gt;
&lt;li&gt;手元のモレスキンはタイムライン的なリアルタイムメモ用にする。アナログは見返すの無理。ざざっと時系列で追う目的でしか使えない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;散逸的な勉強をしない

&lt;ul&gt;
&lt;li&gt;とりあえずおもしろそうなもの、役に立つはずのものに片っ端から手をつけるのやめる。&lt;/li&gt;
&lt;li&gt;Pocketに記事を置いとくのはいいけど、1週間ぐらい経ったら躊躇なく消す（自動化できないかな）。&lt;/li&gt;
&lt;li&gt;上述の通りブログに上げることを目的としてノートを取っていく。参照する記事はノート上で繰り回す。&lt;/li&gt;
&lt;li&gt;スーパーマンになろうとしない（選択と集中、less is more）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術的な瞬発力の向上

&lt;ul&gt;
&lt;li&gt;手足のように使える言語がほしい。Rubyかじったんだからちゃんとやり切る。&lt;/li&gt;
&lt;li&gt;もう1個。デフォルトで入ってる言語だと楽なんだが。Pythonかなー。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://orangain.hatenablog.com/entry/python3-as-default&#34;&gt;LinuxディストリビューションにおけるPython 3デフォルト化の流れ - orangain flavor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;実際の開発経験を積む。API叩くとかやる。動かす。&lt;/li&gt;
&lt;li&gt;原則としてCLIで操作する。GUIに頼らない。コマンドでなんとかならないかとまず考える。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文化資本に触れたい

&lt;ul&gt;
&lt;li&gt;1クール3本のアニメ&lt;/li&gt;
&lt;li&gt;1か月2冊の小説&lt;/li&gt;
&lt;li&gt;1か月2本の映画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エンジニアとしての活動

&lt;ul&gt;
&lt;li&gt;なんかユーザーグループ入ってみたい。職種的に考えるとJAWS-UG？&lt;/li&gt;
&lt;li&gt;これだけはという技術分野ほしい。Ansibleが今自分の中でキテるのでもっと。&lt;/li&gt;
&lt;li&gt;GitHubをソーシャルにちゃんと使う。横断的な検索とかフォローとかプルリク出してみるとか。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;挑むべき技術分野:d46ca0be31fde7498833cd9b20e5a80e&#34;&gt;挑むべき技術分野&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上述の通り武器言語としてのRuby、Python。&lt;/li&gt;
&lt;li&gt;hubotいじる上でnode.jsを少しだけ。&lt;/li&gt;
&lt;li&gt;DB経験がさらっさらと言っていいほどないのでMySQL（Mariaでいいか）とRedis。&lt;/li&gt;
&lt;li&gt;インフラ関連技術は継続。Ansible、Serverspec、AWS。&lt;/li&gt;
&lt;li&gt;最近流行ってるOSSツール類。Elasticsearch、HashiCorp周り、Docker、Sensu、Rundeck、&lt;/li&gt;
&lt;li&gt;総合するとこれやってみるといいかも→ &lt;a href=&#34;http://syou6162.hatenablog.com/entry/2015/12/21/000843&#34;&gt;今年よかった習慣: ライフログ収集および可視化 - syou6162&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年総括</title>
      <link>http://chroju.github.io/blog/2015/12/31/looking-back-2015/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/12/31/looking-back-2015/</guid>
      <description>

&lt;p&gt;いろいろとチャレンジングに動いてみただけに、難しい年だった。&lt;/p&gt;

&lt;p&gt;今年初めの&lt;a href=&#34;http://chroju.github.io/blog/2015/01/12/post/&#34;&gt;「行動規範」&lt;/a&gt;で書いた通り、就職は、した。大手SIerからいわゆるベンチャー気質な企業に転職して、働き方はだいぶ変わった。毎日Excelとにらめっこしていた生活ではなく、業務上初めてsshを実行し、いまでは毎日実行するような生活になった。&lt;/p&gt;

&lt;p&gt;承認と判子と指示が行動の軸だった状態から、個々人のスキルと瞬発力と経験が物を言うような状態になり、率直に言ってついていけてない感はある。どこまでを許可無くやっちゃっていいのかわからない（いわゆるDon’t ask for permission, beg for forgiveness的文化）し、技術検証に手をつけ始めると基礎スキルが低いのでやたら時間を食ってしまい、その間に他の人にタスクを取られたりする。&lt;/p&gt;

&lt;p&gt;でもまったく手応えがないわけではなくて、個人開発で使っていたスキルで食い込んでいけるところも大きいし、自分に足りない、学ぶべきことは山のように社内に転がっているので、ひたすら旺盛に吸収していきたいと思う。というかそうしない限り、エンジニアとして生きる道がない。&lt;/p&gt;

&lt;p&gt;興味領域としてはDevOps方面にかなりアンテナが伸びてきている。大企業でわりとカッチリ運用設計を認めていた自分が、創業からそれなりの年数が経ち、技術的負債の増えてきたベンチャーに入ったことによる必然とも言えるのだろうが、運用上の穴や非効率な部分がとても目についていて、ルールで縛るのではなく、システム的に運用の統括を図ろうというのが目下の課題となっている。それこそInfrastructure as Codeを使うなりDockerを使うなり、もっと低レイヤーにシェルスクリプトをガリガリ書くなり。だから技術的に磨いて実践していくことが本当に多いのだけど、一方で運用方法の改変ということは社内への浸透が必要になり、政治的な問題にもなってくるので、コミュニケーション力結局必要やんけってところで非コミュな自分は悩んでいる。社内政治ほんとやだ。&lt;/p&gt;

&lt;p&gt;まぁ、総じて言えば楽しく仕事はできている。だけど大きな変化は副作用的に予期しない変化を別のところでもたらしたりするものでもあって、そのバランスを取ることがなんとも難しい。貪欲であることと、単に我欲を押し通すこととはまた違うわけで、もう少しコントールが必要だと思っている。リスクテイクしたのだからその分の負担の大きさを覚悟してはいたが、わりと想定以上なところはあってストレスは大きい。年齢も年齢なので、自分が「何をすべきか」という論調よりも、周囲、世の中にとって自分は「何であるのか」という視点で動いた方が良いのかもなという気がしてきた。もう少し、置かれた場所というものも大事にしたい。&lt;/p&gt;

&lt;p&gt;抽象論についつい流れてしまったけど、具体的な技術的成果はQiitaを中心に流していこうと思っているので、ブログはポエミーにこんな感じで締めてみる。また来年。&lt;/p&gt;

&lt;h2 id=&#34;おまけ-2015年定量評価:4b0e9716f5c3774ac1bd6e95779c4d66&#34;&gt;おまけ：2015年定量評価&lt;/h2&gt;

&lt;h3 id=&#34;技術:4b0e9716f5c3774ac1bd6e95779c4d66&#34;&gt;技術&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Linuxのサーバー運用に従事開始。初歩的なコマンドからさらい直せてる。&lt;/li&gt;
&lt;li&gt;CentOS7の業務利用開始。&lt;/li&gt;
&lt;li&gt;AWSの利用を個人でも業務でも開始。ただしほぼEC2。&lt;/li&gt;
&lt;li&gt;Ansible利用開始。&lt;/li&gt;
&lt;li&gt;Serverspec検証開始。&lt;/li&gt;
&lt;li&gt;Docker検証開始。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;イベント:4b0e9716f5c3774ac1bd6e95779c4d66&#34;&gt;イベント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JAWS DAYS 2015&lt;/li&gt;
&lt;li&gt;JAWS UG 初心者支部&lt;/li&gt;
&lt;li&gt;デブサミ2015&lt;/li&gt;
&lt;li&gt;Ansible入門イベント&lt;/li&gt;
&lt;li&gt;他社の障害対応気にならNight&lt;/li&gt;
&lt;li&gt;手羽の会（ハンズラボ）&lt;/li&gt;
&lt;li&gt;Serverworks Sonic!&lt;/li&gt;
&lt;li&gt;OSC東京 2015秋&lt;/li&gt;
&lt;li&gt;Rakuten Tech 2015&lt;/li&gt;
&lt;li&gt;RubyKaigi 2015&lt;/li&gt;
&lt;li&gt;他&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;書籍:4b0e9716f5c3774ac1bd6e95779c4d66&#34;&gt;書籍&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;リーダブルコード&lt;/li&gt;
&lt;li&gt;プログラマが知るべき97のこと&lt;/li&gt;
&lt;li&gt;それがぼくには楽しかったから&lt;/li&gt;
&lt;li&gt;ハッカーと画家&lt;/li&gt;
&lt;li&gt;UNIXという考え方&lt;/li&gt;
&lt;li&gt;インターネットのカタチ&lt;/li&gt;
&lt;li&gt;Amazon Web Services パターン別構築・運用ガイド&lt;/li&gt;
&lt;li&gt;シェルプログラミング実用テクニック&lt;/li&gt;
&lt;li&gt;はじめてUNIXで仕事をする人が読む本&lt;/li&gt;
&lt;li&gt;大規模サービス技術入門&lt;/li&gt;
&lt;li&gt;Serverspec&lt;/li&gt;
&lt;li&gt;CentOS7実践ガイド&lt;/li&gt;
&lt;li&gt;Team Geak&lt;/li&gt;
&lt;li&gt;オペレーティングシステムの基礎&lt;/li&gt;
&lt;li&gt;たのしいインフラの歩き方&lt;/li&gt;
&lt;li&gt;他&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>インフラエンジニアの幸福論</title>
      <link>http://chroju.github.io/blog/2015/10/20/eudaemonics-of-infrastructure-engineer/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/10/20/eudaemonics-of-infrastructure-engineer/</guid>
      <description>&lt;p&gt;1年前、&lt;a href=&#34;http://yapcasia.org/2014/talk/show/df196eac-fb65-11e3-b7e8-e4a96aeab6a4&#34;&gt;インフラエンジニアは死んだ&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;遅れにも遅れをとって今年からAWSに触れているけど、これは触れれば触れるほどインフラエンジニアとしての自分の価値に疑問を抱かせてくれるサービスで、インフラエンジニアとして今後自分はどのように幸せになれるのかなんて考えたくなってくる。&lt;/p&gt;

&lt;p&gt;どうもLambdaが出たあたりから&lt;a href=&#34;http://blog.takuros.net/entry/2015/10/19/081349&#34;&gt;サーバーレスアーキテクチャ&lt;/a&gt;という言葉が取り沙汰されてきているようで、アプリやDBを動かすための基盤としてサーバーが必要だという前提はすでに崩れている。AWSを触れる前はVPSを触っていたので、どうもAWS＝EC2というイメージから抜け出せずにいたが、実際には&lt;a href=&#34;http://i-think-it.net/how-to-aws&#34;&gt;「EC2を使ったら負け」&lt;/a&gt;なんて言葉も目にする時代にある。ここ最近Circle CIを触ってみていても、テストの実行基盤となるサーバーなんて考え方をする必要はなくて、テスト用の環境はyamlで書けてしまうし、別のインスタンスが欲しければDockerで済ませられる。まぁherokuあたりからすでにそういう風潮だったよなという気もするが、単純にアプリをデプロイしてしまって実行基盤は全部お任せという状態から、LambdaとS3とCognitoを組み合わせて云々みたいな柔軟なアーキテクチャを採用できる状態にまで変化してきている。&lt;/p&gt;

&lt;p&gt;AWSを管理する人間が旧来のインフラエンジニアである必要性を当人としてはあまり感じていないし、実際に昨今のWeb企業あたりだとアプリエンジニアがAWSエンジニアを兼ねている場合も少なくないとは思う。規模が大きくなれば構成設計にインフラエンジニアの視点が必要になったりもするのかもしれないが、そこで必要とされるスキルは必ずしも旧来のインフラスキルとは直結していない。1000万円のLBとCiscoのスイッチとDELLのサーバーを買ってきて配線して起動して設定していくスキルと、ブラウザ上でELBやEC2のセキュリティグループを設定するスキルは明らかに異なるもので、故に2015年におけるインフラ＝AWSの領域においては、旧来のインフラエンジニアと非インフラエンジニアが同じ土俵で戦えなくもなかったりする（さすがに言い過ぎ感あるか）。これまで培ってきたインフラスキルというものは、必ずしも2015年に戦える武器にはなっていない。&lt;/p&gt;

&lt;p&gt;もちろん一方でEC2もオンプレの環境もまだ健在ではあるし、これが10年後に撤廃されるかというと、現状のMFのように残り続けるとは思う。特に金融のような特殊領域ではどうしてもクラウド移行が難しいということもある。だから旧来のインフラエンジニアが死に絶えることはないのだろうが、それでもパイが小さくなることは事実だし、物理環境の障害だとか5年ごとのリプレースだとか、テンションの上がらない類の仕事に携わり続けることを余儀なくされる。&lt;/p&gt;

&lt;p&gt;テンションの上がる仕事がしたいと言うと軽薄になってしまうが、誰だって夜中にタクシーでデータセンターに駆け付ける機会は極力少なくしたいと思うわけで、これまで注力していたいわゆる「オープン系」の需要が狭まる中で、インフラエンジニアの「幸福論」のようなものは求められつつある気がする。より少なくなる、かつ結構しんどい椅子に座り続けるのは個人的に嫌なので、Docker、ServerSpec、Ansibleあたりの領域でガッツリ存在感を示せるようになるか、あるいはそれらを生み出す側、より下のレイヤーで技術的に研ぎ澄まされていくかの二択なのかなと最近は思いつつある。とはいえ後者はどう考えても狭き門であり、現実的には前者を日常的な業務としつつ、要はRubyエンジニアがgem書くような感覚でツール作ったりOSSにイッチョカミしたりもたまにやれるぐらいの力があるといいのだろうなと思う。&lt;/p&gt;

&lt;p&gt;何はともあれやはり「勉強する」以外に道がないことは今も昔も変わってないし、ある意味で過渡期にある技術として、いまインフラは面白いところにあるとは思っている。これについていけるかついていけないかっていうシンプルな問いでもあって、自分の希望としてはついていきたい。今からアプリに鞍替えする気はなく、カーネル書けるかって言えば書けないだろうし、かといって今のまま障害対応で夜に起こされるのを続けるわけにもいかない。だったら2015年におけるインフラというものを学んでいくしかないわけで、幸いなことに、学べば「物理ハードウェアからの開放」というある程度の報酬が待ち受けていることは確実になっている。どれだけ頑張ってもサーバーのファームウェアのバグで泣かされるような時代ではなく、ある意味でインフラエンジニアが「インフラを学び直す」ことは美味しい選択肢ではある。また場合によっては、インフラエンジニアとしてより良い環境へ適時シフトしていく（惰性でずっとオンプレ使う方針の会社との喧嘩は早々に諦める）こともまた必要になるのだと思っている。&lt;/p&gt;

&lt;p&gt;とかなんとか書きながら考えていたら、&lt;a href=&#34;http://blog.hifumi.info/2015/02/23/wakateinfra/&#34;&gt;若手インフラエンジニア現状確認会&lt;/a&gt;とやらで似たような話が上がっていた。個人的な実感としてはITエンジニア100人の企業であれば5～9人ぐらいがインフラかなと思うので、若手インフラが少ないというよりは全体的にインフラエンジニアが少ないのだと思っているが、その分情報交換とか大切にしなきゃなと思う。エンジニア仲間増やしたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Qiitaを使うということの意義</title>
      <link>http://chroju.github.io/blog/2015/08/09/qiita-commoditization-of-engineer/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/08/09/qiita-commoditization-of-engineer/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/chroju/&#34;&gt;Qiitaにいくつか記事を上げてみて&lt;/a&gt;思ったことを。&lt;/p&gt;

&lt;h1 id=&#34;承認欲求が満たしやすい:671e1b8973ece8a27f6c660fbcf03cd9&#34;&gt;承認欲求が満たしやすい&lt;/h1&gt;

&lt;p&gt;ブログのような個人の場ではないのに承認欲求がってのもどうなんだという話はあるが、反応を得やすい。Qiitaでは各エントリーに必ずタグを設定することになり、ユーザーは興味のあるタグを登録して新着記事をチェックするわけだが、記事が上がってくるスピードは1日に数えられる程ではあるので、上げればほぼ必ず誰かしらの目には留まる状態にある。なので自分が上げたのは基礎的な記事ばかりだという思いはあるのだが、それでもすべて漏れなくストックされていた。&lt;/p&gt;

&lt;p&gt;もちろん、100ストックなどを目指すとハードルはぐっと上がってくるわけだが、こういった個人ブログで誰が見てくれているかわからない状態と比べて、記事投稿へのモチベーションは保ちやすいように感じた。なお、はてなでも同様のエコシステムは働いていて、例えばこのブログもはてな時代はそこそこブクマされていたわけだが、github.io化した後のブクマは見事にゼロである。&lt;/p&gt;

&lt;h1 id=&#34;誤り修正と議論の活性化:671e1b8973ece8a27f6c660fbcf03cd9&#34;&gt;誤り修正と議論の活性化&lt;/h1&gt;

&lt;p&gt;ほぼすべての記事が誰かしらの目に触れるということで、（自分は未経験だが）コメントにより間違いの修正が入ることも多い。特に特定のタグに関してはその道の有名な方がだいぶ監視しているっぽいなぁという場合もあり、ちょこちょこコメントが付いている。&lt;/p&gt;

&lt;p&gt;またコメントで長々と議論が続くのもよく見かける。単なるハウツーよりは何らかの設計思想を書いた記事に多いように思うが、派生した内容として興味深く追えることも多い。&lt;/p&gt;

&lt;h1 id=&#34;技術のコモディティ化:671e1b8973ece8a27f6c660fbcf03cd9&#34;&gt;技術のコモディティ化&lt;/h1&gt;

&lt;p&gt;で、ここからが本題なのだが、QiitaによってIT技術者の知識というのはある程度コモディティ化されそうだなぁと思う。&lt;/p&gt;

&lt;p&gt;Qiita以前ははてななどがエンジニアのアウトプットがよくストックされる場所ではあったが、Qiitaほど体系だってまとめられていたわけではない。Qiitaでは「タグ」を追うことで、その分野の新しい話題も古い話題も、基礎も応用も知っていくことができる。逆に言えば、Qiitaに書いてあることぐらいは誰だってすぐ追って身につけられる状態にある。&lt;/p&gt;

&lt;p&gt;技術書のような網羅性の高い知識パッケージとはさすがに性質を異にはするが、先に上げたコメントなどによって適宜内容が改訂され、より正しい状態に近づいていき、また必要な情報、新たな情報が次々と追加されるという意味では、動的な知識パッケージとして果たす役割は大きいのではないか。
まぁ要はブログやSNSの黎明期に言われたようなことが、Qiitaという専門性の高い1サービス内で圧縮的に再現されているというだけの話ではあるのだが、「Qiitaをやっている」というレッテルが、ある一定の知識レベルを有することと同義になる日も来そうだなという思いがする。問題点としてはQiita外と同様、やはりWeb系、OSS系の知識に内容が偏っていて、有償製品等のノウハウはそれほど多くないことだろうか。これはQiitaの問題ではないのだけど。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the world as code</title>
      <link>http://chroju.github.io/blog/2015/04/04/the-world-as-code/</link>
      <pubDate>Sat, 04 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/04/04/the-world-as-code/</guid>
      <description>&lt;p&gt;世界を構成するのはテクストである、という考え方が好きだ。より正確な言い方をするならば記号論やミーム的な考え方になるのだと思うが、記述されたもの、意味を成して認識されたものだけが実在足りうる、というような世界観をなんとなく抱いている。『ニルヤの島』では個人の生が物語へと還元され、データとして外部記憶装置へ保存されるようになった。『from the nothing, with love』では、ジェームズが自らを「生起しつつあるテクスト」であると述懐する。あるいはヘプタポッドの言語は、未来をも決定論的に「記述」する。&lt;/p&gt;

&lt;p&gt;特にことインターネットの隆盛により、世界はテクストの、ミームの満ちるものへと変容しつつあるように思う。インターネット上に存在する「個人」とは、すなわちミームに他ならない。インターネットへのアクセスをしていても、能動的にテクストを紡がない個人は存在しないに等しい。この世界では個人は、あるいはあらゆる事象はデータへと還元され、そして半永久的にミームの海を彷徨っていく。&lt;/p&gt;

&lt;p&gt;上述したように、最近頓に多い「言葉」に関するSFのなかで、最も好きなのは『屍者の帝国』なのだけど、ここでは人間の魂自体が「言葉」によるものと解されており、そして屍者は「言葉」によってフランケンシュタインと化す。言葉は物質化する。書物がそうであるように。歴史上の人物がそうであるように。これが自らもまた「物質化した言葉」であるはずのヴァン・ヘルシングの言葉であるというのは皮肉でもあるのだと思うが、生きとし生けるものが言葉によりもたらされるというハッキリとした記述と、それに基づいて構成された世界観は実に興味深い。&lt;/p&gt;

&lt;p&gt;Infrastructure as Code、物理的な世界の技術であったはずのITインフラが、近年言語により記述され、管理、構築されるフェーズへと転換したように。Internet of Things、家電や家具といった非電子的であったはずの「モノ」たちが、APIを提供して「言語」による働きかけを許すようになったように。我々エンジニアの一つの使命は、万物の情報化であると思う。言語が支配する世界にすべてを置き換え、言語を介した制御を可能とすること。それがエンジニアとしてやるべきことなのだと。&lt;/p&gt;

&lt;p&gt;私はなぜ書くのか？という問いに対する答えはあまりに簡単で、それは生きるに等しい行為だからだ。語らぬ者は存在しないのならば、語る以外に選択肢はない。世界と関わりたいのならば、言語によって働きかけていくしかない。紡いだ言葉がミームの海を流れていき、対岸でやがて物語として物質化する日を夢見る。言葉が世界を構成し、言葉が万物を紡ぎ上げて、やがて物語と化していく。&lt;/p&gt;

&lt;p&gt;the world as code.&lt;/p&gt;

&lt;p&gt;世界は言葉で成り立っている。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4150114587/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51191C0153L._SL160_.jpg&#34; alt=&#34;あなたの人生の物語 (ハヤカワ文庫SF)&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4150114587/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;あなたの人生の物語 (ハヤカワ文庫SF)&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.04.03&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;テッド・チャン &lt;br /&gt;早川書房 &lt;br /&gt;売り上げランキング: 10,379&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4150114587/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>