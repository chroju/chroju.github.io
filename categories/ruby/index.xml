<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on the world as code</title>
    <link>https://chroju.github.io/categories/ruby/</link>
    <description>Recent content in Ruby on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>written by chroju</copyright>
    <lastBuildDate>Sun, 03 May 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chroju.github.io/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hash与えるとGoogleスプレッドシートに入力してくれるRubyスクリプト</title>
      <link>https://chroju.github.io/blog/2015/05/03/google-spread-sheet-update-via-ruby/</link>
      <pubDate>Sun, 03 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/05/03/google-spread-sheet-update-via-ruby/</guid>
      <description>つくった。動きとしては、項目名と入力値からなるハッシュを引数で与えてやることで、該当スプレッドシートの2列目に符合するキーがある場合、その値を一番右側の列に入力してくれる。符合するキーがない場合は、メッセージを吐いた上で最下行に新しい項目として追加する。 用途としては非常に個人的な</description>
    </item>
    
    <item>
      <title>Ruby基礎学習(10) Mix-in</title>
      <link>https://chroju.github.io/blog/2015/04/24/ruby-study-mix-in/</link>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/04/24/ruby-study-mix-in/</guid>
      <description>Mix-inの話と、それに似たもろもろ。他に詳しい記事があるので、これを読んでおけばいいような気はした。 参考 requireとincludeとextendとmodule_function(1) : As Sloth As Possible requireとincludeとextendとmodule_function(2</description>
    </item>
    
    <item>
      <title>Ruby基礎復習(9) Dirクラス</title>
      <link>https://chroju.github.io/blog/2015/04/14/study-ruby-dir/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/04/14/study-ruby-dir/</guid>
      <description>『パーフェクトRuby』p.208より。 Dirクラスは基本としてカレントディレクトリ情報を持っていて、それを元としてディレクトリ操作ができる。従って多くの操作を特異メソッドで行うことができる。 Dir.pwd # =&amp;gt; &amp;quot;/Users/chroju&amp;quot; Dir.chdir(&amp;quot;/tmp&amp;quot;) Dir.pwd # =&amp;gt; &amp;quot;/tmp&amp;quot; Dir.home # =&amp;gt; &amp;quot;/Users/chroju&amp;quot; ディレクトリに含まれるファイルはDir.entriesで配列と</description>
    </item>
    
    <item>
      <title>Ruby基礎復習(8) Fileクラス</title>
      <link>https://chroju.github.io/blog/2015/04/10/study-ruby-file-i-o/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/04/10/study-ruby-file-i-o/</guid>
      <description>『パーフェクトRuby』p.196より。わりと苦手な分野。 まずはファイルをひらく。#openして変数に格納してもいいし、ブロックを引き渡して処理させることもできる。後者の場合は処理が終わると自動でクローズしてくれるので、こっちの方が楽っぽい。#readはファイルの内容全体を読み込</description>
    </item>
    
    <item>
      <title>Ruby基礎復習(7) Timeクラス</title>
      <link>https://chroju.github.io/blog/2015/04/06/study-ruby-time/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/04/06/study-ruby-time/</guid>
      <description>『パーフェクトRuby』p.190より。 Time#nowかTime#newで現在時刻が取得可能。 now = Time.now # =&amp;gt; 2015-03-16 23:25:32 +0900 new = Time.new # =&amp;gt; 2015-03-16 23:25:32 +0900 now.zone # =&amp;gt; &amp;quot;JST&amp;quot; now.getutc # =&amp;gt; 2015-03-16 14:25:32 UTC now.utc now.zone # =&amp;gt; &amp;quot;UTC&amp;quot; 現在時刻以外のTimeオブジェクトを生成するにはTime#atでUNIX秒を引数に指定するか、Time#utcかTime#</description>
    </item>
    
    <item>
      <title>Ruby基礎復習(6) Hash</title>
      <link>https://chroju.github.io/blog/2015/04/05/study-ruby-hash/</link>
      <pubDate>Sun, 05 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/04/05/study-ruby-hash/</guid>
      <description>『パーフェクトRuby』p.179より。 まず基本的なとこで。 hash = {hoge: 1, fuga: 2} hash.each do |key, val| p &amp;quot;#{key}: #{val}&amp;quot; end # =&amp;gt; &amp;quot;hoge: 1&amp;quot;, &amp;quot;fuga: 2&amp;quot; hash.each_key do |key| p key end # =&amp;gt; &amp;quot;hoge&amp;quot;, &amp;quot;fuga&amp;quot; hash.each_value do |val| p val end # =&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot; hash[:hoge] = 3 p hash # =&amp;gt; {hoge: 3, fuga: 2} hash[:piyo] = 4 p hash # =&amp;gt; {hoge: 3, fuga: 2, piyo: 4} hash.delete(:piyo) hash # =&amp;gt; {hoge: 3, fuga: 2} hash.empty? # =&amp;gt; false hash.length # =&amp;gt; 2 ハッシュの生成はHash[]により偶数個の引数から行うことも</description>
    </item>
    
    <item>
      <title>Ruby基礎復習(5) 配列(Array)</title>
      <link>https://chroju.github.io/blog/2015/03/18/study-ruby-array/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/03/18/study-ruby-array/</guid>
      <description>『パーフェクトRuby』p.171より。 まずは配列の生成をいくつか。#new(a,b)で生成したとき、各要素は同じオブジェクトとなるので注意。またブロックで受け取ると、インデックスを引数としてブロック内の処理を実行した結果が値となる。 a1 = Array.new(3,1) # =&amp;gt; [1, 1, 1] a2 = Array.new(3, &amp;quot;hoge&amp;quot;) # =&amp;gt; [&amp;quot;hoge&amp;quot;, &amp;quot;hoge&amp;quot;, &amp;quot;hoge&amp;quot;] a3 = [&amp;quot;hoge&amp;quot;, &amp;quot;fuga&amp;quot;, &amp;quot;piyo&amp;quot;] #</description>
    </item>
    
    <item>
      <title>Ruby基礎復習(4) EnumerableとComparable</title>
      <link>https://chroju.github.io/blog/2015/03/17/study-ruby-enumerable-comparable/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/03/17/study-ruby-enumerable-comparable/</guid>
      <description>『パーフェクトRuby』p.164より。 一部組み込みクラスは、EnumerableやComparableというモジュールがincludeされている。前者は聞き慣れない英単語だが、&amp;rdquo;can be counted&amp;rdquo;の意味らしく、HashやArrayといった一定の集合</description>
    </item>
    
    <item>
      <title>Ruby基礎復習(3) Numericクラス</title>
      <link>https://chroju.github.io/blog/2015/03/16/study-ruby-numeric/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/03/16/study-ruby-numeric/</guid>
      <description>パーフェクトRuby p.144より。 判定系メソッド、#nonzeroが#zeroの真逆の動きではなくてちょっと混乱しそう。あと#integer?はあるけど#float?はないとか。 0.zero? # =&amp;gt; true 3.zero? # =&amp;gt; false 0.nonzero? # =&amp;gt; nil 1.nonzero? # =&amp;gt; 1 1.integer? # =&amp;gt; true 1.real? # =&amp;gt; true 演算子系の話は割愛するが、宇宙船演算子だけ注意しとく</description>
    </item>
    
    <item>
      <title>Ruby基礎復習(2) Stringクラス</title>
      <link>https://chroju.github.io/blog/2015/03/15/study-ruby-string/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2015/03/15/study-ruby-string/</guid>
      <description>パーフェクトRuby p.148から学習。文字列ことStringクラス。 まずは基本操作系。 s = &amp;quot;hoge&amp;quot; s.empty? # =&amp;gt; false s.length # =&amp;gt; 4 s.size # =&amp;gt; 4 s.bitesize # =&amp;gt; 8 s.include?(&amp;quot;og&amp;quot;) =&amp;gt; true 演算子での操作。 &#39;hoge&#39; + &#39;fuga&#39; # =&amp;gt; &#39;hogefuga&#39; &#39;hoge&#39; * 3 =&amp;gt; &#39;hogehogehoge&#39; 破壊的な文字列の追加。 s = &amp;quot;hoge&amp;quot; s &amp;lt;&amp;lt; &amp;quot;fuga&amp;quot; # =&amp;gt; &amp;quot;hogefuga&amp;quot; s.concat(&amp;quot;piyo&amp;quot;) # =&amp;gt; &amp;quot;hogefugapiyo&amp;quot; 切り出し。 s = &amp;quot;hogefuga&amp;quot; s.slice(3) # =&amp;gt; &amp;quot;e&amp;quot; s.slice(2,5) # =&amp;gt; &amp;quot;gefu&amp;quot; s.slice(-4,2) # =&amp;gt; &amp;quot;fu&amp;quot; s.slice(2..5) # =&amp;gt; &amp;quot;gefu&amp;quot; #sliceを</description>
    </item>
    
  </channel>
</rss>