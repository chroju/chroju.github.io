<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible Event on the world as code</title>
    <link>http://localhost:1313/categories/ansible-event/</link>
    <description>Recent content in Ansible Event on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&amp;copy; Copyright notice</copyright>
    <lastBuildDate>Thu, 25 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/ansible-event/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansibleの入門イベント聞いてきた話</title>
      <link>http://localhost:1313/post/hika-labo-ansible/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/hika-labo-ansible/</guid>
      <description>これ行ってきた。ざくっと感想を箇条書きで。
 ChefやPuppetに相当するインフラの設定管理ツールだと勝手に思い込んでいたが、対象範囲はそれらより広い。要はCapistranoがやるようなことまでまかなえる。 それどころかHomebrewの管理あたりも可。一時期brewfileとか流行ってたけど、冪等性とか考えるとAnsible管理の方がいいかも。  最近そんな記事がちょうど上がってた。→ 【要するに】osxcでMacの環境の構成を記述管理する【MacでAnsible】 ｜ Developers.IO  一番のポイントはエージェントレス、だと個人的にも思う。導入ハードルが低い。個人のVPSとかならChef-Zeroとかよりも気楽で良い。 yamlだからインフラ担当者でも読みやすいって点はそれほど惹かれないというか、Rubyぐらいインフラ屋でも昨今は読み書きできるべきではって気がする。  あとRubyの方がぶっちゃけ処理ベタ書きしちゃえるって点で安心感はある。Ansibleで細かいとこに手が届かないとき、どういうワークアラウンドがあるかはわかってないが。  しかし、とはいえやっぱ楽そう。Vagrantと組み合わせて開発環境立てるみたいな小さなことからやってみて、イケると思ったら本番展開ってのもアリかもしれない。かも。 この手のツールが出たときに「こんなこともできる！すごい！」ってなりがちなんだけど、実は再発明された車輪で成り立ってる部分もあって、それshでできるよ？ってなることは結構ある（brewfileがわりとその気配あった）ので、その点に関してはきちんと見極めがしたい。 あとやっぱり構成管理ツールはインフラエンジニアから完全にdevを奪いにかかるツールではあるので、インフラ屋はスケーリングとかネットワークとか（そういえばネットワーク周りのas codeなかなか流行りませんね）障害対策とか、本気でops特化が求められるのかもなとか思った。  </description>
    </item>
    
  </channel>
</rss>