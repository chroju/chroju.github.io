<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on the world as code</title>
    <link>https://chroju.github.io/post/</link>
    <description>Recent content in Posts on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 28 Dec 2016 18:05:19 +0900</lastBuildDate>
    <atom:link href="https://chroju.github.io/post/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2016年総括 - 技術者って何なのかやっと理解した</title>
      <link>https://chroju.github.io/blog/2016/12/28/looking_back_2016/</link>
      <pubDate>Wed, 28 Dec 2016 18:05:19 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/12/28/looking_back_2016/</guid>
      <description>&lt;p&gt;2016年も終わるので振り返ります。ポエムです。今年はなんというか、技術者として自分が何をすべきなんだろっていうのがやっとなんとなくわかってきたかなという年でした。&lt;/p&gt;

&lt;p&gt;元々SEとして4年間、小規模なシステムのおもりをしてExcelと格闘する日々を過ごしていた自分なので、技術的な部分でだいぶコンプレックスがあったし、とにかく勉強しなきゃみたいな焦りをずっと抱いていたんですけど、転職して1年半ぐらい経過してようやくそういう焦りが落ち着いた気がします。今年は業務上必要なことを遅延評価で学習することが多く、あまり自分のやりたいものを作ったりなんだりっていうクリエイティブっぽい感じにはなれなかったんですけど、いわゆるシステム運用ってなんなんだ、エンジニアってどこまで知識や技術を広げるべきなんだっていう全容がやっと見渡せて、自分の位置づけがわかってきたように思う年でした。&lt;/p&gt;

&lt;p&gt;とか言ってしまうとだいぶ抽象的ですけど、具体的にやったのはMySQL中心にRDBMSの理解、Linuxでよく使われるBINDやsquidのようなOSSの習熟、AWSの利用とホワイトペーパーからのベストプラクティス習熟、Infrastructure as Code等DevOps周りの導入検討といったところでした。6年目でやることかこれみたいのも入ってますけど、Windowsだけの世界でずっと生きていたというのもありますし、遅かったかもしれないけどなんとかこう、スタートラインには立てたのかなと。学習はほぼほぼ本を読む、ブログを読むというところに特化していて、図書館もよく使いました。都内だと広尾の都立中央図書館がすごい技術書の蔵書量ですね。オライリーに限れば日比谷図書文化館にも結構ありますが。あとは勉強会を必要に応じて月に1回ぐらいのペースで。手を動かすより読む場面の方が多かったかもな、というのは若干反省点。基礎的な内容だろうと恥ずかしがらず、習得したらアウトプットしたいものです。&lt;/p&gt;

&lt;p&gt;でー、基礎的、具体的な技術の土台ができてくるとメタな視点を持てるようになるもので、先の見通しがクリアになってきたかなと。『情熱プログラマー』の「1つのテクノロジーに投資するな。ベンダー中心にキャリアを考えるな」という記述にだいぶ影響受けまして、これまでは「技術学習」となるとプロダクトと相対する形がほとんどだったわけですけど、技術は手段に過ぎない、何のためにその技術を選ぶのか、みたいなことをやっと考えられるようになってきました。ミッション的には自分はビジネス的価値を直接生み出す、いわゆるコーディングをする人間というよりは、ビジネス的価値を産んでくれるコードをつつがなく動かす、運用効率を最適化するというところにフォーカスしたいという思いが強くなってきていて、そのためにどんな技術を選べばいいのかなというのをよく考えます。よく言うDevOpsとか、今年流行ったSREに思いとしては一番近いでしょうか。まだまだ未熟なので、そういう方面でバキバキバリュー発揮したいですね。特にDevOpsとかは文化的、コミュニケーション的な側面が強く、純粋に技術極めりゃいいってより組織論とか社会科学的なアプローチが必要だったりするし、そのへんもっと頑張りたいなと。。&lt;/p&gt;

&lt;p&gt;あとあと、これまでは技術をインプットするという方向性が強かったんですけど、技術者という枠組みの中にいるのであれば「提供する」側にはそれなりに寄与したいなとも思うようになってきました。なんか今まではLTをする（そういえば今年やっと初LTしました）、GitHubでプルリクを出すみたいなのは自分の価値向上のためだとばかり思ってたんですけど、見方を変えれば技術者コミュニティというもっと広い場所に対する価値向上の意味もあるわけだよなと。特にOSSへのプルリクやらコミットというのは、誰かがそれをしてくれなくてはこれだけ便利な世の中は現状存在していなかったはずというわけで、これまで受けてきた恩恵を少しでも返す努力したいなと。そのためにはコードを読めて書けなくてはならない、もっと手を速くしたい。会社への寄与、自分の価値向上だけではなくて、業界全体に対して自分がやれることというのを意識したいなと思う。&lt;/p&gt;

&lt;p&gt;はい、というわけで技術者として冷静になれたというのが今年だろうと思います。自分が何のために技術者やってんだってのをやっと考えられるようになった。ウェブを見てると新しいことやらなきゃいけない、かっこいいことやらなきゃいけないみたいに焦りますが、そうじゃなくて自分ができること、求められていることを的確に提供できるようになりたい、そのために必要な知識や技術を、的確な速度でキャッチアップしているエンジニアになりたいですね。来年はもっとコードを書く、それも汎用的に使える、きちんと公開して他の人の役にも立つようなものを書く、それが技術者としての責任でもあるかなと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>esa.ioを個人利用している話</title>
      <link>https://chroju.github.io/blog/2016/12/27/esa_io_personal_use/</link>
      <pubDate>Tue, 27 Dec 2016 00:46:39 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/12/27/esa_io_personal_use/</guid>
      <description>

&lt;p&gt;3か月ぐらい前から&lt;a href=&#34;https://esa.io/&#34;&gt;esa.io&lt;/a&gt;を個人利用している。&lt;/p&gt;

&lt;h2 id=&#34;esa-ioにした理由:f45d877befe069332011e8b00486063b&#34;&gt;esa.ioにした理由&lt;/h2&gt;

&lt;p&gt;何分調べること、考えることが多い職業ということで、メモをする環境というのは常に欲しいもの。家でも仕事でもその姿勢はシームレスだったりするので、可能であれば場所を選ばずメモが出来て、メモを参照できる環境がいい。&lt;/p&gt;

&lt;p&gt;従来はDropboxにmarkdownを保存して、&lt;a href=&#34;https://github.com/glidenote/memolist.vim&#34;&gt;GitHub - glidenote/memolist.vim: simple memo plugin for Vim.&lt;/a&gt;を使ったりしていたのだけど、職場でDropbox同期をするのは気が引けたのと、古いメモが死蔵される率が高かったために断念。以前は古いメモも「grepできればOK」と考えていたが、そもそもgrepする単語を思いつかなければ古いメモは参照されないままになってしまうので、もう少し一覧性の高い仕組みが欲しくなった。&lt;/p&gt;

&lt;p&gt;手を出したのがesa.io。課金は毎月500円/ユーザー数なので、個人であれば月々500円で使用できる。esa.ioを使っているのは、どこでも使えるという点もそうだし、もういろいろな人が言っていることだけど、「使っていて気持ちがいい」という点が大きい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdownで書くことが前提になっていて、例えば箇条書きを「* 」を使って書いていると、改行したときに自動で「* 」が入力されるなどの入力補助がある。&lt;/li&gt;
&lt;li&gt;Markdownプレビューがシンプルで見やすい。&lt;/li&gt;
&lt;li&gt;整理が簡単で、タイトルを「hoge/fuga/memo」とスラッシュで区切るとその構造でフォルダが作成され、「#」を含めるとタグが付与される。ドラッグ＆ドロップでノート整理をするような苦痛がない。&lt;/li&gt;
&lt;li&gt;テンプレート機能がある。週報や読書メモのような、決まったフォーマットで書きたいメモを作りやすい。&lt;/li&gt;
&lt;li&gt;各フォルダにREADME.mdを作成しておくと、フォルダのトップを表示したときにREADMEの内容がプレビュー表示される。そのフォルダ内の使い方を記したりするのに使える。&lt;/li&gt;
&lt;li&gt;デザインかわいい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;esa-ioの用途:f45d877befe069332011e8b00486063b&#34;&gt;esa.ioの用途&lt;/h2&gt;

&lt;p&gt;もっぱら使う目的は長文用途が強い。日常の中で長文を書く、一つのテーマについてとにかく書き留めていくという機会は多い。技術書を読めば概要などのメモはしておきたいし、勉強会に参加したときも、資料が後から公開されるにしても、手元にメモを残している。何か新しい技術を学んだり、課題を検討したりするときも、なるべく徒手空拳ではなくて思考のログを残したい。&lt;a href=&#34;http://d.hatena.ne.jp/naoya/20131107/1383792634&#34;&gt;「書く」のは特別な道具 - naoyaのはてなダイアリー&lt;/a&gt;というエントリーでも触れられているけれど、インプットされた情報そのものではなく、それを自分の中でどう咀嚼したか、どう考えたかをロギングするツールというのが必要で、その点でesa.ioを活用している。というわけで、用途を並べるとこんなところか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;読書メモ&lt;/li&gt;
&lt;li&gt;勉強会、イベントメモ&lt;/li&gt;
&lt;li&gt;何か1つのテーマを掘り下げるときのノート取り&lt;/li&gt;
&lt;li&gt;個人週報&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に読書メモや週報あたりは特定の書式（KPTだとか、感想と不明点と次に読む本だとか）に則って書きたいという気持ちが強かったので、テンプレート機能のあるesa.ioがすごくマッチしている。&lt;/p&gt;

&lt;p&gt;また自分が今注力している分野、短期的な目標等を見失わないため、一番トップのREADME.mdにはそれらを書き記している。いわゆるタスク管理ツールは短期的な行動指針にしかならないので、そのさらに先の方向性を定めるイメージ。『SOFT SKILLS』でも「目標をたてよう！」と言っていたし。&lt;/p&gt;

&lt;h2 id=&#34;エンジニアと-書く-ということ:f45d877befe069332011e8b00486063b&#34;&gt;エンジニアと「書く」ということ&lt;/h2&gt;

&lt;p&gt;それにしても自分はメモ環境を悩みすぎている嫌いがあって、今年の初めにも「Personal Knowledge Base」という括りでエントリーを2つ上げている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chroju.github.io/blog/2016/01/24/personal-knowledge-base/&#34;&gt;Personal Knowledge Base · the world as code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chroju.github.io/blog/2016/03/17/personal-knowledge-base-2/&#34;&gt;Personal Knowledge Base 2 · the world as code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どうにも「どこかに書き留めることなく、頭の中だけでつらつらと思考を巡らせてしまう」癖のようなものがあって、1つのことを深く考えたり調べていったり、逆に様々な思いつきを将来役立てるために記録しておくことが得意じゃない。&lt;/p&gt;

&lt;p&gt;なのでメモ術、整理術みたいなものはいくつも読んでいて、自分が影響を受けたものにはこんなところがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4480020470&#34;&gt;外山滋比古『思考の整理術』&lt;/a&gt;。ド定番だけど、一度考えたことを「寝かせて」おいて、しばらくしてから「メタノート」に拾い上げる、考え直すみたいな方法は気に入っている。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pileofindexcards.org/wiki/index.php&#34;&gt;PoIC&lt;/a&gt;。要は情報カードの使い方なのだが、発見、参照、記録、GTDの4種類にカードを分類するだけで、大掛かりな整理はしないシンプルな方法論。こちらも「メタノート」のように、何かを考えるにあたっては関連するカードを束ねた「タスクフォース」を作り、メモの掘り返しを行う。&lt;/li&gt;
&lt;li&gt;GTD。言ってしまえば頭の中のことをすぐにメモをして、その内容はすぐ何かやるべきか、後でやるか、特に行動が要らないか分類して、頭の中を空っぽにしようという話。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらに共通するのは、結局のところ思考を外部に記録することで、脳内のリソース効率を高めることと、蓄積された情報を後から見返すことで、新たな意味を発見できる可能性があるという二点になる。PoICの中で、情報の蓄積による「エントロピーの増大」という表現をしていたが、頭の中で考えているだけの段階だと見通しが悪くてあまり価値のある情報にはならないのだが、書き溜めていくことで自分が何を考えているのか、どういう方針を持っているのかが明確化されるという副作用がある。過去の自分に囚われたいわけではないが、自分がどういった方向性で進んできていて、それとブレていないかを定期的に確認する手段としてメモなりブログなりは作用している。&lt;/p&gt;

&lt;p&gt;技術系の仕事をしていても同じことで、あるソフトウェアに関するエラーを調査していたはずなのに、徐々に重箱の隅を突き始めて、目的から逸れたことを調べていたりすることはそこそこある。「体系立てて考える」というのは簡単なように見えて案外難しくて、「外部脳」に頼ることはやっぱり必要だなと思う。それこそ研究者の文献管理方法とか参考にしてみたらいいのかもしれないと思ってもいて、一度togetterにまとめられているのを読んだのだが、案外というか、京大式カードとか使うものなんだな実際と思ったり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&#34;https://togetter.com/li/939197&#34;&gt;文献読書中のメモの管理方法 - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういう「メモをする」「ノートを取る」重要性は理解しているし、それに沿った方法論や道具も持っているはずなのに実行できていないというのは、まぁちょっとアプローチを考える必要があるんだろうなと思う。強制的かつ自動的にメモを取る、脳内ではなく「脳の外で思考する」ために「書く」という手段を使えたらなと思いながら、まだ絶賛模索中。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>エンジニアの問題解決力とは何か</title>
      <link>https://chroju.github.io/blog/2016/12/17/engineering_problem_solving/</link>
      <pubDate>Sat, 17 Dec 2016 12:43:17 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/12/17/engineering_problem_solving/</guid>
      <description>

&lt;p&gt;今年度、特に下半期からいわゆる技術的負債の返済、特にDevOps方面におけるプロセス改善に深く携わるようになった。これまで依頼ベースの対応や、プロジェクトベースの仕事をすることが多く、要は「何をやるか」がある程度決まっていたわけだけど、改善系の業務は問題を見つけ、解決策、しかも場当たり的なものではなくてボトルネックを閉めるような策を講じていく必要があるということで、これまでと違う視点で仕事をする必要が出てきた。そこで何冊か「問題解決」にフォーカスした本を読んだ結果をまとめてみる。&lt;/p&gt;

&lt;h2 id=&#34;問題とはなにか:c53e415e6b04570f75a6e7eddbd2a1e7&#34;&gt;問題とはなにか&lt;/h2&gt;

&lt;p&gt;そもそも「問題」って何なのか。&lt;a href=&#34;https://www.amazon.co.jp/dp/4492557415&#34;&gt;細谷功『問題解決のジレンマ』&lt;/a&gt;によれば、問題とは「事実と解釈の乖離」だという。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4492557415/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51HZRQOWU6L._SL160_.jpg&#34; alt=&#34;問題解決のジレンマ: イグノランスマネジメント:無知の力&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4492557415/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;問題解決のジレンマ: イグノランスマネジメント:無知の力&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.12.17&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;細谷 功 &lt;br /&gt;東洋経済新報社 &lt;br /&gt;売り上げランキング: 112,865&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4492557415/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;客観的な「事実」があり、その関係性や論理構造を規定する「解釈」がある。事実というのは客観的なものなので変化することは少ないが、解釈は時代や文化によって在り方を変える。つまりは古くなってくるわけで、それによって事実と解釈が乖離を起こすことにより、問題が発生する。&lt;/p&gt;

&lt;p&gt;システム運用という自身の立場で考えれば、例えばベンチャー企業においては「小規模なシステム」かつ「少人数の精鋭社員」という「事実」下では、「スピードが重要でドキュメントを書かずとも運用は可能」という「解釈」が成り立ちうる。これが年数が経過して「大規模なシステム」かつ「新卒等も含めばらつきのある社員」という事実に変わってくると、先の解釈通りにドキュメントなしでは運用が難しくなったりするわけで、事実と解釈の乖離が起きた状態が発生していることになる。&lt;/p&gt;

&lt;h2 id=&#34;問題を見つけるために:c53e415e6b04570f75a6e7eddbd2a1e7&#34;&gt;問題を見つけるために&lt;/h2&gt;

&lt;p&gt;人は日常的には己の「解釈」の枠組みの中で生きている。知識が増えるほど、自分の知る範囲内での最適化＝問題解決を図ろうとするようになるが、根本的な問題解決をするには、そもそもその「解釈」の範囲の外に問題がある、つまり自分の「解釈」がすでに形骸化している、ということを見つける必要がある。『問題解決のジレンマ』では、これをラムズフェルドがかつて言及した&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%9F%A5%E3%82%89%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%A8%E7%9F%A5%E3%82%89%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%82%E3%82%8B&#34;&gt;Unknown unknowns（未知の未知）&lt;/a&gt;という言葉で説明している。&lt;/p&gt;

&lt;p&gt;とはいえそれは容易な話ではない。たいていの人間は自身の知識、先入観を抽象化して物事を考えるということを、簡単には実践できていないように思う。&lt;/p&gt;

&lt;p&gt;自分がそもそも「わかっていない」ということを「わかっていない」ことに気付くには、安直に言ってしまえば視野を広げていくしかない。『問題解決のジレンマ』で挙げているのは「フレームワークの導入」で、物事を一般的なフレームワークに当てはめて考えれば、どの分野に対して視点が足りていないのかを探る手がかりになる。&lt;/p&gt;

&lt;p&gt;また「知識がある」という状態がそもそもの「未知の未知」を見つける足枷になるわけだから、知識をリセットする、知識をフローとして扱って、不要になったら捨てていくようなプロセスがいいのではという。これは外山滋比古も「忘却の力」という形で扱っている概念だ。エンジニアは技術職だが、一つの技術領域にこだわりすぎると時代の潮目についていけなくなったりするので、この点は一理ある。&lt;/p&gt;

&lt;p&gt;あるいは『SOFT SKILLS』の「学習」の項において、学習すべき事項を見つけるために勧めていたのが、「わからないことをメモしておく」ことだった。学習すべき事項というのは要は「問題」なわけで、これも問題発見には応用できるのだと思う。まぁ地道で「そりゃそうだろ」という話ではあるのだが、日頃見つかる小さな問題をスルーせずに、都度確実に書き留めておくことは必要と思う。そして個別の問題それぞれに対応するのではなく、ある程度蓄積された複数の小さな問題を並べて「ボトルネックは何か？」と考えていくことで、対応すべき大きな問題が見つかるのではないか。&lt;/p&gt;

&lt;h2 id=&#34;問題を解決していく過程:c53e415e6b04570f75a6e7eddbd2a1e7&#34;&gt;問題を解決していく過程&lt;/h2&gt;

&lt;p&gt;見つけた問題を解決する過程については&lt;a href=&#34;https://www.amazon.co.jp/dp/4862760856&#34;&gt;安宅和人『イシューからはじめよ』&lt;/a&gt;に詳しいが、内容としては要するにデカルトの『方法序説』に近い、一般的な科学的方法論だ。問題を見つけたら、それを解決可能な小さな単位に分解し、単純かつ具体的な観測から抽象へと認識を進め、全体の論理が沿うように再構成していく。GTDにおいても、目的と求めるべき結果を最初に定めて、その間に必要なタスクをブレインストーミングしていく「ナチュラルプランニング」という方法論があるが、どこか似通っている。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4862760856/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41Xo9o1l0sL._SL160_.jpg&#34; alt=&#34;イシューからはじめよ―知的生産の「シンプルな本質」&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4862760856/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;イシューからはじめよ―知的生産の「シンプルな本質」&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.12.17&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;安宅和人 &lt;br /&gt;英治出版 &lt;br /&gt;売り上げランキング: 1,168&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4862760856/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ある問題を端緒として改善活動を始めたとして、どうもエンジニアとしての性なのか、当初の目的からズレて技術的な面白さを求めてしまったりすることはよくある。サーバーのデプロイスピードが遅いことを発端として改善を始め、じゃあクラウドを使って改善しようという話になったが、どのクラウドサービスを使えばいいのかと言った別の問題で時間をかけてしまったり、結局手作業でEC2インスタンスを作っているのでオンプレのときとスピードが変わらない、みたいな話はありがちだ。問題から解決策への筋道が論理的な整合性を保っているかは、常に確認が必要になる。&lt;/p&gt;

&lt;p&gt;この点は自分が特に出来ていないところで、プライベートで何か勉強を始めたはいいが、何を求めて始めたのかを忘れてしまって、細かいつまずきポイントでずっとハマったままになったりしていることが少なくない。&lt;/p&gt;

&lt;h2 id=&#34;具体的実践:c53e415e6b04570f75a6e7eddbd2a1e7&#34;&gt;具体的実践&lt;/h2&gt;

&lt;p&gt;以上のような検討から、具体的にいろいろと実践してみようと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「わからないことメモ」をすすめる。よく使っている小さめのメモ帳があるので、それに1ページ1項目で「わからないこと」を記述して、週末に見直してみる。&lt;/li&gt;
&lt;li&gt;何か勉強を始めたり、問題解決にあたるときは、個人契約しているesa.ioでノートを1つ作る。

&lt;ul&gt;
&lt;li&gt;まず問題を1文で書き表す。それを出発点として、ぶれないことを心がける。&lt;/li&gt;
&lt;li&gt;調査の過程、問題解決を図るプロセスもすべて記録していく。常に全体の整合性が取れていることを確認しながらすすめる。&lt;/li&gt;
&lt;li&gt;最終的に「解決」まで至ったノートは、ブログやQiitaに投稿して公開する。&lt;/li&gt;
&lt;li&gt;実はこのエントリーもその方法に則ってesa.io上で昇華させた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;あまり特定の「技術」にこだわらない。

&lt;ul&gt;
&lt;li&gt;そもそも問題解決やビジネス的な成功という「目的」があり、それを達成するための手段が「技術」なのであって、それが何を採用するかこだわるのは本質ではない。&lt;/li&gt;
&lt;li&gt;技術への固執は「未知の未知」を見えにくくする。多様な技術に対して寛容な理解を心がけることで、常に必要な技術へキャッチアップできるような気がする。&lt;/li&gt;
&lt;li&gt;一方で低レイヤーの知識や、コンピュータ史への造詣は深める。先に挙げた「フレームワーク」にあたるのがこのような基礎分野だと思うので、基礎を固めることで現在の技術潮流をメタに判断できるようになる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に最後の「特定の技術にこだわらない」は重要だと思っていて、自分はどうしてもクールな技術、なんだかカッコよさそうなものがあると簡単に心惹かれてしまい、技術が目的になってしまう。もちろん、使っていて気持ちのいい技術を選択するのも大事なのだが、結局はどの技術もツールに過ぎないわけで、自社の「問題解決」に適切なハンマーなのかという点は念頭におきたいし、またその目的に適うならどんな技術だってクールと思うべきなんだろうと思う。&lt;/p&gt;

&lt;p&gt;自分は謙遜せずに言えば頭の回転が速い方なので、どうしても考えすぎてしまう、頭の中でぐるぐる物事を捏ね繰り回してしまう傾向にあり、それを解消する意味でも「きちんとesa.io上で論理展開する」というのは良いだろうと思っている。『考えない練習』という本も、考え過ぎを抑制する助けになりそうなので読んでみたい。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4094087001/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51y1EO0eUOL._SL160_.jpg&#34; alt=&#34;考えない練習 (小学館文庫)&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4094087001/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;考えない練習 (小学館文庫)&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.12.17&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;小池 龍之介 &lt;br /&gt;小学館 (2012-03-06)&lt;br /&gt;売り上げランキング: 5,008&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4094087001/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;また、ここまでは個人的な実践の話が多かったが、実際に職務上の問題解決を行うにはチームを巻き込む必要がある。人を動かす、チームの中で振る舞っていく方法論については、また別の課題としていきたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>多義化するOpsのミッションについて</title>
      <link>https://chroju.github.io/blog/2016/10/25/what_is_ops/</link>
      <pubDate>Tue, 25 Oct 2016 00:20:02 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/10/25/what_is_ops/</guid>
      <description>

&lt;p&gt;今年度から運用の担当になったんですけど、最近消化不良を起こしつつあります。立場としては言われたことだけやるオペレーターという形じゃなくて、いわゆるインフラエンジニアっぽい感じだけど構築はやりませんよって感じです。日々のオペレーションや障害対応をやりつつ、一方でDevOpsの整備とかに注力している感じ。でも自分のミッションはそこまで社内で明確化されているわけではなくて、どうもそのあたりに消化不良の原因がある。&lt;/p&gt;

&lt;h2 id=&#34;opsの担うミッションの変化:a85bf0306e898dabe503e62870ca86d4&#34;&gt;Opsの担うミッションの変化&lt;/h2&gt;

&lt;p&gt;そもそもにしてDevとOpsの境界ってどこなんだろうという定義はわりと曖昧な気もしますが、おそらくは「リリース」が境なんでしょう。基本的にはリリースまでを担当するのが「開発」で、リリース後のシステム稼働の面倒を見るのが運用、保守というイメージでいるのだけど、「運用」が担うミッションって最近かなり広がっているような気がするんですよね。&lt;/p&gt;

&lt;p&gt;一番難易度の低い運用といえば、いわゆる手順書に沿った業務しかやらないオペレーター作業になるわけですが、そういう運用と開発の業務内容、職掌をガッツリと分けた状態って最近は主流ではなくて、いわゆるDevOps的に開発フェーズからデプロイされて本番運用へと移っていく過程がシームレスになっていくのが常識化しつつある。あと運用というのも、システムを単に放っておいてトラブルが起きたら対応、という受動的なものではなくて、能動的にメトリクスやログを解析して、SREのようにソースコードにまで手を入れて、安定運用のための方策を講じていくスタンスが生まれつつあります。&lt;/p&gt;

&lt;p&gt;少し前だと、いわゆるインフラエンジニアが運用も担っているようなケースは特にWeb系だと多く見られていたし、Infrastructure as Codeの黎明期には「インフラエンジニアもコードを書けるべき」ということが盛んに言われていましたが、もはや時代は「運用の中でソフトウェアのコードを編集する」というところまで来ていて、だいぶ時代が移り変わったように見える。&lt;/p&gt;

&lt;h2 id=&#34;ops先鋭化へのジレンマ:a85bf0306e898dabe503e62870ca86d4&#34;&gt;Ops先鋭化へのジレンマ&lt;/h2&gt;

&lt;p&gt;もともとインフラエンジニアが運用を担っていたパターンにおいて、SREのような業務を来月からやりましょうってのはまず無理だと思っています。スキルの畑があまりに違うので。やるのであれば人員の配置換えをするか、インフラエンジニアにかなりの学習コストを払わせることが必要になる。ので、ちょっとSREの話は先鋭的すぎるとして置いておくとしても、いわゆる「インフラエンジニアもコードを書けるべき」は求められる場面が多くなってきたように思う。&lt;/p&gt;

&lt;p&gt;そもそも旧来の運用業務にしたところで、一切コードを書けない人間が担えたとは思えないんですよね。まぁ「手順書運用」は一切スキル不要なので別として、何か処理を自動化して効率化しましょうとなればスクリプトぐらいは書ける必要があるし、OSSの監視ツールを使いましょうとなれば、ソースを読む機会ぐらいはある。ただ、実際に運用業務に携わっていて思うのは、それを出来る人間というのは現実として限られてもいる。インフラエンジニアが運用を兼ねるようなケースであれば尚更です。&lt;/p&gt;

&lt;p&gt;堅牢性を求めて保守的なシステム運用をしようとすれば、運用は「決められたことだけをやる」「引き継いだことだけをやる」という方向にシフトしがちなわけで、そうなってくるとコードを読み書きするスキルが必要とされる場面は当然ながら減ります。その場合のスキルはインフラ周りに重点が置かれて、コードの修正はソフトウェアエンジニアに任せることになる。手作業のオペレーションが煩雑であるならば、ソフトウェアエンジニアへ自動化を依頼するかもしれない。&lt;/p&gt;

&lt;p&gt;どちらが良い、どちらが悪いという話ではなく、スキルと職掌による問題なんだろうと思っています。同じシステムを運用していても、コーディングスキルがあるエンジニアであれば自ら自動化をしよう、ソースコードを確認してみようという手の動かし方になるし、コードに携わるのは自分の職務ではないと認識していて、スキルも持ち合わせていないエンジニアであれば、誰かに任せればいいという思考になる。&lt;/p&gt;

&lt;p&gt;（運用も担っていた）インフラエンジニアの役割が変わってきた、というよりは、スキルやマインド、スタンスの面で、コーディングスキルのあるOpsエンジニアが別の方向へ進み始めたというように思えます（繰り返しになりますが、どちらが良し悪しということではなく、決められた手順だけを実施させることで運用のコストを下げる、というのも一つの考え方だとは思っています）。&lt;/p&gt;

&lt;h2 id=&#34;圧倒的技術力の必要性:a85bf0306e898dabe503e62870ca86d4&#34;&gt;圧倒的技術力の必要性&lt;/h2&gt;

&lt;p&gt;ところで、DevOpsはさておき「システム運用」全体を網羅したような本ってあんまりないです。最近は少し出るようになっていて『インフラエンジニアの教科書』などはそれに近いですが、（サーバー）構築の話も入ってくるので、純粋な運用というとオライリーの『ウェブオペレーション』が一番ハマっているかなと。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4863541333/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51WvFGuX5iL._SL160_.jpg&#34; alt=&#34;インフラエンジニアの教科書&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4863541333/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;インフラエンジニアの教科書&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.10.23&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;佐野 裕 &lt;br /&gt;シーアンドアール研究所 &lt;br /&gt;売り上げランキング: 29,314&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4863541333/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873114934/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51-ThZ6FRfL._SL160_.jpg&#34; alt=&#34;ウェブオペレーション ―サイト運用管理の実践テクニック (THEORY/IN/PRACTICE)&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873114934/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;ウェブオペレーション ―サイト運用管理の実践テクニック (THEORY/IN/PRACTICE)&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.10.23&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;&lt;br /&gt;オライリージャパン &lt;br /&gt;売り上げランキング: 371,961&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873114934/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Amazonに在庫ないっぽいので絶版かもしれないですがいい本でした。監視の考え方から継続的デプロイ、障害対応に関してまで載ってる。技術書というよりはエッセイっぽいですが、運用ってどんなことやるんだというのがわかる本。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kakakakakku.hatenablog.com/entry/2015/07/12/194716&#34;&gt;圧倒的な技術力が求められる職種だ /「ウェブオペレーション」を読んだ - kakakakakku blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;レビューを上げているブログを貼りましたが、このタイトルにもある通り、この本を読むと「圧倒的な技術力が求められるわ……」と呆然とします。2011年の本なので、SREのような先鋭化したスタイルに言及があるわけではないですけど、そもそも障害への対応にしたって、原因を切り分けるにはコンピュータアーキテクチャーのレイヤーから、OS、ミドルウェア、ソフトウェア、ネットワークと様々な視点を考慮する必要があるわけです。原因追求をせず、手順書通りに再起動や再実行をして「とりあえず」復旧したからOKとするのも運用と言えば運用ですけど、システムの安定性を保つためにどちらが望まれるかとなれば、大きな違いが出てくる。また運用や障害対応は組織で行うのが基本なので、うまいこと人員が動いて有機的に連携していくには、時に心理学や社会学の知識も役に立ったりします。&lt;/p&gt;

&lt;p&gt;思うのは、Opsという領域が二分されてきているんじゃないかということです。運用を標準化して、決まったことをやることでコストを抑えた方式と、SREへ辿り着くような、漸進的にシステム改善を図りながら安定稼働を目指す方式。なんとなく、前者のエンジニアが後者へ移り変わっていくようなイメージを持っていましたが、そもそもスタンスとして前者を是とする人と、後者を是とする人の2種類に分かれてきているように思う。B to BのサービスでSLAを握っているのなら、多少システムリソースの使用率が逼迫していても、SLAの範疇で運用されていれば問題がないわけだし、そこでパフォーマンスチューニングをしてもお金が取れるわけではないので得策ではない。となればSREは必要ないかもしれない。といった具合に、スタンスの違いでミッションも変わってくる。&lt;/p&gt;

&lt;p&gt;自分の場合は後者のスタンスを欲しています。SREのような高いスキルは現状持ちあわせていないけど、システムの安定した稼働、高効率な稼働に寄与して、エンジニアの対応コストを抑えていくというのをミッションにしたいなという思いが強くなってきている。が、それも会社が目指すOpsの方向性と噛み合っていないと無意味です。「運用」という言葉で括れる範囲は極めて広く、多義的になってきている昨今で、先に示したように「これ1冊！」という本を読めばOKというものでもないです。なので、まずはリリース後のシステムをどうしようか、というOpsのミッションをブレずに定義することが求められているのかなというのが最近の実感でした。&lt;/p&gt;

&lt;p&gt;ちなみに自分が思うOpsの職掌としては、クックパッドさんのインフラエンジニアの職掌範囲がとてもしっくりきていますね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://techlife.cookpad.com/entry/2015/10/07/181340&#34;&gt;インフラエンジニアの責任範囲と評価 - クックパッド開発者ブログ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ServerlessConfとエンジニアの職掌に関して</title>
      <link>https://chroju.github.io/blog/2016/10/03/serverless-conf-tokyo/</link>
      <pubDate>Mon, 03 Oct 2016 23:52:14 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/10/03/serverless-conf-tokyo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://tokyo.serverlessconf.io/&#34;&gt;ServerlessConf Tokyo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10月1日に開かれたServerlessConf Tokyoに行ってきました。会場で一度「サーバーエンジニアの方ってどれぐらいいますか？」という質問がありましたけど、そのときの挙手によればサーバー、インフラ寄りのエンジニアはだいぶ少数派だったみたいですね。まぁサーバーなくなっちゃってんだからそりゃそうだろって感じなんだけど、自分としてはインフラエンジニアの立場から見て「サーバーがない！」という状況はどう映るのか、どう向き合えばいいのかというのがだいぶ気にかかってました。それでなくてもクラウドの登場、特にAWSが当たり前のものとなってからはインフラエンジニア不要論が常に囁かれてはきたわけで。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chroju.github.io/blog/2015/10/20/eudaemonics-of-infrastructure-engineer/&#34;&gt;インフラエンジニアの幸福論 · the world as code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;改めてサーバーレスとはなんだろうと。いや、サーバーがないはずはないじゃんというのはよく聞く反論で、仰る通りAWS Lambdaといえど裏側では当然Amazon Linuxが、物理的なサーバーが動作しており、サーバーレスって言葉はあまりよろしくないんではみたいな話もあります。とはいえ運用するエンジニアの視点からすると、サーバーというスコープはごっそり消失しているような状態ではあるので、個人的にはあながち的を外しているとも思ってはいないです。しかしそうすると今度は、従来のherokuやAWSマネージドサービスだってサーバーレスだったことになるじゃん？というのが自分の疑問としてはあったのですけど、この点はだいぶ思い違いをしていたなと今回認識を改めました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;1&#34; data-id=&#34;8808b232125a4fbda7155ea8128e99cc&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;端的にサーバーレスで受けられる恩恵をまとめたものとしては、このスライドが非常にわかりやすくてピンときました。これまでビジネスロジックはサーバーというモノシリックなエンティティの中に組み込まれ、サーバーを基本単位として扱われることが主だったわけだったですけど、サーバーレス、いわゆるFaaSの世界ではビジネスロジックが単一の機能＝関数を単位としたマイクロサービスへ分割されます。そして実行媒体は常時稼動が前提であったサーバーやデーモンから、immutableなライフサイクルを持ったコンテナへ移されるため、自ずとステートレスな状態が保たれる。FaaSの実行はイベントドリブンで必要なときのみに絞られるので、リソースの効率性も従来とは考え方がまったく変わってくる。サーバーレスというのは、こういったソフトウェアアーキテクチャーの全体的な転換点として捉えなければならないんだなというのがやっと掴めました。&lt;/p&gt;

&lt;p&gt;確かに実行媒体であるはずのコンテナすらも隠蔽され、コードを書いて渡してしまえばそれだけで実行されるサーバーレスな世界というのは、インフラエンジニアという旧来の職種が入る余地はなさそうには見えます。でも自分の立場から見て、こういったサーバーレスの世界でやること皆無になるか？というとそうは思えなくて、ハードウェアリソースを如何に効率的に使うかだとか、リソース部分をすべて別の事業者に委ねてしまった状態で、可用性やパフォーマンスをどう担保していくかだとか、インフラエンジニアの視点から出来ることっていろいろあると思うんですよね。まぁそりゃ今までみたいにLinuxにSSHして云々だとか、ネットワーク機器の設定をどうのってのをやる機会はほぼ無いのかもしれないけれど、「インフラエンジニア」の定義を技術領域からミッションに変えることで、見えていく先はあるんじゃないかなと。&lt;/p&gt;

&lt;p&gt;またイベント内でこれも何度も聴いたんですけど、当然ながらサーバーレスは銀の弾丸ではないです。ステートフルであることが相応しいソフトウェアもあるし、デーモンを常駐させる必要性も現在皆無になったわけではない。サーバーレスを至上として、ソフトウェアをどうすればサーバーレスに出来るか？と考えるよりは、ソフトウェアをより望ましい状態にするために、アーキテクチャーとしてサーバーレスを選択することが適切か？という考え方をするべきなのではないかなと感じました。&lt;/p&gt;

&lt;p&gt;エンジニアの職掌は従来だと技術領域のレイヤーで隔てられることが多かったですが、技術分野の変容もさることながら、アーキテクチャーすら10年待たずにガラガラと形を変えていく時代においては、技術レイヤーへのフォーカスだけで職種を定義すると痛い目を見そうな気がしてきました。まずはミッション先にありきであって、そのための手段として技術やアーキテクチャーを選択する。そういう発想でいくと、「インフラエンジニア」と呼ばれる職種にも未来はある気がします。あるいは最近それがSREといった呼び方に変わったりしているのも、その証左であるんじゃないかなと。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>『SOFT SKILLS』と「やっていく気持ち」</title>
      <link>https://chroju.github.io/blog/2016/08/01/soft_skills_and_our_productivity/</link>
      <pubDate>Mon, 01 Aug 2016 22:30:41 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/08/01/soft_skills_and_our_productivity/</guid>
      <description>

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01GDS0994/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51xVQQcUloL._SL160_.jpg&#34; alt=&#34;SOFT SKILLS　ソフトウェア開発者の人生マニュアル&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01GDS0994/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;SOFT SKILLS　ソフトウェア開発者の人生マニュアル&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.08.01&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;日経BP社 (2016-06-02)&lt;br /&gt;売り上げランキング: 223&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01GDS0994/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;『SOFT SKILLS』読みました。印象としてはいわゆるライフハックな内容をエンジニア向けに落とし込んで解説している本、とういう感じ。ただ、単にテクニックだけを載せたペラペラした内容ではなくて、成功するためにはハードワークを避けるべきではない（第47章）ということもまた語っていたり、実情に即した書き方である点が好感が持てる。というか全体的にマッチョ寄り。&lt;/p&gt;

&lt;p&gt;この手の「ソフトスキル」、つまりエンジニアやギークが「よく生きる」ための本というのがこれまで皆無だったわけではなくて、例えば『&lt;a href=&#34;https://www.oreilly.co.jp/books/4873113075/&#34;&gt;エンジニアのための時間管理術&lt;/a&gt;』や、『&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873117287/&#34;&gt;ヘルシープログラマー&lt;/a&gt;』に書いてあることと一部の記載は似通っている。本書のポイントとしては、プロダクティビティ、精神、肉体、金銭といった横断的なソフトスキルを幅広くまとめ、またそれらを「エンジニアとしてより良く生きるために、直接的なエンジニアリング以外の領域をどうすべきか？」という視点でまとめた本はあまりなかったのだと思う。自分はライフハックがわりと好きでかじりまくった時期があったので、ちょっと目新しさに劣る部分はあったのだけど、そういう分野を敬遠してきたエンジニアにとっては新鮮な話が多いはず。&lt;/p&gt;

&lt;h2 id=&#34;行き先を定めてから-走るスピードを上げる:bb74715ff9a558243ee1e3e3558cd789&#34;&gt;行き先を定めてから、走るスピードを上げる&lt;/h2&gt;

&lt;p&gt;個人的にライフハックに対して感じていることがあって、タスクをどう処理するか？とかライフログがなんちゃらみたいな「目の前のことに対応する方法」は多いのだけど、それをすることで何を得るの？っていうのがあんまりなくて。早く帰れますとか生産性が上がりますでもまぁいいんだけど、それって本来「手段」となるべき部分で、生産性を上げて何を成したいのかというのが重要だよなとずっと思っている。&lt;/p&gt;

&lt;p&gt;本書の構成はその点で言えば第1部が「キャリアを築こう」で行き先を定める部分にあたり、第2部「自分を売り込め！」でそのために最も必要なことを語り、第3部以降でいわゆるライフハック的な、プロダクティビティや肉体精神の維持といった話に入っていく。順序としてはやっぱりこれが正しくて、行き先を定めておかないと、何のために走力を上げたいのかという目的を見失ってしまう。&lt;/p&gt;

&lt;h2 id=&#34;日常での実践:bb74715ff9a558243ee1e3e3558cd789&#34;&gt;日常での実践&lt;/h2&gt;

&lt;p&gt;本書の内容で自分がいま実践できていることって、実際のところあまりなかった。目標を持とう、と言われてそういえばあまり具体的な目標ないなと気付いたし、そこまで自己アピールして「売り込み」ができてもいないし、投資はちょっと前ちょろちょろETFを買ってみたっきりだし、肉体と精神に関しては自信がない。&lt;/p&gt;

&lt;p&gt;生産性に関しては少し前にrebuild.fmで取り扱っていたこともあり、自分は今ポモドーロを使っている。本書で紹介されているKanbanFlowは使っていないけれど、Trelloでざっくりした自分のプロジェクトの状況をダッシュボード的に管理して、細かい「やるべきこと」はTodoistに入れて、Chrome ExtentionのToggl Buttonでポモドーロタイマーを使っている。ポモドーロは25分間集中させることに意味があるように語られがちだけど、実際は1日の消化ポモドーロ数を見て自分の生産性を測るのに適していると書いてあって、そうそうそれだよ！という感じだった。タスクの消化数だと、タスクごとに工数が異なるのでなかなか生産性とイコールにはならないのだが、ポモドーロだとそれができる。あるいはアジャイルにおけるPivotal Trackerの考え方が生産性の計測には良いのかなと思っている。&lt;/p&gt;

&lt;p&gt;その他の部分は取りあえずやれることから手をつけたいかなと。ただ冒頭にも書いた通りわりとマッチョ寄りな内容が多くて、例えば自分は精神力に本当に自信がないのだが、その改善策として「理想的な自己イメージを想像することだ」と言われてもなかなか難しい（文中でも「難しい」とは書かれているけど）。あるいはこういう記述。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;その上で聞きたいのは、あなたは負けるつもりなのかということだ。単純に自分は仕事に集中することができないと諦めるのか、それとも抵抗に立ち向かい、障害を乗り越えようとするのか。それはあなただけができる選択だ。単にしなければならない仕事をすると決心すればいいだけだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;いや厳しい。。。とはいえ言っていることもごもっともなので、「やるしかねえ」と腹くくるかなぁという感じです。いい刺激になりました。以下、やること取りあえずでメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ポモドーロでの生産性計測を継続する。&lt;/li&gt;
&lt;li&gt;キャリア上の目標を定めてみる。&lt;/li&gt;
&lt;li&gt;どっかでLTする。年内中を目標に。&lt;/li&gt;
&lt;li&gt;瞑想を取り入れる。余裕あったら筋トレする。ランニングは見送る。&lt;/li&gt;
&lt;li&gt;ハードワークを避けない。難しい課題、つまらない課題でも挑む姿勢。&lt;/li&gt;
&lt;li&gt;何かを学ぶときは漫然と行わず、本書の10ステップに取りあえず従ってみる。&lt;/li&gt;
&lt;li&gt;メモの頻度を上げる。自分の内面の状態管理に使う。&lt;/li&gt;
&lt;li&gt;脂肪ではなくタンパク質の摂取。フルーツの摂取を心がける。&lt;/li&gt;
&lt;li&gt;自己イメージを持つという話は納得できてないので、本書で紹介されてる『自分を動かす』読んでおく。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>YAPC経験ないけどパチモンの方に行った</title>
      <link>https://chroju.github.io/blog/2016/07/02/yapc8oji_2016/</link>
      <pubDate>Sat, 02 Jul 2016 22:11:59 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/07/02/yapc8oji_2016/</guid>
      <description>

&lt;p&gt;イベントレポートに見せかけたポエムです。&lt;/p&gt;

&lt;p&gt;技術ブログとかQiitaとかやってると、更新してない間はあんまり成果出てないってことでバロメーターになっていいですね。先月はあんまり具体的な成果に繋がることは仕事でもプライベートでもしていない。。。何をやっていたかというと、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS運用見直しのためにホワイトペーパーやユースケース読み漁り&lt;/li&gt;
&lt;li&gt;EFK(Elasticsearch + Fluentd + Kibana)スタックをDockerでやろうとしてまだ途中&lt;/li&gt;
&lt;li&gt;セキュリティ知識つけるために『暗号技術入門』と「徳丸本」を読破。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたり？ というわけでなんだか煮詰まった状態で久しぶりの勉強会というかイベントになったのが&lt;a href=&#34;http://yapcasia8oji-2016mid.hachiojipm.org/&#34;&gt;YAP (achimon) C::Asia Hachioji 2016 mid in Shinagawa&lt;/a&gt;でした。昨年まで開催されていたYAPC::Asiaの「続き」として開かれたカンファレンス。&lt;/p&gt;

&lt;h2 id=&#34;本物は経験ない:638b4b255b4936649f18e3f0cddd54e5&#34;&gt;本物は経験ない&lt;/h2&gt;

&lt;p&gt;タイトルにも書いたけど本物のYAPCは一度も行ってないです。昨年転職するまではOfficeを主戦場としたSEだったのでアンテナ低かったし、タイトルにPerlって入ってるけど自分Perlエンジニアじゃないし、Perlを冠しながらあんなイベントだとは知らなかったし？ 結局内実をきちんと知ったのは昨年の開催中だったので時はめちゃめちゃ遅すぎた感じであった。RubyKaigiとかAWS Summitのような大きめのカンファレンスは経験あるにはあるけど、ビッグサイトで開催されていたという規模はちょっと想像できないですね。もったいないことをした。&lt;/p&gt;

&lt;h2 id=&#34;技術スタックを掘り下げたい:638b4b255b4936649f18e3f0cddd54e5&#34;&gt;技術スタックを掘り下げたい&lt;/h2&gt;

&lt;p&gt;今回いろいろとトークを聞いていて思ったのだけど、技術スタックをもっと掘り下げていきたいなという思いがした。こういう場で話される内容って、そのエンジニアの得意領域だったり経験だったりが活きるもので、ちょっとググって資料つくりましたとか、大して思い入れはないけどやってみたので喋りますとかそういうのじゃないんですよね。掘り下げがあるから話が面白くなる。実体験だから身にしみてわかる。そういうものだよなと。先月はAWS Summitにも行ったのだけど、今日の方が面白かった。それは企業がお膳立てした話じゃなくて、エンジニアがボトムアップに立ち上げたイベントだからだろうなと思う。&lt;/p&gt;

&lt;p&gt;転職してちゃんとエンジニアっぽいこと仕事でできてるなーと感じ始めてから、自分はだいたい1年ぐらいなのだけど、この1年は業務についていくためと時代についていくため、とにかく広くいろいろ調べてやってみるというばかりで、あんま掘り下げってしてないんですよね。「インフラエンジニア」って肩書はよくあるものだけど、その守備範囲ってすさまじく広いので、DBなのか、AWSなのか、ネットワークなのか、セキュリティなのかみたいな、自分を位置づける技術スタックは持っておきたいなと思った。よくT字型とか言われるけど、広く浅い知識はもった上で、一部分で深掘りを進めていかないと、自分が何をすべきか見失いそう、というか見失ってるな最近と。&lt;/p&gt;

&lt;h2 id=&#34;エントロピーの増大期間:638b4b255b4936649f18e3f0cddd54e5&#34;&gt;エントロピーの増大期間&lt;/h2&gt;

&lt;p&gt;突然話は変わるけど、自分はPoICという方法論がわりと好きで。要は情報カードに発見や記録をメモしていきましょうみたいな知的生産の話なのだけど、この中で面白いなと思っている話として、&lt;a href=&#34;http://pileofindexcards.org/wiki/index.php?title=PoIC_%E3%82%92%E9%80%9A%E3%81%98%E3%81%A6%E8%A6%8B%E3%81%88%E3%81%9F%E3%81%93%E3%81%A8#.E6.83.85.E5.A0.B1.E3.81.A8.E3.82.A8.E3.83.B3.E3.83.88.E3.83.AD.E3.83.94.E3.83.BC.E3.81.AB.E3.81.A4.E3.81.84.E3.81.A6&#34;&gt;エントロピーに絡めた話&lt;/a&gt;がある。頭の中の乱雑な情報をカードに書いて書き溜めておくことで、そのストックの中でエントロピーを高めて生産性を生み出すという考え方。&lt;/p&gt;

&lt;p&gt;これって外山滋比古のいう「メタノート」とか、あるいはジョブズのスタンフォードでのスピーチにあった「Connecting the dots」と話は似ていて、要はある程度蓄積されてこないと情報や知識って意味を成さなかったりするもんなんですよね。学習曲線も正比例のグラフを描かないことは有名だけど、何かを学んだり取り入れたりすることがすぐに成果を生むわけではなくて、ある程度価値となるまでには時間がかかる。&lt;/p&gt;

&lt;p&gt;冒頭に書いたように、先月ぐらいって自分はあんまり成果出せなかったなっていうのがあって、停滞感にもやもやしていたんだけど、エントロピーの増大期間という考え方をすると、まぁそんな焦る必要もないのかなと。きちんと日頃から必要な知識に向き合って習得していくことで、徐々に掘り下げってできてくるのかなと思う。&lt;/p&gt;

&lt;p&gt;で、エモい話だけしてイベントレポート終わるわけにもいかないので具体的な話も書きますが、今回MySQLの話4回ぐらい聞いていて、改めてDB弱いなと思った次第。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/F89iwACdqldnT&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/yoku0825/ss-63664674&#34; title=&#34;とあるイルカの近況報告&#34; target=&#34;_blank&#34;&gt;とあるイルカの近況報告&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/yoku0825&#34; target=&#34;_blank&#34;&gt;yoku0825&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;弊社もMySQLがメインで使っているので、いい加減真面目に追いかけておきたい。正規形の話も数年前に受けた応用情報の復習みたいで勉強できた。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/6yzSDaOxaTOWN&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/yoku0825/mysql-63658697&#34; title=&#34;MySQLと正規形のはなし&#34; target=&#34;_blank&#34;&gt;MySQLと正規形のはなし&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/yoku0825&#34; target=&#34;_blank&#34;&gt;yoku0825&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;これは現地で聴いてなくて後から読んだスライドだけど、esa.ioの姿勢はとてもいいなと思う。頑張り過ぎないのあたりとかすごい大切だと思っていて、最初からベストなやり方するより、とりあえず導入した方がいいってことは多い。あと移行日記。移行じゃなくても技術的な日記書きたい。一つの技術を長期間追ってると徐々に目的見失ったり、そうだアレもやらなきゃみたいに脇道逸れたりしやすいんだけど、これぐらい砕けて感情的に書くと、それがなくなりそう。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;7aa606badc2d4782a14eeba7c2755309&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;あと個人的にはHashicorp Vaultがとても気になりました（資料はちらとググったけど、まだ上がってない？）。クレデンシャル情報、どうしてもLDAPやIAMのような集中管理に載り切らないものが出てきてしまうけど、これなら集約的に管理できて、しかもAPIあるから取り回しも楽そう。&lt;/p&gt;

&lt;p&gt;いろいろ考えることの多い1日でした。自分がどこに向いて進むのか、もっかい考えようと思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverlessの時代とas code</title>
      <link>https://chroju.github.io/blog/2016/06/05/aws_summit_ansible_meetup_2016/</link>
      <pubDate>Sun, 05 Jun 2016 23:46:12 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/06/05/aws_summit_ansible_meetup_2016/</guid>
      <description>

&lt;p&gt;先週&lt;a href=&#34;http://ansible-users.connpass.com/event/31222/&#34;&gt;Ansible Meetup in Tokyo 2016.06&lt;/a&gt;と、&lt;a href=&#34;http://www.awssummit.tokyo/&#34;&gt;AWS Summit Tokyo 2016&lt;/a&gt;に行ってきたので軽めのレポートにします。&lt;/p&gt;

&lt;h2 id=&#34;aws-summit:95a87fd1a47a72aa1bf662cfd38baf72&#34;&gt;AWS Summit&lt;/h2&gt;

&lt;p&gt;AWS Summitは初参加でしたが、会場を見渡したときのスーツ率の高さからいわゆるEnterprise系のイベントに近いのかと思いきや、DevConの方を中心にテクニカルな話題も多めで楽しめました。とはいえAWSサービス紹介にとどまるセッションや、タイトル通りの内容ではなく、各企業の内部事情を抽象的に話すだけで終わるようなセッションも少なくなく、セッションの選択はそれなりにコツがいるなとも思ったのですが。。&lt;/p&gt;

&lt;p&gt;自分が受けたセッションで特に多く話されていたのは、Serverlessの話とDevOps、具体的にはCI/CDの話。いずれも要はこれまで複雑に運用していたシステムが、AWSのマネージドサービスを使うことで簡単に実現できるという話なのですが、特にServerlessに力を入れてる感じがしました。Lambdaの話がすごく多い。先日Serverless confで「サーバーを叩き割る」というパフォーマンスで話題になった、AWSのTim Wagnerも来てましたしね。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;This is how you go &lt;a href=&#34;https://twitter.com/hashtag/serverless?src=hash&#34;&gt;#serverless&lt;/a&gt; – @timalleneagner &lt;a href=&#34;https://t.co/SpllWVz76u&#34;&gt;pic.twitter.com/SpllWVz76u&lt;/a&gt;&lt;/p&gt;&amp;mdash; Lars Trieloff (@trieloff) &lt;a href=&#34;https://twitter.com/trieloff/status/735839549729996800&#34;&gt;2016年5月26日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Lambda、簡単なジョブや解析処理であればEC2立てずとも実行が可能になるわけで、いわゆるアプリケーションが担っていた仕事、これまでサーバーを立てなければならなかった部分がごっそり持っていかれることになる。Lambda自体は発表が2014年なのでそれなりに経っているけれど、Pythonに対応したあたりから実用される動きが大きくなってきたような感触があります。とはいえLambdaだけですべて済むというわけでもなく、例えばそのエンドポイントとしてAPI Gatewayが使えたり、SNSと連携してメッセージのプッシュを行ったりと、これまで連綿と作られてきたAWS各サービスがあって、それらを繋げる部分に位置することで真価を発揮している。そう考えるとLambdaが単体ですごいというより、AWS全体を見回したときに足りなかった1ピースを埋めてくれたような印象がある。&lt;/p&gt;

&lt;h2 id=&#34;ansible:95a87fd1a47a72aa1bf662cfd38baf72&#34;&gt;Ansible&lt;/h2&gt;

&lt;p&gt;そこに来てAnsible、というのはどういう位置付けになるのか。Ansibleの役割はServerlessとは対極、基本的にはサーバーの設定管理というところになります。仮にシステムをServerlessに置き換えていくのだとしたら、ひょっとしたら徐々に要らなくなってくるツールなのかもと思ったり。無論、AnsibleにもAWSモジュールがあるけれど、端々まで対応しているというわけではなく、AWSの設定を管理するのであればCloudFormationやTerraformを使う方が現実的かなという気がします（AWS Summit内で、CloudFormationにLambdaや周辺サービスの設定を書いて、サーバーレスのマイクロサービスをパッケージングする手法が紹介されてました。Lambdaのコードもそのjsonの中に含むので「つらそう」という声は多かったですが）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.ansible.com/ansible/list_of_cloud_modules.html&#34;&gt;Cloud Modules — Ansible Documentation&lt;/a&gt;v&lt;/p&gt;

&lt;p&gt;まぁ、とはいえ現状を鑑みてサーバーが一切なくなるというのはまずないとも思います。AWS Summitでの趣旨も別にサーバー全廃しろよと言ってるわけではなくて、Lambdaに肩代わりさせることでコストダウンしたり効率化が図れる部分が大きいよという点。だからポイントとしてはAWSのマネージドサービスを上手く使えないかというのが設計上第一に来て、困難な部分はEC2（やオンプレのサーバー）を使用するという発想の転換にあるのかと。&lt;/p&gt;

&lt;p&gt;そしていずれにせよas codeであることが求められる。AWS上のマネージドサービスはもはや「インフラ」という言葉で括るにはふさわしくないように思いますが、システムおあらゆるレイヤーをcodeで管理し、アプリケーションと同じCI/CDのサイクルに載せてDevOpsで回していくことはもはや必須になる。そこで使うツールには選択の余地があって、Ansibleでもある程度AWSレイヤーをまかなえたりするし、一方でマネージドサービスはTerraformなどを使う方法もある。そのあたりの匙加減が難しい。&lt;/p&gt;

&lt;p&gt;さらに言えば、まだツールが充実しきったとも言えない気がするんですよね。GitHubへのcommitをトリガーとしてサーバーの設定変更まで行うような、インフラCIの手法はまだ確立しきったとは言い難い（そういえばCodePipelineにOpsWorksが対応しましたね）し、Serverspecのようなインフラテストツールもより広がる必要がある。インフラの考え方はここ数年どんどん変化してますけど、まだまだ本格的な動きはこれからなんじゃないかという気がしています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>インフラエンジニアなので第5回ペパボテックカンファレンス行ってきた</title>
      <link>https://chroju.github.io/blog/2016/05/14/pbtech_infra_engineers/</link>
      <pubDate>Sat, 14 May 2016 21:58:32 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/05/14/pbtech_infra_engineers/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://pepabo.connpass.com/event/30348/&#34;&gt;第5回ペパボテックカンファレンス〜インフラエンジニア大特集〜 - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そもそもインフラ向けのイベントって相対的にはやっぱ少ない気がするし、かのペパボさん主催のイベントだし行く以外の選択肢はなかった。アプリ系のイベントだとだいたいが「Pythonエンジニア」みたいに言語ごとだったり、フレームワークまでテーマが絞られたりするなか、「インフラエンジニア」ってよくよく考えたらめっちゃ広いよねって感じだけど、実際の職務もまぁそんな感じだし、今回の話もだいぶ話題としては多岐に渡っていました。&lt;/p&gt;

&lt;p&gt;自分の最近の関心事としては社内にAnsible導入させたいなと思いながら格闘しているのと、もっとインフラの低レイヤーの知識深めたいなと思っているのとがあるのだけど、その両面について話が聞けてとてもよかったです。&lt;/p&gt;

&lt;h2 id=&#34;インフラのコード管理:85286d0ca73ff0f2087672f05a11ae61&#34;&gt;インフラのコード管理&lt;/h2&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;c2be628f92684309baceb739c9d688a8&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a54d0ad6100a405497f88b93385c2e3d&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;前者はdrone.io上にdocker-on-dockerでインフラCI環境を作っているという話。どうもdrone.ioだとベースイメージのバージョンが切り替えられないらしい。自分は過去にAnsibleとServerspecによるCIをCircleCIで走らせる構成を作ったことがあるのだけど、これを社内で導入するなら確かにこうなるんだろうなぁという感じだった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chroju.github.io/blog/2015/11/18/ansible-serverspec-circle-ci/&#34;&gt;Ansible + Serverspec + Docker + circle ci によるインフラCI · the world as code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;後者はあるある、というかAnsible導入検討のなかで自分としても浮かんでいた課題で、コード管理しててもそれを更新する「人手」が必ずしもパーフェクトではないので、コードと実機状態の乖離が出る問題。解決策としてはPuppet、Serverspecと実機の照合を毎日夜間に回して、差異にすぐ気づけるようにするというものでした。わかる。すげーわかる。懇親会でも話していたのだけど、sshして作業しちゃいたいのグッと我慢してPuppetちゃんと書き換えるの大事。個人的にはPuppetとServerspec両方回すのもなかなかしんどそうなので、Serverspec単体を構成変更監視みたいに使うのでもいいかなと思う。&lt;/p&gt;

&lt;p&gt;他に印象的だったのは開発側もPuppetを触る、つまり自らインフラの設定変更に手を出せるという話。現状弊社だと、フォルダ1つ掘るのでも、ファイルのコピーでも開発から依頼を受けて運用でsshするみたいなテンション上がらない運用なので、開発にコードでそれを書いてもらえるのはとても効率的に思える。インフラをコード化する一番の意味って、開発と運用という垣根を超えて、インフラを語る共通言語を技術者全体にもたらせることなのだろうなと。まさにDevOps。&lt;/p&gt;

&lt;p&gt;あとそういえば「Infrastructure as Code」って言葉を聞かなかった。単語として長いなぁとは思ってたから自分も今度から「インフラのコード化」って言います。&lt;/p&gt;

&lt;h2 id=&#34;低レイヤー:85286d0ca73ff0f2087672f05a11ae61&#34;&gt;低レイヤー&lt;/h2&gt;

&lt;p&gt;スライドまだ出ていないみたいだけど、ext4からxfsへの移行検討にあたって、結構ガッツリとベンチマークテストやったというLTがありました。クラウド全盛な今日このごろでも足回りは結局物理なんですよというのはまさにその通りで、自分は全然このへんの知識がないのだけどちゃんとやらなきゃなと。。。反省。。。&lt;/p&gt;

&lt;p&gt;そして何よりペパボのプライベートクラウド&amp;rdquo;Nyah&amp;rdquo;の話ですねー。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5786d472901a4758a005deeb670746e2&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;いやもうすげーわー。あこがれるわー。OpenStack使うにあたり社内別グループ会社に経験者がいたので知見を聴けたとか、一気に5バージョン飛ばして最新バージョンへ追随させるとか、技術に対する姿勢が会社も個人もとても前向きで素敵な話だった。真似しようとして簡単に真似できる話ではないけれど、姿勢や方針については本当に参考になった。&lt;/p&gt;

&lt;h2 id=&#34;懇親会:85286d0ca73ff0f2087672f05a11ae61&#34;&gt;懇親会&lt;/h2&gt;

&lt;p&gt;インド人完全無視カレーおいしかった。トムヤムクン入れてるのか。なるほど。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://calamel.jp/curry&#34;&gt;インド人完全無視カレー | インド人のアドバイスを完全無視！－カラメル&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ペパボの方と実際に話せてよかったです。なんか新しいもの社内に導入したり、広げていったりとなると「結局コミュニケーションだよね」という結論に至ったのでそこは頑張るしかないのかなぁ超ニガテ。あとKPIちゃんと出して比較しないと響かなかったりするってのは確かになという感じなので、自分も腐らず頑張らなきゃなと思い新たにしました。スーパーエンジニアすげーすげーと言っても始まらんし、やりたいならちゃんと自分でやらなきゃなーと。いやー行った甲斐がありました。ありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#qpstudy 響け！アラートコール！行ってきた</title>
      <link>https://chroju.github.io/blog/2016/04/24/qpstudy_alert_call/</link>
      <pubDate>Sun, 24 Apr 2016 22:28:32 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/04/24/qpstudy_alert_call/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.zusaar.com/event/12327003&#34;&gt;#qpstudy 2016.04 響け！アラートコール！　本編 一般枠 on Zusaar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちら参加してきました。アラートコール、というか監視運用をテーマとした勉強会。qpstudyことキューピー3分インフラクッキングについては、数少ないインフラ系の継続的勉強会ということで、気になってはいましたが初参加できました。&lt;/p&gt;

&lt;p&gt;以前にも障害対応をテーマとした勉強会に行ったことがありますが、この界隈は闇が深い。。以前のそのイベントも今回のイベントも、いずれも参加者が互いの経験を話し合う場があったわけですが、やっぱりそういうのが一番効果あるかもなぁという気がしました。特に監視運用についてはイベント内でも触れられた通りノウハウや勘に頼っている部分も大きく、他社がどういうノウハウに頼っているのか？というのはとても気になるところ。例えばサービス運用全般のガイドラインとしてITILがあるように、客観的な基準があればいいわけなんですが。&lt;/p&gt;

&lt;p&gt;で、監視の基準。これは確かにもう少し考え直した方がいいのかもなと思った次第。例えばメトリック監視ってよくありますけど、仮にCPUが90%使用率達したとして、それがすぐに何か異常に繋がるわけではないのですよね。だから「障害」として扱うべきは単純な閾値超過やエラーではなくて、システム的な動作不全であるはず。それと障害予兆にあたるようなワーニングメッセージは別で扱うべきであって、何が本当に必要な監視、アラートなのかというのは、どの会社でも洗い直すと結構ボロが出てきそうな気がしました。イベントではMakerelのような監視系のSaaSがフレームワークを提供してほしいという声もあったり。あとはAIによる判別。確かにメトリックやログの状態を機械学習させれば、障害予兆をAIで判断させることもできそうな気がします。&lt;/p&gt;

&lt;p&gt;今年度に入ってからの自分の社内ミッションは、わりと自動化に重きが置かれているのですけど、イベントでは「自動化は目的ではなく手段」という話もあり。確かに自動化自体が楽しい作業なのでついついなんでも手を出すけど、何のために、またどういった効果があると考えられるから自動化するのか、あるいは自動化の手段には何を用いるのかというところはもうちょっと考えたい。「SaaSを使わない理由って何？」って話もあったけど、そういえばそうだなと。まぁ外部にメトリックやIP持たせるのが嫌、という理由で弊社の場合は通らないかもなぁという気もしますけど、SaaSの導入だって要は監視システムをDIYするプロセスを自動化しているわけで。一考には値するはず。&lt;/p&gt;

&lt;p&gt;今回の勉強会はなにか結論をバーン！と提示してくれるものではなく、考えるきっかけを与えてくれるような形式だったので、明日以降ちゃんと社内に持って帰って再検討しようと思います。qpstudy、楽しいので次回もぜひ行きたいところ。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3aaec6a7751c4245a2951a688eaa5543&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/CI5WFlfnIN2Pyf&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/zembutsu/is-it-wront-to-try-to-automate&#34; title=&#34;Re: 運用に自動化を求めるのは間違っているだろうか&#34; target=&#34;_blank&#34;&gt;Re: 運用に自動化を求めるのは間違っているだろうか&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/zembutsu&#34; target=&#34;_blank&#34;&gt;Masahito Zembutsu&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonに入門している</title>
      <link>https://chroju.github.io/blog/2016/03/28/entry-python/</link>
      <pubDate>Mon, 28 Mar 2016 22:29:39 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/03/28/entry-python/</guid>
      <description>

&lt;h2 id=&#34;pythonを学び始める:99f750581f26cd55e99e535cecc3c37d&#34;&gt;Pythonを学び始める&lt;/h2&gt;

&lt;p&gt;今年の &lt;a href=&#34;http://chroju.github.io/blog/2016/01/03/manifesto-2016/&#34;&gt;行動規範&lt;/a&gt; でも書いた通り、Pythonに入門している。きっかけはAWS LambdaがPython対応しており、またAnsibleもPythonで書かれているということで、Pythonの読み書きが出来た方が今後良さそうだなと思うに至った。これまでRubyをよく書いていたけど、Linuxにデフォルトで入っているのはPythonやPerlという現実的な問題もある。&lt;/p&gt;

&lt;p&gt;今までにやったこととしては取りあえず本を2冊読んだのと、一昨日は &lt;a href=&#34;http://python-nyumon.connpass.com/event/26257/&#34;&gt;入門者向けのPythonハンズオン&lt;/a&gt; に行ったりしてみた。基礎文法はだいたいさらって、requestsのようなポピュラーなライブラリは試してみた程度。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117534/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51SI%2BAszQwL._SL160_.jpg&#34; alt=&#34;Pythonチュートリアル 第3版&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117534/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Pythonチュートリアル 第3版&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.03.28&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;Guido van Rossum &lt;br /&gt;オライリージャパン &lt;br /&gt;売り上げランキング: 24,079&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117534/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ZR7WZOU/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51moRIhvzhL._SL160_.jpg&#34; alt=&#34;Pythonエンジニア養成読本［いまどきの開発ノウハウ満載！］&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ZR7WZOU/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Pythonエンジニア養成読本［いまどきの開発ノウハウ満載！］&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.03.28&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;技術評論社 (2015-06-16)&lt;br /&gt;売り上げランキング: 42,458&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ZR7WZOU/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;なおPythonチュートリアルはつい先日改版が出たのでそっちをリンクしてます。自分が買ったのは先月です（白目）&lt;/p&gt;

&lt;h2 id=&#34;pythonに対する小並感:99f750581f26cd55e99e535cecc3c37d&#34;&gt;Pythonに対する小並感&lt;/h2&gt;

&lt;p&gt;自分はアプリ屋ではないので言語に対する知見は広くないのだけど、なんとなく感じているのはこんなところ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PerlのTMTOWTDIに対して&lt;a href=&#34;http://qiita.com/IshitaTakeshi/items/e4145921c8dbf7ba57ef#there-should-be-one---and-preferably-only-one---obvious-way-to-do-it&#34;&gt;&amp;ldquo;There should be one&amp;rdquo;&lt;/a&gt;という考え方が明確で好き。&lt;/li&gt;
&lt;li&gt;難読な記法というのが今のところあまりない。発想した通りに書いてだいたい動く気がする。&lt;/li&gt;
&lt;li&gt;インデントでブロック形成するのはcoding styleの戦争が起きなくていい。

&lt;ul&gt;
&lt;li&gt;ただし自分はインデント＝スペース2つ派だった。Pythonは4つの方が確かに見やすいけど。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;バージョン2.x vs 3.xの話、外から聞いてはいたけどなにこれ面倒。&lt;/li&gt;
&lt;li&gt;新参としては3.x学びたいけど、AWS Lambdaが2.7対応だし両方押さえようとしている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyvenv&lt;/code&gt;の環境の隔離の仕方がシンプルで好き。&lt;code&gt;pyenv&lt;/code&gt;というのもあって紛らわしいが。&lt;/li&gt;
&lt;li&gt;というか全体的にシンプルなコンセプトで作られている印象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.xと3.xの両輪を回さなくてはならないことを除いては、全体的にはシンプルだし書きやすくてよいなという感じがする。インフラ自動化便利ツールもそろそろなにか書いてみたい。&lt;/p&gt;

&lt;h2 id=&#34;新しい言語の学習方法:99f750581f26cd55e99e535cecc3c37d&#34;&gt;新しい言語の学習方法&lt;/h2&gt;

&lt;p&gt;あと言語学習ではいままで「とりあえず書く」というのを手法にしていたけど、複数言語を学んでみて徐々にわかってきた勘所が2点ある。&lt;/p&gt;

&lt;h3 id=&#34;文法で押さえるべきポイントは決まっている:99f750581f26cd55e99e535cecc3c37d&#34;&gt;文法で押さえるべきポイントは決まっている&lt;/h3&gt;

&lt;p&gt;例えば&lt;code&gt;elif&lt;/code&gt;か&lt;code&gt;elsif&lt;/code&gt;か&lt;code&gt;else if&lt;/code&gt;かとか、false判定されるのはnullなのか&lt;code&gt;0&lt;/code&gt;なのか&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;なのかとか、複数言語を並行して遣うときに迷うポイントはわりと決まっているので、そこさえ押さえればとりあえず書ける、というのがある気がした。&lt;/p&gt;

&lt;p&gt;チートシートを自分用に作るのも漫然と端から文法を並べ立てるのではなく、こういうポイントに限ったものにすると効率がよさそう。&lt;/p&gt;

&lt;h3 id=&#34;読むのも勉強:99f750581f26cd55e99e535cecc3c37d&#34;&gt;読むのも勉強&lt;/h3&gt;

&lt;p&gt;書くのではなく読むのも勉強。よく言われることではあるけれど、これまであまり意識していなかった。冒頭に挙げた通り、PythonではLambdaとAnsibleという明確にきっかけとなったツールが存在しているので、これらのコードをしばらく読んでものにしてみたいと思う。&lt;/p&gt;

&lt;p&gt;あと個人的には最近インフラ界隈でもわりとgolangが話題で気になっているけど、それはまたおいおい（実はgo製OSSを修正して使いたくて、ちょっとだけかじってはいる）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Personal Knowledge Base 2</title>
      <link>https://chroju.github.io/blog/2016/03/17/personal-knowledge-base-2/</link>
      <pubDate>Thu, 17 Mar 2016 22:09:45 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/03/17/personal-knowledge-base-2/</guid>
      <description>

&lt;p&gt;年初に&lt;a href=&#34;http://chroju.github.io/blog/2016/01/24/personal-knowledge-base/&#34;&gt;Personal Knowledge Base · the world as code&lt;/a&gt;という記事を上げて、メモや知識の管理をする環境作りを進めていたのだけど、最近ようやく固まってきた。結論としては &lt;strong&gt;&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt;&lt;/strong&gt; と &lt;strong&gt;&lt;a href=&#34;https://github.com/gollum/gollum&#34;&gt;gollum&lt;/a&gt;&lt;/strong&gt; を使っている。&lt;/p&gt;

&lt;h2 id=&#34;trello:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;Trello&lt;/h2&gt;

&lt;p&gt;近年よく名前を訊く、Kanban形式でのビジュアライズされたタスク管理を可能とするツール。タスク管理向けなので当初は目を向けてなかったのだけど、よくよく冷静に考えてみるとメモ管理にかなり適してそうだったので採用。&lt;/p&gt;

&lt;p&gt;結果として、タスクに限らず、数多の情報を整理するツールとしてとても使いやすい。ポイントはいくつか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メモがカードの形で表示されて、パラパラと繰って一覧できる。&lt;/li&gt;
&lt;li&gt;メモにラベルを付けると色で表示されるので視認しやすい。&lt;/li&gt;
&lt;li&gt;全文検索が可能。&lt;/li&gt;
&lt;li&gt;エクスポート機能あり（json）。&lt;/li&gt;
&lt;li&gt;descriptionをMarkdownで書くことができる。&lt;/li&gt;
&lt;li&gt;Android、iOSいずれもアプリあり。IFTTTも対応。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;単なるテキストメモを保存する用途であればEvernoteの上位互換だと感じる。何よりも画面全体にメモを並べることができる一覧性の高さがいい。&lt;/p&gt;

&lt;p&gt;今の自分は&lt;a href=&#34;http://pileofindexcards.org/wiki/index.php?title=%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8&#34;&gt;PoIC&lt;/a&gt;のような使い方をしていて、とにかくメモを書き溜めては記録、発見、参照の3つのリストに取りあえず分けて、暇なときにつらつら眺めたりしている。分類の仕方はまだ模索中なので、今後変わるかもしれない。とにかく柔軟に使えるのがいい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/choiyaki/20140920/1411170874&#34;&gt;「Trello」というアプリがおもしろい - iPhoneと本と数学となんやかんやと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://victorsavkin.com/post/94468744151/using-trello-for-your-personal-productivity-system&#34;&gt;Using Trello for Your Personal Productivity System | Victor Savkin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GTDは「高度」の管理用といわゆるToDoの管理用に2つボードを設けて使ってみている。プライベートのタスクだけなのでそれほど厳密な期限管理などは必要ないし、これで十分。&lt;/p&gt;

&lt;h2 id=&#34;gollum:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;gollum&lt;/h2&gt;

&lt;p&gt;散発的な思いつきをTrelloに入れる一方、体系的な知識管理はgollumを使う。GitHub Wikiの機能だけが単独でオープンソース化されているもので、さくらクラウドの2万円クーポンがあったのでとりあえずサーバー1台立ててホストしている。&lt;/p&gt;

&lt;p&gt;技術的なメモ書き、読書メモ、あとは趣味で行く美術展の記録などはすべてここに溜めている。Wikiだと散逸的にページを作ってしまいがちなので、トップから最大2階層までの作成と定め、1階層目は各技術ジャンルのページ、2階層目に詳細記事として配置した。こうして体系立てたメモ環境を作ってみると、自分のスキルマップが出来上がっていくようで面白い。&lt;/p&gt;

&lt;p&gt;gollumを建てるのに、技術的に難しいことはほとんどない。中身はSinatraとgitなのでカスタマイズもしやすく、とりあえず安易な認証機能ぐらいは追加してみた。作成した記事は個別にMarkdownファイルになってgollumのディレクトリ直下に直置きされるのだが、これはディレクトリを切って&lt;code&gt;git submodule&lt;/code&gt;としてGitHub上に上げ、個別管理したいかなと思っている。&lt;/p&gt;

&lt;h2 id=&#34;ナレッジ管理の必要性:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;ナレッジ管理の必要性&lt;/h2&gt;

&lt;p&gt;ナレッジ管理が必要である、という潮流は昨今高まっているような気はしていて、Qiitaやesa.ioの登場あたりから特にそういう話はよく聞く気がする。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/2R3Nk0tCAKPUnY&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/takoratta/ss-59111661&#34; title=&#34;情報共有から始めるチーム開発とキャリア戦略&#34; target=&#34;_blank&#34;&gt;情報共有から始めるチーム開発とキャリア戦略&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;//www.slideshare.net/takoratta&#34;&gt;Takuya Oikawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;個人であれ組織であれ、我々の仕事は（まぁ他の職種も同じだとは思うが）ナレッジを溜めて活用していくことにあるので、こういう取り組みは何がしか進めるべきだろうと思う。上記スライドにもあるように、暗黙知を形式化していくことで自分内でも、社内やコミュニティ内でも知識を記憶、伝達してさらに深めることが可能になる。&lt;/p&gt;

&lt;p&gt;とはいえ昨今はツールの乱立はあって、ブログとQiitaの使い分けだったり、個人的なメモをどうするかだったり、やっぱり迷うことも多い。そこはある程度自分なりの使い方を定めておかないと、後々散逸したメモの山に途方に暮れたりはしそう。あと、単純に良いツールがあったとしても、メモする習慣をつけておかないと意味がないし、どちらかといえばそっちが大事なんではという気もする。些細なことでも漫然と調べず、記録するクセをこの2ツールで付けていこうと思う。&lt;/p&gt;

&lt;p&gt;以下、他に比較検討したツール群を載せておく。&lt;/p&gt;

&lt;h3 id=&#34;faqt-https-faqt-co:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;&lt;a href=&#34;https://faqt.co/&#34;&gt;FAQT&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;比較した中ではだいぶ惹かれた。一時はこれにしようかと思った。&lt;/li&gt;
&lt;li&gt;明確にKnowledge baseを唄ったサービス。Markdownで書いたメモがカード形式で表示できる。&lt;/li&gt;
&lt;li&gt;Markdownプレビューが結構好みだし、外観はとてもよかった。&lt;/li&gt;
&lt;li&gt;まだ立ち上がったばかりで、将来性はちょっと不安。&lt;/li&gt;
&lt;li&gt;全文検索の不在が決め手になり不採用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;simplenote:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;Simplenote&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;定番メモサービス。&lt;/li&gt;
&lt;li&gt;Markdown対応がほぼ皆無なので不採用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;quiver-http-happenapps-com-quiver:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;&lt;a href=&#34;http://happenapps.com/#quiver&#34;&gt;Quiver&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;最近少し話題になったMac用ノートアプリ。&lt;/li&gt;
&lt;li&gt;タグとノートブックで分類するEvernoteっぽいMarkdownノート。&lt;/li&gt;
&lt;li&gt;データファイルをDropboxに置いてクラウド同期が可能。&lt;/li&gt;
&lt;li&gt;外観がクールだし、結構使い勝手はよかった。&lt;/li&gt;
&lt;li&gt;とはいえMacでしか使えないので断念（持ち歩きPCがLinuxなので）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/the-personal-knowledge-management-saga/the-personal-knowledge-management-saga-part-1-ae9bdc575ded#.9xvxjvkkz&#34;&gt;The Personal Knowledge Management Saga: #1 — The Personal Knowledge Management Saga — Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=7697050&#34;&gt;Ask HN: What do you use to organize your knowledge? | Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=8806950&#34;&gt;Ask HN: How do you manage/organize information and knowledge in your life? | Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://marcusvorwaller.com/blog/2015/12/14/personal-knowledgebases/&#34;&gt;The Sad State of Personal Knowledgebases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JAWS DAYS 2016に行ってきた</title>
      <link>https://chroju.github.io/blog/2016/03/13/jaws_days_2016/</link>
      <pubDate>Sun, 13 Mar 2016 11:03:24 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/03/13/jaws_days_2016/</guid>
      <description>

&lt;p&gt;昨年に続き。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chroju.github.io/blog/2015/03/22/jaws-days-2015/&#34;&gt;JAWS DAYS 2015でAWS童貞捨ててきた · the world as code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;昨年JAWS DAYSのハンズオンでAWSアカウント作ったので、これでAWS歴丸1年。それにしては自分の力がしょっぱすぎて嫌になる。もっと活用したい。ただ今回「わからない」というセッションはなかったので（技術メインじゃないセッションをいくつか入れてたのは置いておいて）、それなりに知識はついているのかなぁという実感はできた。&lt;/p&gt;

&lt;p&gt;サーバーレスアーキテクチャ、クラウドネイティブという言葉が極めて一般的になったなというのが今回の感想。事例を聞いていてもEC2並べてなんかやりますというのは当然ながらほとんどなくて、だいたいがLambda、Kinesis、API GatewayといったAWSリソースを繋ぎ合わせることでアーキテクチャを作り出している。もう従来的な言葉で言う「インフラ」というものは存在しなくなってしまった。VMwareやXenの時代というのか、あくまでサーバーという実体は変わらず、それの扱い方が変わるというだけの変化だったが、AWSがもたらしているのはサーバーそのものの消失。システムのアーキテクチャ自体の転換。何度かブログ内でも繰り返しているが、この全く新しい領域で勝負するにあたっては、アプリエンジニアもインフラエンジニアも関係ない。こういった状況下で自分が勝負できるとしたら、Opsになるのかなと思う。これまでインフラ屋が担ってきたOpsのスキルを、AWSへ適用していく。もちろん、コードをもっと書けるようにならなくてはならないといった、本来的な問題もあるが。&lt;/p&gt;

&lt;p&gt;また今回全体を通して「コミュニティへの参画」というのが強調されていたようにも思う。最初のJAWS-UG代表である今春氏のセッションでも、Increments及川氏のセッションでも、社外のコミュニティに参加することの意義が説かれた。自分はお世辞にも積極参加ができているとは言いがたい状態なので、とても耳が痛い。&lt;/p&gt;

&lt;h2 id=&#34;参加セッション:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;参加セッション&lt;/h2&gt;

&lt;h3 id=&#34;jaws-ugこれまでとこれから-キーノート:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;JAWS-UGこれまでとこれから（キーノート）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;先述した今春氏のキーノート。&lt;/li&gt;
&lt;li&gt;京セラドームでもイベントを開いたことがあるというのはちょっと驚き。思い切ってますなぁ。&lt;/li&gt;
&lt;li&gt;会場に出来る会社様募集中らしい。企業が無償で場所提供してくれる業界状況というのも非常に恵まれている。というか、そういう文化圏にいて良かったと思う。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;amimoto-サーバーレスアーキテクチャ:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;AMIMOTO × サーバーレスアーキテクチャ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;デジタルキューブ堀家氏。&lt;/li&gt;
&lt;li&gt;先述の通り。サービスを疎結合にする。No EC2。&lt;/li&gt;
&lt;li&gt;モバイル開発者じゃないからスルーしてたけど、mobile hub面白そう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/serverless/serverless&#34;&gt;Serverless Framework&lt;/a&gt;気になる。
説明のあった「Lambdaをローカルからinvokeできる」ぐらいならAWS CLIでいいんだけど、他にも活用できそう。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;外よりも中からの攻撃-事故がヤバイ-今やるべきクラウドセキュリティ対策:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;外よりも中からの攻撃・事故がヤバイ、今やるべきクラウドセキュリティ対策&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;cloudpackのアイレット齊藤氏。今回一番ためになった。&lt;/li&gt;
&lt;li&gt;セキュリティに終わりはない、完璧はない、だからきちんと監査して透明性を確保して、リスクを受け入れる。&lt;/li&gt;
&lt;li&gt;監査は目的ではない。むしろ時代に追いつけてない監査基準もあったり。&lt;/li&gt;
&lt;li&gt;パスワードは脆弱だからSAMLとKerberosでAD連携してSSOとかカッコイイ。&lt;/li&gt;
&lt;li&gt;cloudpackでやっていることは公開されているらしいので後でチェック。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deep-dive-aws-iot:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;[Deep Dive] AWS IoT&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;mobile hubと同じく敬遠してたIoTだけどなんかやれそうな気になった。&lt;/li&gt;
&lt;li&gt;とりあえずラズパイ入手かな。あとPython頑張る。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;金融クラウド-fintech最新動向-awsで金融のイノベーション:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;金融クラウド＆FINTECH最新動向　～AWSで金融のイノベーション！&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AWS、MUFG、ウェルスナビの共同セッション。&lt;/li&gt;
&lt;li&gt;MUFGがハッカソンとかやってるんだというのは全然知らなかったし意外オブ意外。
時代の潮目が確実に変わってきてるのかなと。&lt;/li&gt;
&lt;li&gt;銀行システム、基幹系は今まで通り守らなくてはならない。フロントはスピードを速める必要があると。
その意味でSIerは失くならないと個人的には思っている。少なくとも金融系は。&lt;/li&gt;
&lt;li&gt;ウェルスナビ、これまで米富裕層に提供していたような投資診断をモバイル向けで一般にも提供すると。&lt;/li&gt;
&lt;li&gt;ITの役割が単なる自動化や効率化じゃなくて、新たな価値、市場を創造することにある。そういう仕事したい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;エンジニアのキャリアとアウトプットを意識した成長戦略:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;エンジニアのキャリアとアウトプットを意識した成長戦略&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increments及川氏。&lt;/li&gt;
&lt;li&gt;話題になったIncrements入社の理由が「誰もやりそうにないから、差別化戦略として」ってのカッコよすぎた。&lt;/li&gt;
&lt;li&gt;及川氏の最初のキャリアであるDECという会社、不勉強につき初耳。紆余曲折の末に現在はhpの一部か。。。&lt;/li&gt;
&lt;li&gt;Googleの社是？ &amp;ldquo;Share everything you can&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Qiitaにもっと投稿しようと思いました（こなみかん）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ブログをHugoに移行した</title>
      <link>https://chroju.github.io/blog/2016/02/18/convert-to-hugo/</link>
      <pubDate>Thu, 18 Feb 2016 20:51:20 +0900</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/02/18/convert-to-hugo/</guid>
      <description>

&lt;p&gt;すでに流行りは一巡しているような気もするが、Hugoを導入してみた。もともと自宅iMacにOctopressを置いてブログ作業はしていたのだが、外でもブログ更新ぐらいできた方がいいなぁと考え、クラウド上の開発用端末にレポジトリ移しちゃおうということになり、じゃあついでだからと移行してみた。Go自体は最近使っているオープンソースがそれであったという試しがあり、すでに導入は終えていた（ただし書けない）。&lt;/p&gt;

&lt;p&gt;随所で語られているように移行自体は大したものではなく、Markdownでいずれも互換性があるし、Front MatterもYAML形式であれば同一。Hugoレポジトリの&lt;code&gt;content/post&lt;/code&gt;配下に記事ファイルを突っ込めば移行としてはおしまい。多少の差異については以下の記事が詳しい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した | SOTA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただ自分の場合はパーマリンクを前ブログから保てていない。というのも、Octopressで使っていた記事ファイル名が&lt;code&gt;YYYY-MM-DD-foobar.markdown&lt;/code&gt;の形だったのに対し、今回は記事のパーマリンクを&lt;code&gt;config.toml&lt;/code&gt;で以下のように設定してしまっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[permalinks]
    post = &amp;quot;/blog/:year/:month/:day/:filename/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;従って&lt;code&gt;/blog/YYYY/MM/DD/YYYY-MM-DD-foobar/&lt;/code&gt;という歪なパーマリンクになってしまっている記事がいくつかある。ほとんどの記事は&lt;code&gt;foobar.markdown&lt;/code&gt;に直したのだが、はてなブログ時代から移植した記事は&lt;code&gt;YYYY-MM-DD-post.markdown&lt;/code&gt;という適当なパーマリンクにしていたので、一括して直すことができなかった。時間を見てこれらも意味のあるURLに直すつもり。&lt;/p&gt;

&lt;p&gt;記事を公開する流れは以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 記事作成
$ hugo new post/title.md
$ vi content/post/title.md
# ビルド
$ hugo
# commit
$ cd public
$ git add .
$ git commit -m &amp;quot;new post&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hugo&lt;/code&gt;コマンドでビルドすると&lt;code&gt;public&lt;/code&gt;フォルダにサイト構成全体が吐かれるので、それをそのまま&lt;code&gt;git push&lt;/code&gt;して終わり。ただ実際にバージョン管理したいのは&lt;code&gt;public&lt;/code&gt;というより、設定ファイルや元のMarkdownが詰まったHugoのレポジトリ全体ではないかという気もするので、後々以下の記事のようにレポジトリ全体で&lt;code&gt;git push&lt;/code&gt;してCIでビルドさせる形に変えたいと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hori-ryota.com/blog/create-blog-with-hugo-and-circleci/&#34;&gt;HugoとCircleCIでGitHub PagesにBlogを公開してみた - Hori Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なおテーマはとても悩みどころで、しばらくコロコロ変わるかもしれない。というか自分でカスタマイズしたいけどCSSなんて今更書けるのか。。。&lt;/p&gt;

&lt;h2 id=&#34;追記-2016-02-22-23-50:f9b1285b375e2fa831a443cf9e131380&#34;&gt;（追記 2016-02-22 23:50）&lt;/h2&gt;

&lt;p&gt;フィードのファイルパスがデフォルトだと&lt;code&gt;index.xml&lt;/code&gt;になってしまうので、Octopressから変更がないよう&lt;code&gt;atom.xml&lt;/code&gt;に直した。&lt;code&gt;config.toml&lt;/code&gt;で指定ができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;rssuri = &amp;quot;atom.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://discuss.gohugo.io/t/what-is-rsslink-exactly/1195/2&#34;&gt;What is {{ .RSSlink }}, exactly? - support - Hugo Discussion&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;その他参考記事:f9b1285b375e2fa831a443cf9e131380&#34;&gt;その他参考記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/syui/items/869538099551f24acbbf&#34;&gt;HUGOを使ってサイトを立ち上げる方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hugo - Hosting on GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ops JAWS#3に行ってきた</title>
      <link>https://chroju.github.io/blog/2016/01/30/ops-jaws-3/</link>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://chroju.github.io/blog/2016/01/30/ops-jaws-3/</guid>
      <description>&lt;p&gt;その名の通り運用管理系の話題を中心としたAWSユーザーグループです。ハンズオンもあるということで行ってきた。&lt;/p&gt;

&lt;p&gt;メインとなったのはconfig rulesのハンズオン。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/g0o2kIUtI0yKmw&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/okochang/opsjaws-20160128&#34; title=&#34;OpsJAWS 20160128&#34; target=&#34;_blank&#34;&gt;OpsJAWS 20160128&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/okochang&#34; target=&#34;_blank&#34;&gt;hideaki yanase&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;AWSリソース、使っているうちに無秩序になっていき、ルールの統一がはかれなくなったり、全体像が見えづらくなったりということはありがちですが、config rulesを使ってもうシステム的に制御しちゃいましょうというテーマ。例えばCloudTrailが有効化されていない場合にアラートを上げる、とか。監視結果が変化すると、それをトリガーにLambdaをinvokeしたりもできるので、それこそなんでもできる感じ。&lt;/p&gt;

&lt;p&gt;やってみて気付いたけど、やっぱり自分は運用が好きなのかもしれない。システムによって、本来不確かであったり信用性に劣っていたりするはずの人間の動作を制御する、というのが好きなんだろうなと。SEやってた頃は運用の制御はExcel資料が元になることが多くて、それ自体は特に楽しくなかったのだけど、システム的に作りこんでいくのはわくわくする。これはいい気付きだったし、次回も是非参加してみたい。&lt;/p&gt;

&lt;p&gt;問題としてはやはり、Lambda Functionを書くのにpythonかnode.jsを使う必要がある（いまさらJavaってのもなぁ）ので、次回参加するのであればそれまでにpythonをある程度やっておかねばなぁというところ。&lt;/p&gt;

&lt;p&gt;その他、昨年とてもおもしろく読ませていただいたSDの特集『なぜ「運用でカバー」がダメなのか』を書かれた運用設計ラボの波多野氏がいらっしゃっていたりして、個人的にはテンション上がったりもしました。「運用でカバー」をググるとトップに出てくる、なんだか好評を得てしまった拙記事はこちら（あえて移行前ブログを貼るアレ）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chroju89.hatenablog.jp/entry/2015/02/11/164926&#34;&gt;Software Design 2015年2月号『なぜ「運用でカバー」がダメなのか』読了 - そのねこが学ぶとき&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>