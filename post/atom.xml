<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on the world as code</title>
    <link>http://chroju.github.io/post/</link>
    <description>Recent content in Posts on the world as code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 14 May 2016 21:58:32 +0900</lastBuildDate>
    <atom:link href="http://chroju.github.io/post/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>インフラエンジニアなので第5回ペパボテックカンファレンス行ってきた</title>
      <link>http://chroju.github.io/blog/2016/05/14/pbtech_infra_engineers/</link>
      <pubDate>Sat, 14 May 2016 21:58:32 +0900</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/05/14/pbtech_infra_engineers/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://pepabo.connpass.com/event/30348/&#34;&gt;第5回ペパボテックカンファレンス〜インフラエンジニア大特集〜 - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そもそもインフラ向けのイベントって相対的にはやっぱ少ない気がするし、かのペパボさん主催のイベントだし行く以外の選択肢はなかった。アプリ系のイベントだとだいたいが「Pythonエンジニア」みたいに言語ごとだったり、フレームワークまでテーマが絞られたりするなか、「インフラエンジニア」ってよくよく考えたらめっちゃ広いよねって感じだけど、実際の職務もまぁそんな感じだし、今回の話もだいぶ話題としては多岐に渡っていました。&lt;/p&gt;

&lt;p&gt;自分の最近の関心事としては社内にAnsible導入させたいなと思いながら格闘しているのと、もっとインフラの低レイヤーの知識深めたいなと思っているのとがあるのだけど、その両面について話が聞けてとてもよかったです。&lt;/p&gt;

&lt;h2 id=&#34;インフラのコード管理:85286d0ca73ff0f2087672f05a11ae61&#34;&gt;インフラのコード管理&lt;/h2&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;c2be628f92684309baceb739c9d688a8&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a54d0ad6100a405497f88b93385c2e3d&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;前者はdrone.io上にdocker-on-dockerでインフラCI環境を作っているという話。どうもdrone.ioだとベースイメージのバージョンが切り替えられないらしい。自分は過去にAnsibleとServerspecによるCIをCircleCIで走らせる構成を作ったことがあるのだけど、これを社内で導入するなら確かにこうなるんだろうなぁという感じだった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chroju.github.io/blog/2015/11/18/ansible-serverspec-circle-ci/&#34;&gt;Ansible + Serverspec + Docker + circle ci によるインフラCI · the world as code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;後者はあるある、というかAnsible導入検討のなかで自分としても浮かんでいた課題で、コード管理しててもそれを更新する「人手」が必ずしもパーフェクトではないので、コードと実機状態の乖離が出る問題。解決策としてはPuppet、Serverspecと実機の照合を毎日夜間に回して、差異にすぐ気づけるようにするというものでした。わかる。すげーわかる。懇親会でも話していたのだけど、sshして作業しちゃいたいのグッと我慢してPuppetちゃんと書き換えるの大事。個人的にはPuppetとServerspec両方回すのもなかなかしんどそうなので、Serverspec単体を構成変更監視みたいに使うのでもいいかなと思う。&lt;/p&gt;

&lt;p&gt;他に印象的だったのは開発側もPuppetを触る、つまり自らインフラの設定変更に手を出せるという話。現状弊社だと、フォルダ1つ掘るのでも、ファイルのコピーでも開発から依頼を受けて運用でsshするみたいなテンション上がらない運用なので、開発にコードでそれを書いてもらえるのはとても効率的に思える。インフラをコード化する一番の意味って、開発と運用という垣根を超えて、インフラを語る共通言語を技術者全体にもたらせることなのだろうなと。まさにDevOps。&lt;/p&gt;

&lt;p&gt;あとそういえば「Infrastructure as Code」って言葉を聞かなかった。単語として長いなぁとは思ってたから自分も今度から「インフラのコード化」って言います。&lt;/p&gt;

&lt;h2 id=&#34;低レイヤー:85286d0ca73ff0f2087672f05a11ae61&#34;&gt;低レイヤー&lt;/h2&gt;

&lt;p&gt;スライドまだ出ていないみたいだけど、ext4からxfsへの移行検討にあたって、結構ガッツリとベンチマークテストやったというLTがありました。クラウド全盛な今日このごろでも足回りは結局物理なんですよというのはまさにその通りで、自分は全然このへんの知識がないのだけどちゃんとやらなきゃなと。。。反省。。。&lt;/p&gt;

&lt;p&gt;そして何よりペパボのプライベートクラウド&amp;rdquo;Nyah&amp;rdquo;の話ですねー。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5786d472901a4758a005deeb670746e2&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;いやもうすげーわー。あこがれるわー。OpenStack使うにあたり社内別グループ会社に経験者がいたので知見を聴けたとか、一気に5バージョン飛ばして最新バージョンへ追随させるとか、技術に対する姿勢が会社も個人もとても前向きで素敵な話だった。真似しようとして簡単に真似できる話ではないけれど、姿勢や方針については本当に参考になった。&lt;/p&gt;

&lt;h2 id=&#34;懇親会:85286d0ca73ff0f2087672f05a11ae61&#34;&gt;懇親会&lt;/h2&gt;

&lt;p&gt;インド人完全無視カレーおいしかった。トムヤムクン入れてるのか。なるほど。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://calamel.jp/curry&#34;&gt;インド人完全無視カレー | インド人のアドバイスを完全無視！－カラメル&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ペパボの方と実際に話せてよかったです。なんか新しいもの社内に導入したり、広げていったりとなると「結局コミュニケーションだよね」という結論に至ったのでそこは頑張るしかないのかなぁ超ニガテ。あとKPIちゃんと出して比較しないと響かなかったりするってのは確かになという感じなので、自分も腐らず頑張らなきゃなと思い新たにしました。スーパーエンジニアすげーすげーと言っても始まらんし、やりたいならちゃんと自分でやらなきゃなーと。いやー行った甲斐がありました。ありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#qpstudy 響け！アラートコール！行ってきた</title>
      <link>http://chroju.github.io/blog/2016/04/24/qpstudy_alert_call/</link>
      <pubDate>Sun, 24 Apr 2016 22:28:32 +0900</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/04/24/qpstudy_alert_call/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.zusaar.com/event/12327003&#34;&gt;#qpstudy 2016.04 響け！アラートコール！　本編 一般枠 on Zusaar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちら参加してきました。アラートコール、というか監視運用をテーマとした勉強会。qpstudyことキューピー3分インフラクッキングについては、数少ないインフラ系の継続的勉強会ということで、気になってはいましたが初参加できました。&lt;/p&gt;

&lt;p&gt;以前にも障害対応をテーマとした勉強会に行ったことがありますが、この界隈は闇が深い。。以前のそのイベントも今回のイベントも、いずれも参加者が互いの経験を話し合う場があったわけですが、やっぱりそういうのが一番効果あるかもなぁという気がしました。特に監視運用についてはイベント内でも触れられた通りノウハウや勘に頼っている部分も大きく、他社がどういうノウハウに頼っているのか？というのはとても気になるところ。例えばサービス運用全般のガイドラインとしてITILがあるように、客観的な基準があればいいわけなんですが。&lt;/p&gt;

&lt;p&gt;で、監視の基準。これは確かにもう少し考え直した方がいいのかもなと思った次第。例えばメトリック監視ってよくありますけど、仮にCPUが90%使用率達したとして、それがすぐに何か異常に繋がるわけではないのですよね。だから「障害」として扱うべきは単純な閾値超過やエラーではなくて、システム的な動作不全であるはず。それと障害予兆にあたるようなワーニングメッセージは別で扱うべきであって、何が本当に必要な監視、アラートなのかというのは、どの会社でも洗い直すと結構ボロが出てきそうな気がしました。イベントではMakerelのような監視系のSaaSがフレームワークを提供してほしいという声もあったり。あとはAIによる判別。確かにメトリックやログの状態を機械学習させれば、障害予兆をAIで判断させることもできそうな気がします。&lt;/p&gt;

&lt;p&gt;今年度に入ってからの自分の社内ミッションは、わりと自動化に重きが置かれているのですけど、イベントでは「自動化は目的ではなく手段」という話もあり。確かに自動化自体が楽しい作業なのでついついなんでも手を出すけど、何のために、またどういった効果があると考えられるから自動化するのか、あるいは自動化の手段には何を用いるのかというところはもうちょっと考えたい。「SaaSを使わない理由って何？」って話もあったけど、そういえばそうだなと。まぁ外部にメトリックやIP持たせるのが嫌、という理由で弊社の場合は通らないかもなぁという気もしますけど、SaaSの導入だって要は監視システムをDIYするプロセスを自動化しているわけで。一考には値するはず。&lt;/p&gt;

&lt;p&gt;今回の勉強会はなにか結論をバーン！と提示してくれるものではなく、考えるきっかけを与えてくれるような形式だったので、明日以降ちゃんと社内に持って帰って再検討しようと思います。qpstudy、楽しいので次回もぜひ行きたいところ。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3aaec6a7751c4245a2951a688eaa5543&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/CI5WFlfnIN2Pyf&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/zembutsu/is-it-wront-to-try-to-automate&#34; title=&#34;Re: 運用に自動化を求めるのは間違っているだろうか&#34; target=&#34;_blank&#34;&gt;Re: 運用に自動化を求めるのは間違っているだろうか&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/zembutsu&#34; target=&#34;_blank&#34;&gt;Masahito Zembutsu&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonに入門している</title>
      <link>http://chroju.github.io/blog/2016/03/28/entry-python/</link>
      <pubDate>Mon, 28 Mar 2016 22:29:39 +0900</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/03/28/entry-python/</guid>
      <description>

&lt;h2 id=&#34;pythonを学び始める:99f750581f26cd55e99e535cecc3c37d&#34;&gt;Pythonを学び始める&lt;/h2&gt;

&lt;p&gt;今年の &lt;a href=&#34;http://chroju.github.io/blog/2016/01/03/manifesto-2016/&#34;&gt;行動規範&lt;/a&gt; でも書いた通り、Pythonに入門している。きっかけはAWS LambdaがPython対応しており、またAnsibleもPythonで書かれているということで、Pythonの読み書きが出来た方が今後良さそうだなと思うに至った。これまでRubyをよく書いていたけど、Linuxにデフォルトで入っているのはPythonやPerlという現実的な問題もある。&lt;/p&gt;

&lt;p&gt;今までにやったこととしては取りあえず本を2冊読んだのと、一昨日は &lt;a href=&#34;http://python-nyumon.connpass.com/event/26257/&#34;&gt;入門者向けのPythonハンズオン&lt;/a&gt; に行ったりしてみた。基礎文法はだいたいさらって、requestsのようなポピュラーなライブラリは試してみた程度。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117534/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51SI%2BAszQwL._SL160_.jpg&#34; alt=&#34;Pythonチュートリアル 第3版&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117534/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Pythonチュートリアル 第3版&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.03.28&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;Guido van Rossum &lt;br /&gt;オライリージャパン &lt;br /&gt;売り上げランキング: 24,079&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117534/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ZR7WZOU/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51moRIhvzhL._SL160_.jpg&#34; alt=&#34;Pythonエンジニア養成読本［いまどきの開発ノウハウ満載！］&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ZR7WZOU/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Pythonエンジニア養成読本［いまどきの開発ノウハウ満載！］&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 16.03.28&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;技術評論社 (2015-06-16)&lt;br /&gt;売り上げランキング: 42,458&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ZR7WZOU/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;なおPythonチュートリアルはつい先日改版が出たのでそっちをリンクしてます。自分が買ったのは先月です（白目）&lt;/p&gt;

&lt;h2 id=&#34;pythonに対する小並感:99f750581f26cd55e99e535cecc3c37d&#34;&gt;Pythonに対する小並感&lt;/h2&gt;

&lt;p&gt;自分はアプリ屋ではないので言語に対する知見は広くないのだけど、なんとなく感じているのはこんなところ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PerlのTMTOWTDIに対して&lt;a href=&#34;http://qiita.com/IshitaTakeshi/items/e4145921c8dbf7ba57ef#there-should-be-one---and-preferably-only-one---obvious-way-to-do-it&#34;&gt;&amp;ldquo;There should be one&amp;rdquo;&lt;/a&gt;という考え方が明確で好き。&lt;/li&gt;
&lt;li&gt;難読な記法というのが今のところあまりない。発想した通りに書いてだいたい動く気がする。&lt;/li&gt;
&lt;li&gt;インデントでブロック形成するのはcoding styleの戦争が起きなくていい。

&lt;ul&gt;
&lt;li&gt;ただし自分はインデント＝スペース2つ派だった。Pythonは4つの方が確かに見やすいけど。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;バージョン2.x vs 3.xの話、外から聞いてはいたけどなにこれ面倒。&lt;/li&gt;
&lt;li&gt;新参としては3.x学びたいけど、AWS Lambdaが2.7対応だし両方押さえようとしている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyvenv&lt;/code&gt;の環境の隔離の仕方がシンプルで好き。&lt;code&gt;pyenv&lt;/code&gt;というのもあって紛らわしいが。&lt;/li&gt;
&lt;li&gt;というか全体的にシンプルなコンセプトで作られている印象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.xと3.xの両輪を回さなくてはならないことを除いては、全体的にはシンプルだし書きやすくてよいなという感じがする。インフラ自動化便利ツールもそろそろなにか書いてみたい。&lt;/p&gt;

&lt;h2 id=&#34;新しい言語の学習方法:99f750581f26cd55e99e535cecc3c37d&#34;&gt;新しい言語の学習方法&lt;/h2&gt;

&lt;p&gt;あと言語学習ではいままで「とりあえず書く」というのを手法にしていたけど、複数言語を学んでみて徐々にわかってきた勘所が2点ある。&lt;/p&gt;

&lt;h3 id=&#34;文法で押さえるべきポイントは決まっている:99f750581f26cd55e99e535cecc3c37d&#34;&gt;文法で押さえるべきポイントは決まっている&lt;/h3&gt;

&lt;p&gt;例えば&lt;code&gt;elif&lt;/code&gt;か&lt;code&gt;elsif&lt;/code&gt;か&lt;code&gt;else if&lt;/code&gt;かとか、false判定されるのはnullなのか&lt;code&gt;0&lt;/code&gt;なのか&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;なのかとか、複数言語を並行して遣うときに迷うポイントはわりと決まっているので、そこさえ押さえればとりあえず書ける、というのがある気がした。&lt;/p&gt;

&lt;p&gt;チートシートを自分用に作るのも漫然と端から文法を並べ立てるのではなく、こういうポイントに限ったものにすると効率がよさそう。&lt;/p&gt;

&lt;h3 id=&#34;読むのも勉強:99f750581f26cd55e99e535cecc3c37d&#34;&gt;読むのも勉強&lt;/h3&gt;

&lt;p&gt;書くのではなく読むのも勉強。よく言われることではあるけれど、これまであまり意識していなかった。冒頭に挙げた通り、PythonではLambdaとAnsibleという明確にきっかけとなったツールが存在しているので、これらのコードをしばらく読んでものにしてみたいと思う。&lt;/p&gt;

&lt;p&gt;あと個人的には最近インフラ界隈でもわりとgolangが話題で気になっているけど、それはまたおいおい（実はgo製OSSを修正して使いたくて、ちょっとだけかじってはいる）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Personal Knowledge Base 2</title>
      <link>http://chroju.github.io/blog/2016/03/17/personal-knowledge-base-2/</link>
      <pubDate>Thu, 17 Mar 2016 22:09:45 +0900</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/03/17/personal-knowledge-base-2/</guid>
      <description>

&lt;p&gt;年初に&lt;a href=&#34;http://chroju.github.io/blog/2016/01/24/personal-knowledge-base/&#34;&gt;Personal Knowledge Base · the world as code&lt;/a&gt;という記事を上げて、メモや知識の管理をする環境作りを進めていたのだけど、最近ようやく固まってきた。結論としては &lt;strong&gt;&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt;&lt;/strong&gt; と &lt;strong&gt;&lt;a href=&#34;https://github.com/gollum/gollum&#34;&gt;gollum&lt;/a&gt;&lt;/strong&gt; を使っている。&lt;/p&gt;

&lt;h2 id=&#34;trello:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;Trello&lt;/h2&gt;

&lt;p&gt;近年よく名前を訊く、Kanban形式でのビジュアライズされたタスク管理を可能とするツール。タスク管理向けなので当初は目を向けてなかったのだけど、よくよく冷静に考えてみるとメモ管理にかなり適してそうだったので採用。&lt;/p&gt;

&lt;p&gt;結果として、タスクに限らず、数多の情報を整理するツールとしてとても使いやすい。ポイントはいくつか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メモがカードの形で表示されて、パラパラと繰って一覧できる。&lt;/li&gt;
&lt;li&gt;メモにラベルを付けると色で表示されるので視認しやすい。&lt;/li&gt;
&lt;li&gt;全文検索が可能。&lt;/li&gt;
&lt;li&gt;エクスポート機能あり（json）。&lt;/li&gt;
&lt;li&gt;descriptionをMarkdownで書くことができる。&lt;/li&gt;
&lt;li&gt;Android、iOSいずれもアプリあり。IFTTTも対応。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;単なるテキストメモを保存する用途であればEvernoteの上位互換だと感じる。何よりも画面全体にメモを並べることができる一覧性の高さがいい。&lt;/p&gt;

&lt;p&gt;今の自分は&lt;a href=&#34;http://pileofindexcards.org/wiki/index.php?title=%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8&#34;&gt;PoIC&lt;/a&gt;のような使い方をしていて、とにかくメモを書き溜めては記録、発見、参照の3つのリストに取りあえず分けて、暇なときにつらつら眺めたりしている。分類の仕方はまだ模索中なので、今後変わるかもしれない。とにかく柔軟に使えるのがいい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/choiyaki/20140920/1411170874&#34;&gt;「Trello」というアプリがおもしろい - iPhoneと本と数学となんやかんやと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://victorsavkin.com/post/94468744151/using-trello-for-your-personal-productivity-system&#34;&gt;Using Trello for Your Personal Productivity System | Victor Savkin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GTDは「高度」の管理用といわゆるToDoの管理用に2つボードを設けて使ってみている。プライベートのタスクだけなのでそれほど厳密な期限管理などは必要ないし、これで十分。&lt;/p&gt;

&lt;h2 id=&#34;gollum:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;gollum&lt;/h2&gt;

&lt;p&gt;散発的な思いつきをTrelloに入れる一方、体系的な知識管理はgollumを使う。GitHub Wikiの機能だけが単独でオープンソース化されているもので、さくらクラウドの2万円クーポンがあったのでとりあえずサーバー1台立ててホストしている。&lt;/p&gt;

&lt;p&gt;技術的なメモ書き、読書メモ、あとは趣味で行く美術展の記録などはすべてここに溜めている。Wikiだと散逸的にページを作ってしまいがちなので、トップから最大2階層までの作成と定め、1階層目は各技術ジャンルのページ、2階層目に詳細記事として配置した。こうして体系立てたメモ環境を作ってみると、自分のスキルマップが出来上がっていくようで面白い。&lt;/p&gt;

&lt;p&gt;gollumを建てるのに、技術的に難しいことはほとんどない。中身はSinatraとgitなのでカスタマイズもしやすく、とりあえず安易な認証機能ぐらいは追加してみた。作成した記事は個別にMarkdownファイルになってgollumのディレクトリ直下に直置きされるのだが、これはディレクトリを切って&lt;code&gt;git submodule&lt;/code&gt;としてGitHub上に上げ、個別管理したいかなと思っている。&lt;/p&gt;

&lt;h2 id=&#34;ナレッジ管理の必要性:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;ナレッジ管理の必要性&lt;/h2&gt;

&lt;p&gt;ナレッジ管理が必要である、という潮流は昨今高まっているような気はしていて、Qiitaやesa.ioの登場あたりから特にそういう話はよく聞く気がする。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/2R3Nk0tCAKPUnY&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/takoratta/ss-59111661&#34; title=&#34;情報共有から始めるチーム開発とキャリア戦略&#34; target=&#34;_blank&#34;&gt;情報共有から始めるチーム開発とキャリア戦略&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;//www.slideshare.net/takoratta&#34;&gt;Takuya Oikawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;個人であれ組織であれ、我々の仕事は（まぁ他の職種も同じだとは思うが）ナレッジを溜めて活用していくことにあるので、こういう取り組みは何がしか進めるべきだろうと思う。上記スライドにもあるように、暗黙知を形式化していくことで自分内でも、社内やコミュニティ内でも知識を記憶、伝達してさらに深めることが可能になる。&lt;/p&gt;

&lt;p&gt;とはいえ昨今はツールの乱立はあって、ブログとQiitaの使い分けだったり、個人的なメモをどうするかだったり、やっぱり迷うことも多い。そこはある程度自分なりの使い方を定めておかないと、後々散逸したメモの山に途方に暮れたりはしそう。あと、単純に良いツールがあったとしても、メモする習慣をつけておかないと意味がないし、どちらかといえばそっちが大事なんではという気もする。些細なことでも漫然と調べず、記録するクセをこの2ツールで付けていこうと思う。&lt;/p&gt;

&lt;p&gt;以下、他に比較検討したツール群を載せておく。&lt;/p&gt;

&lt;h3 id=&#34;faqt-https-faqt-co:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;&lt;a href=&#34;https://faqt.co/&#34;&gt;FAQT&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;比較した中ではだいぶ惹かれた。一時はこれにしようかと思った。&lt;/li&gt;
&lt;li&gt;明確にKnowledge baseを唄ったサービス。Markdownで書いたメモがカード形式で表示できる。&lt;/li&gt;
&lt;li&gt;Markdownプレビューが結構好みだし、外観はとてもよかった。&lt;/li&gt;
&lt;li&gt;まだ立ち上がったばかりで、将来性はちょっと不安。&lt;/li&gt;
&lt;li&gt;全文検索の不在が決め手になり不採用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;simplenote:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;Simplenote&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;定番メモサービス。&lt;/li&gt;
&lt;li&gt;Markdown対応がほぼ皆無なので不採用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;quiver-http-happenapps-com-quiver:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;&lt;a href=&#34;http://happenapps.com/#quiver&#34;&gt;Quiver&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;最近少し話題になったMac用ノートアプリ。&lt;/li&gt;
&lt;li&gt;タグとノートブックで分類するEvernoteっぽいMarkdownノート。&lt;/li&gt;
&lt;li&gt;データファイルをDropboxに置いてクラウド同期が可能。&lt;/li&gt;
&lt;li&gt;外観がクールだし、結構使い勝手はよかった。&lt;/li&gt;
&lt;li&gt;とはいえMacでしか使えないので断念（持ち歩きPCがLinuxなので）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考:8e8c37db9487c4a72f25b3d52d64fa82&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/the-personal-knowledge-management-saga/the-personal-knowledge-management-saga-part-1-ae9bdc575ded#.9xvxjvkkz&#34;&gt;The Personal Knowledge Management Saga: #1 — The Personal Knowledge Management Saga — Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=7697050&#34;&gt;Ask HN: What do you use to organize your knowledge? | Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=8806950&#34;&gt;Ask HN: How do you manage/organize information and knowledge in your life? | Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://marcusvorwaller.com/blog/2015/12/14/personal-knowledgebases/&#34;&gt;The Sad State of Personal Knowledgebases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JAWS DAYS 2016に行ってきた</title>
      <link>http://chroju.github.io/blog/2016/03/13/jaws_days_2016/</link>
      <pubDate>Sun, 13 Mar 2016 11:03:24 +0900</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/03/13/jaws_days_2016/</guid>
      <description>

&lt;p&gt;昨年に続き。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chroju.github.io/blog/2015/03/22/jaws-days-2015/&#34;&gt;JAWS DAYS 2015でAWS童貞捨ててきた · the world as code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;昨年JAWS DAYSのハンズオンでAWSアカウント作ったので、これでAWS歴丸1年。それにしては自分の力がしょっぱすぎて嫌になる。もっと活用したい。ただ今回「わからない」というセッションはなかったので（技術メインじゃないセッションをいくつか入れてたのは置いておいて）、それなりに知識はついているのかなぁという実感はできた。&lt;/p&gt;

&lt;p&gt;サーバーレスアーキテクチャ、クラウドネイティブという言葉が極めて一般的になったなというのが今回の感想。事例を聞いていてもEC2並べてなんかやりますというのは当然ながらほとんどなくて、だいたいがLambda、Kinesis、API GatewayといったAWSリソースを繋ぎ合わせることでアーキテクチャを作り出している。もう従来的な言葉で言う「インフラ」というものは存在しなくなってしまった。VMwareやXenの時代というのか、あくまでサーバーという実体は変わらず、それの扱い方が変わるというだけの変化だったが、AWSがもたらしているのはサーバーそのものの消失。システムのアーキテクチャ自体の転換。何度かブログ内でも繰り返しているが、この全く新しい領域で勝負するにあたっては、アプリエンジニアもインフラエンジニアも関係ない。こういった状況下で自分が勝負できるとしたら、Opsになるのかなと思う。これまでインフラ屋が担ってきたOpsのスキルを、AWSへ適用していく。もちろん、コードをもっと書けるようにならなくてはならないといった、本来的な問題もあるが。&lt;/p&gt;

&lt;p&gt;また今回全体を通して「コミュニティへの参画」というのが強調されていたようにも思う。最初のJAWS-UG代表である今春氏のセッションでも、Increments及川氏のセッションでも、社外のコミュニティに参加することの意義が説かれた。自分はお世辞にも積極参加ができているとは言いがたい状態なので、とても耳が痛い。&lt;/p&gt;

&lt;h2 id=&#34;参加セッション:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;参加セッション&lt;/h2&gt;

&lt;h3 id=&#34;jaws-ugこれまでとこれから-キーノート:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;JAWS-UGこれまでとこれから（キーノート）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;先述した今春氏のキーノート。&lt;/li&gt;
&lt;li&gt;京セラドームでもイベントを開いたことがあるというのはちょっと驚き。思い切ってますなぁ。&lt;/li&gt;
&lt;li&gt;会場に出来る会社様募集中らしい。企業が無償で場所提供してくれる業界状況というのも非常に恵まれている。というか、そういう文化圏にいて良かったと思う。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;amimoto-サーバーレスアーキテクチャ:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;AMIMOTO × サーバーレスアーキテクチャ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;デジタルキューブ堀家氏。&lt;/li&gt;
&lt;li&gt;先述の通り。サービスを疎結合にする。No EC2。&lt;/li&gt;
&lt;li&gt;モバイル開発者じゃないからスルーしてたけど、mobile hub面白そう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/serverless/serverless&#34;&gt;Serverless Framework&lt;/a&gt;気になる。
説明のあった「Lambdaをローカルからinvokeできる」ぐらいならAWS CLIでいいんだけど、他にも活用できそう。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;外よりも中からの攻撃-事故がヤバイ-今やるべきクラウドセキュリティ対策:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;外よりも中からの攻撃・事故がヤバイ、今やるべきクラウドセキュリティ対策&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;cloudpackのアイレット齊藤氏。今回一番ためになった。&lt;/li&gt;
&lt;li&gt;セキュリティに終わりはない、完璧はない、だからきちんと監査して透明性を確保して、リスクを受け入れる。&lt;/li&gt;
&lt;li&gt;監査は目的ではない。むしろ時代に追いつけてない監査基準もあったり。&lt;/li&gt;
&lt;li&gt;パスワードは脆弱だからSAMLとKerberosでAD連携してSSOとかカッコイイ。&lt;/li&gt;
&lt;li&gt;cloudpackでやっていることは公開されているらしいので後でチェック。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deep-dive-aws-iot:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;[Deep Dive] AWS IoT&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;mobile hubと同じく敬遠してたIoTだけどなんかやれそうな気になった。&lt;/li&gt;
&lt;li&gt;とりあえずラズパイ入手かな。あとPython頑張る。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;金融クラウド-fintech最新動向-awsで金融のイノベーション:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;金融クラウド＆FINTECH最新動向　～AWSで金融のイノベーション！&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AWS、MUFG、ウェルスナビの共同セッション。&lt;/li&gt;
&lt;li&gt;MUFGがハッカソンとかやってるんだというのは全然知らなかったし意外オブ意外。
時代の潮目が確実に変わってきてるのかなと。&lt;/li&gt;
&lt;li&gt;銀行システム、基幹系は今まで通り守らなくてはならない。フロントはスピードを速める必要があると。
その意味でSIerは失くならないと個人的には思っている。少なくとも金融系は。&lt;/li&gt;
&lt;li&gt;ウェルスナビ、これまで米富裕層に提供していたような投資診断をモバイル向けで一般にも提供すると。&lt;/li&gt;
&lt;li&gt;ITの役割が単なる自動化や効率化じゃなくて、新たな価値、市場を創造することにある。そういう仕事したい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;エンジニアのキャリアとアウトプットを意識した成長戦略:2e8d0bef4a75fbc8ff10011f247fcf08&#34;&gt;エンジニアのキャリアとアウトプットを意識した成長戦略&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increments及川氏。&lt;/li&gt;
&lt;li&gt;話題になったIncrements入社の理由が「誰もやりそうにないから、差別化戦略として」ってのカッコよすぎた。&lt;/li&gt;
&lt;li&gt;及川氏の最初のキャリアであるDECという会社、不勉強につき初耳。紆余曲折の末に現在はhpの一部か。。。&lt;/li&gt;
&lt;li&gt;Googleの社是？ &amp;ldquo;Share everything you can&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Qiitaにもっと投稿しようと思いました（こなみかん）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ブログをHugoに移行した</title>
      <link>http://chroju.github.io/blog/2016/02/18/convert-to-hugo/</link>
      <pubDate>Thu, 18 Feb 2016 20:51:20 +0900</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/02/18/convert-to-hugo/</guid>
      <description>

&lt;p&gt;すでに流行りは一巡しているような気もするが、Hugoを導入してみた。もともと自宅iMacにOctopressを置いてブログ作業はしていたのだが、外でもブログ更新ぐらいできた方がいいなぁと考え、クラウド上の開発用端末にレポジトリ移しちゃおうということになり、じゃあついでだからと移行してみた。Go自体は最近使っているオープンソースがそれであったという試しがあり、すでに導入は終えていた（ただし書けない）。&lt;/p&gt;

&lt;p&gt;随所で語られているように移行自体は大したものではなく、Markdownでいずれも互換性があるし、Front MatterもYAML形式であれば同一。Hugoレポジトリの&lt;code&gt;content/post&lt;/code&gt;配下に記事ファイルを突っ込めば移行としてはおしまい。多少の差異については以下の記事が詳しい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した | SOTA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただ自分の場合はパーマリンクを前ブログから保てていない。というのも、Octopressで使っていた記事ファイル名が&lt;code&gt;YYYY-MM-DD-foobar.markdown&lt;/code&gt;の形だったのに対し、今回は記事のパーマリンクを&lt;code&gt;config.toml&lt;/code&gt;で以下のように設定してしまっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[permalinks]
    post = &amp;quot;/blog/:year/:month/:day/:filename/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;従って&lt;code&gt;/blog/YYYY/MM/DD/YYYY-MM-DD-foobar/&lt;/code&gt;という歪なパーマリンクになってしまっている記事がいくつかある。ほとんどの記事は&lt;code&gt;foobar.markdown&lt;/code&gt;に直したのだが、はてなブログ時代から移植した記事は&lt;code&gt;YYYY-MM-DD-post.markdown&lt;/code&gt;という適当なパーマリンクにしていたので、一括して直すことができなかった。時間を見てこれらも意味のあるURLに直すつもり。&lt;/p&gt;

&lt;p&gt;記事を公開する流れは以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 記事作成
$ hugo new post/title.md
$ vi content/post/title.md
# ビルド
$ hugo
# commit
$ cd public
$ git add .
$ git commit -m &amp;quot;new post&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hugo&lt;/code&gt;コマンドでビルドすると&lt;code&gt;public&lt;/code&gt;フォルダにサイト構成全体が吐かれるので、それをそのまま&lt;code&gt;git push&lt;/code&gt;して終わり。ただ実際にバージョン管理したいのは&lt;code&gt;public&lt;/code&gt;というより、設定ファイルや元のMarkdownが詰まったHugoのレポジトリ全体ではないかという気もするので、後々以下の記事のようにレポジトリ全体で&lt;code&gt;git push&lt;/code&gt;してCIでビルドさせる形に変えたいと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hori-ryota.com/blog/create-blog-with-hugo-and-circleci/&#34;&gt;HugoとCircleCIでGitHub PagesにBlogを公開してみた - Hori Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なおテーマはとても悩みどころで、しばらくコロコロ変わるかもしれない。というか自分でカスタマイズしたいけどCSSなんて今更書けるのか。。。&lt;/p&gt;

&lt;h2 id=&#34;追記-2016-02-22-23-50:f9b1285b375e2fa831a443cf9e131380&#34;&gt;（追記 2016-02-22 23:50）&lt;/h2&gt;

&lt;p&gt;フィードのファイルパスがデフォルトだと&lt;code&gt;index.xml&lt;/code&gt;になってしまうので、Octopressから変更がないよう&lt;code&gt;atom.xml&lt;/code&gt;に直した。&lt;code&gt;config.toml&lt;/code&gt;で指定ができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;rssuri = &amp;quot;atom.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://discuss.gohugo.io/t/what-is-rsslink-exactly/1195/2&#34;&gt;What is {{ .RSSlink }}, exactly? - support - Hugo Discussion&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;その他参考記事:f9b1285b375e2fa831a443cf9e131380&#34;&gt;その他参考記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/syui/items/869538099551f24acbbf&#34;&gt;HUGOを使ってサイトを立ち上げる方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hugo - Hosting on GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ops JAWS#3に行ってきた</title>
      <link>http://chroju.github.io/blog/2016/01/30/ops-jaws-3/</link>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/01/30/ops-jaws-3/</guid>
      <description>&lt;p&gt;その名の通り運用管理系の話題を中心としたAWSユーザーグループです。ハンズオンもあるということで行ってきた。&lt;/p&gt;

&lt;p&gt;メインとなったのはconfig rulesのハンズオン。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/g0o2kIUtI0yKmw&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/okochang/opsjaws-20160128&#34; title=&#34;OpsJAWS 20160128&#34; target=&#34;_blank&#34;&gt;OpsJAWS 20160128&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/okochang&#34; target=&#34;_blank&#34;&gt;hideaki yanase&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;AWSリソース、使っているうちに無秩序になっていき、ルールの統一がはかれなくなったり、全体像が見えづらくなったりということはありがちですが、config rulesを使ってもうシステム的に制御しちゃいましょうというテーマ。例えばCloudTrailが有効化されていない場合にアラートを上げる、とか。監視結果が変化すると、それをトリガーにLambdaをinvokeしたりもできるので、それこそなんでもできる感じ。&lt;/p&gt;

&lt;p&gt;やってみて気付いたけど、やっぱり自分は運用が好きなのかもしれない。システムによって、本来不確かであったり信用性に劣っていたりするはずの人間の動作を制御する、というのが好きなんだろうなと。SEやってた頃は運用の制御はExcel資料が元になることが多くて、それ自体は特に楽しくなかったのだけど、システム的に作りこんでいくのはわくわくする。これはいい気付きだったし、次回も是非参加してみたい。&lt;/p&gt;

&lt;p&gt;問題としてはやはり、Lambda Functionを書くのにpythonかnode.jsを使う必要がある（いまさらJavaってのもなぁ）ので、次回参加するのであればそれまでにpythonをある程度やっておかねばなぁというところ。&lt;/p&gt;

&lt;p&gt;その他、昨年とてもおもしろく読ませていただいたSDの特集『なぜ「運用でカバー」がダメなのか』を書かれた運用設計ラボの波多野氏がいらっしゃっていたりして、個人的にはテンション上がったりもしました。「運用でカバー」をググるとトップに出てくる、なんだか好評を得てしまった拙記事はこちら（あえて移行前ブログを貼るアレ）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chroju89.hatenablog.jp/entry/2015/02/11/164926&#34;&gt;Software Design 2015年2月号『なぜ「運用でカバー」がダメなのか』読了 - そのねこが学ぶとき&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Personal Knowledge Base</title>
      <link>http://chroju.github.io/blog/2016/01/24/personal-knowledge-base/</link>
      <pubDate>Sun, 24 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/01/24/personal-knowledge-base/</guid>
      <description>

&lt;p&gt;昨年は転職のゴタゴタがあったりしてメモを取る習慣というものがどこかに消え失せてしまっていたので、年始にあたり生涯幾度目かわからないがメモ環境について再考している。本当に何度目だよ、と思うのだが、これはもう生涯模索しながらいくしかないし、最適解なんてのは時と場合によって変わるものだとは思う。&lt;/p&gt;

&lt;p&gt;しかしオライリーから『エンジニアのための時間管理術』は出ているのに、『情報整理術』が出ていないのはなぜなのか。むしろそっちが職種的に重要じゃないのか。ブログやQiitaでもあまり見かけない。&lt;/p&gt;

&lt;h2 id=&#34;evernoteの呪縛:75a3e4d39cced19f482a87dc88309f83&#34;&gt;Evernoteの呪縛&lt;/h2&gt;

&lt;p&gt;現代においてメモ、ノートというと真っ先に挙がってくるのがEvernoteであり、自分も確かに使ってはいる。使ってはいるが、正直に言って愛憎は入り混じっている。基本的には使いたくない。でも使わずにはいられなくて、ついついいろいろとぶち込んでしまう。&lt;/p&gt;

&lt;p&gt;Evernoteの肝は、ありとあらゆるフォーマットの資料を何でも入れることができて、それがsearchableになることにあると思っている。昨日読んだブログのエントリー。1年前に契約したサービスの証明書。3ヶ月前に読んだ本の感想。そういったものをすべて並列に保存することができ、検索すればすぐに出てくる。放っておけば消えて無くなるような情報が「死蔵」されなくなる。だから取りあえず「いいな」と思ったものがあればEvernoteに入れてしまう。特に開発終了が発表されたClearlyが自分にとってはクリーンヒットで、良いなと思った文章があれば迷わずClearlyを使っていた。ググればまた出ると言われればその通りだが、同じ検索キーワードをまた思い出せるとも限らないし、ページが消滅することだってままある。&lt;/p&gt;

&lt;p&gt;しかし実際に突っ込んだ情報をもう一度掘り出せるのかどうか。文字情報であれば確かに検索できるのだが、画像はどうか。音声は。またpdfは。それを防ぐためか、ノートブックやタグ付けという能動的な整理手法も用意されているわけだが、次々と投げ込んだ資料を1つずつ分類していくのは骨が折れるし、メールクライアントにあるようなオートフィルタリングはいまだにできない（サードパーティーのアプリならあるけど）。また実際に検索をかけたときも、ノートの読み込み速度はそれほど速いものではなく、特にモバイルアプリに関してはどうにもストレスフルだ。&lt;/p&gt;

&lt;p&gt;結果的に何でも入れられるがサルベージが難しいゴミ箱、あれば安心感があるので離れられないけど、積極的に何か活用していこうとは思えない存在と化してきている。&lt;/p&gt;

&lt;h2 id=&#34;何をメモするのか:75a3e4d39cced19f482a87dc88309f83&#34;&gt;何をメモするのか&lt;/h2&gt;

&lt;p&gt;そもそも何をそんなに悩むほどメモしたいのか。改めて考えるとよくわからないなぁで思考が停まりそうになったが、いくつか挙げてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tech関連でも日常の中の疑問でもそうだが、ググるのは簡単だがその知識はすぐ忘れてしまう。どこからどんな情報を得て、どんな結論に至ったのかは書き留めておきたい。&lt;/li&gt;
&lt;li&gt;スニペットやチートシート。頭悪いのでコマンドや文法をすぐ参照できるようにしておきたい。&lt;/li&gt;
&lt;li&gt;読書メモ。簡単な本の概要、感想、それを受けて何を実践するのか。&lt;/li&gt;
&lt;li&gt;ポエム。客観的な事実や資料より感情より、主観よりのもの。課題に関する考えとか哲学とか。&lt;/li&gt;
&lt;li&gt;チェックリスト。日常の指針になるような。定例作業の手順もそうだし、持ち物リスト、忘れがちなポリシー的なものとか。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こうして挙げてみると参照頻度、パブリックorプライベートといった軸で分類できそうな気がしてくる。またそれによって選ぶべきツールも変わりそうだ。例えばEvernoteは先に書いた通り遅い、分類が面倒という特徴を自分は見出しているが、逆にそれほど素早く引き出す必要のないもの、つまり参照頻度が低い「もしものためのメモ」などであればEvernoteでも構わないことになる。&lt;/p&gt;

&lt;p&gt;スニペットやチートシートは本当に秒で出てきて欲しいし、シンタックスハイライトが効いてないと辛いみたいなところがあったりもするので、Evernoteには向かないことになる。この目的だと自分の中ではGistやKobitoが最近のヒットではある。&lt;/p&gt;

&lt;p&gt;思うに、Evernoteや梅棹忠夫先生が掲げるような「すべてのメモを一箇所に集める」というのはちょっと厳しいのではないか。目的の違うメモであれば、適切なフォーマットも自ずと変わってくる。もちろん分散していろんなところにメモがある状況というのはわかりにくくはあるが、目的がはっきり定まっていればツールの選択に迷うことはない。自分はEvernoteにスニペットを格納したことはないし、日常生活で使うチェックリストをGistのPublicで保存したこともない。&lt;/p&gt;

&lt;h2 id=&#34;personal-knowledge-base:75a3e4d39cced19f482a87dc88309f83&#34;&gt;Personal Knowledge Base&lt;/h2&gt;

&lt;p&gt;ここでようやくタイトル回収するのだけど、海外ではこの手のツールをPersonal Knowledge Base(PKB)と呼ぶらしい。&lt;a href=&#34;https://en.wikipedia.org/wiki/Personal_knowledge_base&#34;&gt;Wikipediaの記述&lt;/a&gt;の細かさを見ると、国内よりはだいぶホットな話題っぽく思われる。いろいろこのワードでググッてみたのだが、今のところうなずけたのは以下のあたり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.acuriousmix.com/2014/09/03/designing-a-personal-knowledgebase/&#34;&gt;Designing a Personal Knowledgebase – A Curious Mix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=8270759&#34;&gt;Designing a Personal Knowledgebase | Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://programmers.stackexchange.com/questions/729/how-do-you-manage-your-knowledge-base&#34;&gt;How do you manage your knowledge base? - Programmers Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に一番上の記事はだいぶ熱い。俺の理想とするPKBはこんなのだ！！！ってめっちゃ細かく書いているが、わりと同意できる内容ではあった。下2つのフォーラム系の記事を見ると、案外多いのが個人Wikiを使っている人。確かにフレキシブルな編集が可能という点では、2016年現在に至ってもWikiの優位性はかなり高い気がする。でもさすがに今更感あるなーということで手を出す気にはなれない。あるいはorg-modeが結構評判よくて、Vimmerじゃなければ手を出していたようには思う。&lt;/p&gt;

&lt;p&gt;PKBの定義に関してはWikipediaの記事にあるが、情報の一次ソースそのものではなくて、そこから得られた知識をまとめるものということ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Its purpose is not simply to aggregate all the information sources one has seen, but to preserve the knowledge that one has learned from those sources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これについては深く同意するところで、情報そのものなら別に本自体とかウェブページを直接見たりとかすればいいんだけど、それら複数の資料から自分なりに導いた知識、学習結果というものをまとめておきたいのだ。そう考えてみると、Qiitaに特にそういう内容は多く書いているし、一次ソースに関してはウェブクリップなり、本のページを撮影したものなりをEvernoteに入れているので、やっぱりツールの棲み分けになってくるのかなぁと思えてくる。ちなみに一次ソースにあたる情報をまとめたものはPIM(Personal Information Management)と言うらしい。&lt;/p&gt;

&lt;h2 id=&#34;結論:75a3e4d39cced19f482a87dc88309f83&#34;&gt;結論？&lt;/h2&gt;

&lt;p&gt;書いていけば結論見えるかなと思ってここまで書いてみたが、なかなか見えてこない。結局のところ自分の中ではGistが一番近くはある。Gistboxを使えばタグ分類ができるし、&lt;a href=&#34;https://github.com/lambdalisue/vim-gista&#34;&gt;vim-gista&lt;/a&gt;を使うことでVimキーバインドでの編集もできる。コードハイライトもMarkdownのプレビューも出来て至れり尽くせり。引っかかるのは非techなメモを入れるのがGitHubである故に心理的に憚られるなぁというのと、モバイル端末からの閲覧にあまりいいツールがないこと。&lt;/p&gt;

&lt;p&gt;んで一方で公開したい情報はこうやってブログにまとめたり、Qiitaにまとめたりもしているので、そこの分断も若干もどかしい。さっきツールは分けるしかないかもと言っておいてアレだが。ちなみにブログはこういう文章過多な場合、いわばポエムだとかツール、技術に関する考察をまとめる場、Qiitaはよりtechそのものに寄ったものを書く場と使い分けている。こういったところで公開共有するほどでもねーやってものはGistかなと。あんまりにも初歩的な内容とかQiitaに流すの憚られるじゃないですか。タグで追ってる人には必ず見られるわけだから。&lt;/p&gt;

&lt;p&gt;Evernoteに関しては、結局一次ソースにあたる情報を端からブチ込んで安心感を得るツールとしては今後も使い続けそう。しかしClearlyがなくなるのが本当につらい。Web Clipperのあの鈍重な動きは「何も考えずとりあえずクリップ」するにはちょっと抵抗ある。仕方ないか。しかしウェブクリップというのもどこまで意味のあるものやら。。その後情報が更新されても追えなくなるわけだし。&lt;/p&gt;

&lt;p&gt;何はともあれ、とりあえず「記録残せ」から始めなくてはと思う。悩んで結論出ないから記録しないみたいな状態が続くのが一番よろしくない。悩みながらも進めていくしかないんだろうな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>東京Node学園付属小学校1限目に行ってきた</title>
      <link>http://chroju.github.io/blog/2016/01/20/node-js-elementary-school-1/</link>
      <pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/01/20/node-js-elementary-school-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/23463/&#34;&gt;【増枠！】東京Node学園付属小学校 1時限目 - connpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;東京node学園というNode.jsのユーザーコミュニティがありますが、その入門者向けバージョンが立ち上がったので行ってきました。&lt;/p&gt;

&lt;p&gt;自分がNode.jsを扱った経験はAWS Lambdaとhubotで遊ぶために既存のスクリプトを少し触ったぐらいで、おそらくは小学校というより幼稚園レベルだったと思いますが、それ以前にやはりフロントエンドの集まりにインフラのエンジニアが行くというのはちょっと自分でも場違い感を覚えずにはいられず、さすがに提供できる話もないやろなってことで懇親会は出ずに帰ってしまいました（）。しかし刺激になったのは確かというか、フロントエンドの世界にちょっとだけ触れられる良い機会ではあったかなと。&lt;/p&gt;

&lt;p&gt;そもそもにして自分にとって「言語」は最近手足になってきていて、Ansible使いたいからPythonやっておこうとか、Docker理解したいからgolangかなとかそういう選択ばかりするようになっていたのだが、フロントエンドにとって新しい言語というのは可能性の広がりなのだなーと当たり前のようなことに気付いた。例えば最近Kobitoの実装などで話題のElectronはNode.jsなわけで、サーバーサイドスクリプトであるNode.jsを学ぶことで、デスクトップアプリケーションを従前よりは容易に構築できる可能性になる。作れるものの幅が増える、やれることが膨らんでいくことはエンジニアにとってとても楽しい。&lt;/p&gt;

&lt;p&gt;くっだらないものでもなんでも構わんから、とりあえず手を動かして「作る」ことが楽しいって経験をもっとしてもいいのかもなと思った。インフラのデリバリー、運用の効率化、そういうのも大切ではあるけれど、我々がそもそもビジネスとして提供しているサービス、システムとはなんぞやって部分をもう一度見返してみたい気がした。言語は単なるツール、ではないはず。だからこういう勉強会もいいけど、ハンズオンとかもっと行ってみるべきかなと。具体的に今回の勉強会で見かけた中ではMEANスタックが気になるのでやっておきたい。ちょうどMongoに手を付けたかったし。&lt;/p&gt;

&lt;p&gt;以上、取り留めのない感想でした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016年の行動規範</title>
      <link>http://chroju.github.io/blog/2016/01/03/manifesto-2016/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2016/01/03/manifesto-2016/</guid>
      <description>

&lt;p&gt;うまいことまとまらないのでつらつら。&lt;/p&gt;

&lt;h2 id=&#34;問題意識:d46ca0be31fde7498833cd9b20e5a80e&#34;&gt;問題意識&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;時間、お金の使い方がいまだに下手。

&lt;ul&gt;
&lt;li&gt;きちんと考えず浪費している機会が多い。&lt;/li&gt;
&lt;li&gt;時間ならタスクシュート、お金ならZaimを使ったりした経験はあるが結局とまったりしている。&lt;/li&gt;
&lt;li&gt;昨年は10年以上続いていた日記すらもとめてしまった。&lt;/li&gt;
&lt;li&gt;何か忙しい課題が仕事なりプライベートなりに鎮座すると、他に回す手が一切なくなったりしてバランス悪い。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ環境の再考。

&lt;ul&gt;
&lt;li&gt;インプットが「ググって終わり」の場合が多く、次にその情報が必要になったときも結局ググってる。&lt;/li&gt;
&lt;li&gt;読んだ本が本当に身になっている気がしない。&lt;/li&gt;
&lt;li&gt;Evernoteがメモの死蔵場になっている。&lt;/li&gt;
&lt;li&gt;デジタルメモはVimと&lt;a href=&#34;https://github.com/glidenote/memolist.vim&#34;&gt;memolist.vim&lt;/a&gt;を基本にしているけど、書き散らして終わってる感。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術探求の不足

&lt;ul&gt;
&lt;li&gt;やってるけどやりきれてないというか。&lt;/li&gt;
&lt;li&gt;Qiitaで話題になっているのを見て、ザッと読んでなんとなく無理そうと思うと閉じちゃったり。&lt;/li&gt;
&lt;li&gt;いつか使うかな？と思ってPocketにつっこんでそのまんまの積読があまりに多い。&lt;/li&gt;
&lt;li&gt;流行ってる→やろうとか、こういうツールほしい→作ろうの瞬発力上げたい。&lt;/li&gt;
&lt;li&gt;本読みたい。というか去年文化資本にあまりに触らなすぎた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;仲間がほしい

&lt;ul&gt;
&lt;li&gt;懇親会とか行ってもその場限りの話しかできなかったりでエンジニア仲間社外にあんまいない。&lt;/li&gt;
&lt;li&gt;社内の技術課題解決するのに社外で話すってのも大切そう。&lt;/li&gt;
&lt;li&gt;ていうかエンジニアとしてもうちょい知名度上げてみたい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;解消していくために:d46ca0be31fde7498833cd9b20e5a80e&#34;&gt;解消していくために&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;時間とお金の定量評価

&lt;ul&gt;
&lt;li&gt;お金は娯楽費にx万までみたいな予算持ってるので、時間も定量評価したい。コード書く時間を週に必ずx時間とか。&lt;/li&gt;
&lt;li&gt;タイムロギングしたいけどTogglとか使うの面倒。とりあえずやってみるか。難しけりゃ1日の最後にノートに記憶から書き出すんでもいいかなと。&lt;/li&gt;
&lt;li&gt;週ごとのノートにしたい。PDCA回すのにちょうど良いスパンだと思う。今週ダメなら来週帳尻合わせるとか出来るわけで。&lt;/li&gt;
&lt;li&gt;そういう用途だと紙ノートよりEvernoteの方が良さそう。1ノートに対して1週間という形が取れるので。&lt;/li&gt;
&lt;li&gt;じゃあ日記もここに載ってくる形でいっか。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモをもっかいちゃんとする

&lt;ul&gt;
&lt;li&gt;技術テーマごとにちゃんとノート取る。ブログに上げるといった方がいいか。&lt;/li&gt;
&lt;li&gt;ブログ記事にならないレベルのものはQiita。二番煎じ三番煎じでQiitaレベルに値しないものはGist。&lt;/li&gt;
&lt;li&gt;でもGistあんまり使いやすくない……。&lt;/li&gt;
&lt;li&gt;メモを見返す時間をちゃんと作る。週次レビュー的なあれ。金曜夜が第一候補。無理なら土曜。&lt;/li&gt;
&lt;li&gt;というかそれぐらいの時間は取れるようなスケジューリングをする。去年はそれすら難しいぐらいアホほど予定入れてた。&lt;/li&gt;
&lt;li&gt;頭のなかちゃんと棚卸するの大事。&lt;/li&gt;
&lt;li&gt;手元のモレスキンはタイムライン的なリアルタイムメモ用にする。アナログは見返すの無理。ざざっと時系列で追う目的でしか使えない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;散逸的な勉強をしない

&lt;ul&gt;
&lt;li&gt;とりあえずおもしろそうなもの、役に立つはずのものに片っ端から手をつけるのやめる。&lt;/li&gt;
&lt;li&gt;Pocketに記事を置いとくのはいいけど、1週間ぐらい経ったら躊躇なく消す（自動化できないかな）。&lt;/li&gt;
&lt;li&gt;上述の通りブログに上げることを目的としてノートを取っていく。参照する記事はノート上で繰り回す。&lt;/li&gt;
&lt;li&gt;スーパーマンになろうとしない（選択と集中、less is more）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術的な瞬発力の向上

&lt;ul&gt;
&lt;li&gt;手足のように使える言語がほしい。Rubyかじったんだからちゃんとやり切る。&lt;/li&gt;
&lt;li&gt;もう1個。デフォルトで入ってる言語だと楽なんだが。Pythonかなー。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://orangain.hatenablog.com/entry/python3-as-default&#34;&gt;LinuxディストリビューションにおけるPython 3デフォルト化の流れ - orangain flavor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;実際の開発経験を積む。API叩くとかやる。動かす。&lt;/li&gt;
&lt;li&gt;原則としてCLIで操作する。GUIに頼らない。コマンドでなんとかならないかとまず考える。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文化資本に触れたい

&lt;ul&gt;
&lt;li&gt;1クール3本のアニメ&lt;/li&gt;
&lt;li&gt;1か月2冊の小説&lt;/li&gt;
&lt;li&gt;1か月2本の映画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エンジニアとしての活動

&lt;ul&gt;
&lt;li&gt;なんかユーザーグループ入ってみたい。職種的に考えるとJAWS-UG？&lt;/li&gt;
&lt;li&gt;これだけはという技術分野ほしい。Ansibleが今自分の中でキテるのでもっと。&lt;/li&gt;
&lt;li&gt;GitHubをソーシャルにちゃんと使う。横断的な検索とかフォローとかプルリク出してみるとか。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;挑むべき技術分野:d46ca0be31fde7498833cd9b20e5a80e&#34;&gt;挑むべき技術分野&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上述の通り武器言語としてのRuby、Python。&lt;/li&gt;
&lt;li&gt;hubotいじる上でnode.jsを少しだけ。&lt;/li&gt;
&lt;li&gt;DB経験がさらっさらと言っていいほどないのでMySQL（Mariaでいいか）とRedis。&lt;/li&gt;
&lt;li&gt;インフラ関連技術は継続。Ansible、Serverspec、AWS。&lt;/li&gt;
&lt;li&gt;最近流行ってるOSSツール類。Elasticsearch、HashiCorp周り、Docker、Sensu、Rundeck、&lt;/li&gt;
&lt;li&gt;総合するとこれやってみるといいかも→ &lt;a href=&#34;http://syou6162.hatenablog.com/entry/2015/12/21/000843&#34;&gt;今年よかった習慣: ライフログ収集および可視化 - syou6162&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年総括</title>
      <link>http://chroju.github.io/blog/2015/12/31/looking-back-2015/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/12/31/looking-back-2015/</guid>
      <description>

&lt;p&gt;いろいろとチャレンジングに動いてみただけに、難しい年だった。&lt;/p&gt;

&lt;p&gt;今年初めの&lt;a href=&#34;http://chroju.github.io/blog/2015/01/12/post/&#34;&gt;「行動規範」&lt;/a&gt;で書いた通り、就職は、した。大手SIerからいわゆるベンチャー気質な企業に転職して、働き方はだいぶ変わった。毎日Excelとにらめっこしていた生活ではなく、業務上初めてsshを実行し、いまでは毎日実行するような生活になった。&lt;/p&gt;

&lt;p&gt;承認と判子と指示が行動の軸だった状態から、個々人のスキルと瞬発力と経験が物を言うような状態になり、率直に言ってついていけてない感はある。どこまでを許可無くやっちゃっていいのかわからない（いわゆるDon’t ask for permission, beg for forgiveness的文化）し、技術検証に手をつけ始めると基礎スキルが低いのでやたら時間を食ってしまい、その間に他の人にタスクを取られたりする。&lt;/p&gt;

&lt;p&gt;でもまったく手応えがないわけではなくて、個人開発で使っていたスキルで食い込んでいけるところも大きいし、自分に足りない、学ぶべきことは山のように社内に転がっているので、ひたすら旺盛に吸収していきたいと思う。というかそうしない限り、エンジニアとして生きる道がない。&lt;/p&gt;

&lt;p&gt;興味領域としてはDevOps方面にかなりアンテナが伸びてきている。大企業でわりとカッチリ運用設計を認めていた自分が、創業からそれなりの年数が経ち、技術的負債の増えてきたベンチャーに入ったことによる必然とも言えるのだろうが、運用上の穴や非効率な部分がとても目についていて、ルールで縛るのではなく、システム的に運用の統括を図ろうというのが目下の課題となっている。それこそInfrastructure as Codeを使うなりDockerを使うなり、もっと低レイヤーにシェルスクリプトをガリガリ書くなり。だから技術的に磨いて実践していくことが本当に多いのだけど、一方で運用方法の改変ということは社内への浸透が必要になり、政治的な問題にもなってくるので、コミュニケーション力結局必要やんけってところで非コミュな自分は悩んでいる。社内政治ほんとやだ。&lt;/p&gt;

&lt;p&gt;まぁ、総じて言えば楽しく仕事はできている。だけど大きな変化は副作用的に予期しない変化を別のところでもたらしたりするものでもあって、そのバランスを取ることがなんとも難しい。貪欲であることと、単に我欲を押し通すこととはまた違うわけで、もう少しコントールが必要だと思っている。リスクテイクしたのだからその分の負担の大きさを覚悟してはいたが、わりと想定以上なところはあってストレスは大きい。年齢も年齢なので、自分が「何をすべきか」という論調よりも、周囲、世の中にとって自分は「何であるのか」という視点で動いた方が良いのかもなという気がしてきた。もう少し、置かれた場所というものも大事にしたい。&lt;/p&gt;

&lt;p&gt;抽象論についつい流れてしまったけど、具体的な技術的成果はQiitaを中心に流していこうと思っているので、ブログはポエミーにこんな感じで締めてみる。また来年。&lt;/p&gt;

&lt;h2 id=&#34;おまけ-2015年定量評価:4b0e9716f5c3774ac1bd6e95779c4d66&#34;&gt;おまけ：2015年定量評価&lt;/h2&gt;

&lt;h3 id=&#34;技術:4b0e9716f5c3774ac1bd6e95779c4d66&#34;&gt;技術&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Linuxのサーバー運用に従事開始。初歩的なコマンドからさらい直せてる。&lt;/li&gt;
&lt;li&gt;CentOS7の業務利用開始。&lt;/li&gt;
&lt;li&gt;AWSの利用を個人でも業務でも開始。ただしほぼEC2。&lt;/li&gt;
&lt;li&gt;Ansible利用開始。&lt;/li&gt;
&lt;li&gt;Serverspec検証開始。&lt;/li&gt;
&lt;li&gt;Docker検証開始。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;イベント:4b0e9716f5c3774ac1bd6e95779c4d66&#34;&gt;イベント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JAWS DAYS 2015&lt;/li&gt;
&lt;li&gt;JAWS UG 初心者支部&lt;/li&gt;
&lt;li&gt;デブサミ2015&lt;/li&gt;
&lt;li&gt;Ansible入門イベント&lt;/li&gt;
&lt;li&gt;他社の障害対応気にならNight&lt;/li&gt;
&lt;li&gt;手羽の会（ハンズラボ）&lt;/li&gt;
&lt;li&gt;Serverworks Sonic!&lt;/li&gt;
&lt;li&gt;OSC東京 2015秋&lt;/li&gt;
&lt;li&gt;Rakuten Tech 2015&lt;/li&gt;
&lt;li&gt;RubyKaigi 2015&lt;/li&gt;
&lt;li&gt;他&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;書籍:4b0e9716f5c3774ac1bd6e95779c4d66&#34;&gt;書籍&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;リーダブルコード&lt;/li&gt;
&lt;li&gt;プログラマが知るべき97のこと&lt;/li&gt;
&lt;li&gt;それがぼくには楽しかったから&lt;/li&gt;
&lt;li&gt;ハッカーと画家&lt;/li&gt;
&lt;li&gt;UNIXという考え方&lt;/li&gt;
&lt;li&gt;インターネットのカタチ&lt;/li&gt;
&lt;li&gt;Amazon Web Services パターン別構築・運用ガイド&lt;/li&gt;
&lt;li&gt;シェルプログラミング実用テクニック&lt;/li&gt;
&lt;li&gt;はじめてUNIXで仕事をする人が読む本&lt;/li&gt;
&lt;li&gt;大規模サービス技術入門&lt;/li&gt;
&lt;li&gt;Serverspec&lt;/li&gt;
&lt;li&gt;CentOS7実践ガイド&lt;/li&gt;
&lt;li&gt;Team Geak&lt;/li&gt;
&lt;li&gt;オペレーティングシステムの基礎&lt;/li&gt;
&lt;li&gt;たのしいインフラの歩き方&lt;/li&gt;
&lt;li&gt;他&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Serverspecファーストインプレッション</title>
      <link>http://chroju.github.io/blog/2015/12/31/serverspec-first-impression/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/12/31/serverspec-first-impression/</guid>
      <description>

&lt;p&gt;秋ぐらいから個人開発で試してみて、最近業務でも使えないかとServerspecで試行錯誤している。はじめに言っておくと使用感もコンセプトもとてもしっくりきていて満足している一方で、技術的なハードルはAnsible等より上かもなと思っている。&lt;/p&gt;

&lt;h2 id=&#34;サーバー構成の-仕様書-代わりとして:2f71ca6ad43585246ea937c7a0e168d3&#34;&gt;サーバー構成の「仕様書」代わりとして&lt;/h2&gt;

&lt;p&gt;自分は当初Ansibleで構築したサーバーのあくまでテストツールとして使っていて、「こういう設定にしたい」という頭の中の設計書をAnsible playbooksとServerspecに同時に落とし込み、テストが通ることを確認していた。が、実際にじゃあこれを業務内でどう使おうかとワークフローを考えてみると、仕様書的な使い方がメインになりそうな気がしている。&lt;/p&gt;

&lt;p&gt;Serverspecによるテストを実行するのはどういったタイミングか。構築完了時点での確認に用いるのは然り。その後サーバー設定を変更したときには、その内容をServerspecにも反映して再度テストを行うはず。つまりサーバーの仕様、設定の変更にServerspecは追従していく。逆に言えば任意のタイミングで仕掛けたServerspecがエラーを吐くことで、不意のサーバー設定変更を検知できる。サーバーの「正」とされる状態を管理する仕様書の代替として、Serverspecが活用できる気がしている。&lt;/p&gt;

&lt;p&gt;中には&lt;a href=&#34;http://blog.kenjiskywalker.org/blog/2013/09/20/serverspec-with-cron/&#34;&gt;cronで監視チックに実行させている例&lt;/a&gt;もあるようだが、それもアリかなと思う。&lt;/p&gt;

&lt;h2 id=&#34;導入は簡単だが探求にはrubyスキル必須:2f71ca6ad43585246ea937c7a0e168d3&#34;&gt;導入は簡単だが探求にはRubyスキル必須&lt;/h2&gt;

&lt;p&gt;Ansibleが実質的にはYAMLを書くだけで使えてしまい、内部実装に用いられているPythonの知識をほとんど必要としないのに対し、Serverspecは徐ろにRubyスキルを必要とする。&lt;/p&gt;

&lt;p&gt;例えば私が初めて書いた&lt;code&gt;spec_helper.rb&lt;/code&gt;はこんな感じで、公式のtipsを反映したものとはいえ、デフォルト通りでは使っていない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;serverspec&#39;
require &#39;yaml&#39;

properties = YAML.load_file(&#39;properties.yml&#39;)

host = ENV[&#39;TARGET_HOST&#39;]
set_property properties[host]

set :backend, :exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際のテスト用のタスクを生成するのもRakefileである。もちろんデフォルトのままでも使えるには使えるのだが、ちょっと凝ったことをしようと思うとRubyが読み書きできていなくては難しい。これは「Rubyにより実装されたインフラテストツール」と理解するより、「RSpecをインフラテストに使えるよう拡張したもの」と捉えた方が正しいように思う。&lt;/p&gt;

&lt;p&gt;自分は元々Rubyがある程度書けるものの、RSpecが理解しきれていないので、もう少し勉強しなくてはならなさそう。&lt;/p&gt;

&lt;h2 id=&#34;国産ossであるアドバンテージ:2f71ca6ad43585246ea937c7a0e168d3&#34;&gt;国産OSSであるアドバンテージ&lt;/h2&gt;

&lt;p&gt;Serverspecの何より大きなアドバンテージはここではないのか。開発者も国内にいらっしゃるので、Rebuild.fmで直接声が聴けるし、解説本もいち早くO&amp;rsquo;Reilly Japanから発行されている。特にオライリー本発刊時のRebuild.fmは本自体の補完にもなる内容で、開発コンセプトなどがよく理解できるので聴いておきたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rebuild.fm/75/&#34;&gt;Rebuild: 75: Book Driven Development (gosukenator)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51P6qVOPALL._SL160_.jpg&#34; alt=&#34;Serverspec&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Serverspec&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.12.31&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;宮下 剛輔 &lt;br /&gt;オライリージャパン &lt;br /&gt;売り上げランキング: 213,793&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結論として先述のようにRSpecの拡張的な位置付けであり、その他Infra as Code関連のツールと比べても実装が薄いことから、取り回しがしやすく、今後も継続して使いやすいのではないかと思う。&lt;a href=&#34;https://github.com/ryotarai/infrataster&#34;&gt;Infrataster&lt;/a&gt;とも組み合わせられれば、よりテストの質は増しそう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>『Team Geek』読了</title>
      <link>http://chroju.github.io/blog/2015/12/14/review-team-geek/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/12/14/review-team-geek/</guid>
      <description>&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116309/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41SlY0zvpKL._SL160_.jpg&#34; alt=&#34;Team Geek ―Googleのギークたちはいかにしてチームを作るのか&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116309/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Team Geek ―Googleのギークたちはいかにしてチームを作るのか&lt;/a&gt;&lt;div class=&#34;amazlet-powered-date&#34; style=&#34;font-size:80%;margin-top:5px;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://www.amazlet.com/&#34; title=&#34;amazlet&#34; target=&#34;_blank&#34;&gt;amazlet&lt;/a&gt; at 15.12.14&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;Brian W. Fitzpatrick Ben Collins-Sussman &lt;br /&gt;オライリージャパン &lt;br /&gt;売り上げランキング: 18,890&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float: left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top: 5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116309/diary081213-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Amazon.co.jpで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ひたすら技術ドリブンに仕事できるのであればそれはそれで良いような気はするが、現実にはちゃんとコミュニケーション取る必要はあって、何かやりたいことがあればいわゆる政治的な課題に悩まされることになったりもする。本を読むときはつい技術系のものや個人のハッカーマインドに関するものを読みがちだけど、歳も歳だし組織論もかじろうかということで読んだ。元々読むつもりはあったが、紀伊國屋書店新宿本店でオライリーカレンダーのプレゼントやってたので背中押された。&lt;/p&gt;

&lt;p&gt;とても元も子もないまとめ方をしてしまうと、&lt;a href=&#34;http://blog.glidenote.com/blog/2015/08/17/move-to-akamai/&#34;&gt;KAIZEN Platform, Inc. のエンジニア行動指針&lt;/a&gt;がだいぶ本書に影響を受けたと思われるものになっていて、これに全社員がコミットできている状態というのは理想的なのだろうなと思ったりした。本書の内容にはとても賛同できるのだが、「組織論」である以上は自分だけが納得していても仕方なくて、社内でこの内容を文化として定着させなくてはならない。そこのハードルがなかなかに高い。&lt;/p&gt;

&lt;p&gt;本書でもそのあたりの話には「組織的操作の技法」として第5章をまるまる当てて触れられていて、例えば「道がないなら道を作る」＝草の根からツールの導入などを始めていく、「許可を求めるより寛容を求めるほうが簡単」、「安全なポジションまで昇進する」といったことが書かれている。結局はできることからやっていく、しかなくなってしまうのかもしれない。&lt;/p&gt;

&lt;p&gt;個人のマインドに関する話は大変参考になって、HRT（謙虚、尊敬、信頼）を軸として、「コードの価値を自分の価値と同一視するな」というあたりもだいぶクるものがあった。技術職としては技術的価値の優劣が極めて大きな価値をもっていて、ともすれば「モヒカン」だとか「マサカリ」といった言葉が表すような事態になりかねないのだが、チームが円滑に動くためにはそういったものは障壁となりかねない。技術的に未熟であるメンバーについても、謙虚に対応していくべきだし、また自分の技術は粛々と磨いていくことが必要なんだろうなと。&lt;/p&gt;

&lt;p&gt;こういう本は一人で読んでもやっぱり仕方がないところがあるので、チームで買ってシェアしたりもアリかもしれません。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dockerファーストインプレッション</title>
      <link>http://chroju.github.io/blog/2015/12/04/docker-first-impression/</link>
      <pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/12/04/docker-first-impression/</guid>
      <description>

&lt;p&gt;前回上げたインフラCIを試みた際、CircleCIを利用する中で初めてDockerに触れたので、今更ながらのファーストインプレッション。&lt;/p&gt;

&lt;h2 id=&#34;仮想マシン-と考えるとdockerは理解しづらい:ccbe1575a20deb569178af4585ba95c4&#34;&gt;「仮想マシン」と考えるとDockerは理解しづらい&lt;/h2&gt;

&lt;p&gt;Dockerを「仮想マシン」と称する文章も随所で見かけていたが、これを仮想マシンとして捉えると理解からは遠のく。自分自身、Dockerの概念的な理解にはかなり手こずっていて、OSがないのにどうやって「マシン」が動くのかわからなかったし、 &lt;code&gt;chroot&lt;/code&gt; のようにファイルシステム上に仮想的なディレクトリツリーを設けるものなのかと思っていた。&lt;/p&gt;

&lt;p&gt;Dockerは隔絶された名前空間上で展開されるプロセスに過ぎない。確かにコンテナはOSのような振る舞いを見せるが、そこにいわゆるVMwareやXenのような仮想「マシン」はない。あくまでホストOSの一部リソースを切り出して、仮想的に扱う技術に過ぎない。&lt;/p&gt;

&lt;h2 id=&#34;vagrantの代替:ccbe1575a20deb569178af4585ba95c4&#34;&gt;Vagrantの代替？&lt;/h2&gt;

&lt;p&gt;一度理解して、 &lt;code&gt;docker run&lt;/code&gt; を叩けるようになると利便性は即座に理解できる。OSをブートさせるわけではないのでコンテナの起動は従来の「仮想マシン」と比べて格段に速く、CircleCIで使われている用途同様、テスト用にまっさらな環境が即席で欲しいときには大変重宝する。こういう用途にはもともとVagrantが適していたのだと思うが、本当にすぐ使い捨ててしまいたいようなOS環境であれば、Dockerを使ったほうが遥かに手軽に起動も破棄もこなせる。&lt;/p&gt;

&lt;p&gt;ただあまりに簡単に起動、破棄ができるものの、作成したコンテナのイメージはコンテナ終了後も基本的に残存するので、調子に乗っているうちにいつの間にかディスクがかなり消費されていることが何度かあった。コンテナライフサイクルの把握と運用整備はマスト。&lt;/p&gt;

&lt;h2 id=&#34;ポータブルなインフラストラクチャー:ccbe1575a20deb569178af4585ba95c4&#34;&gt;ポータブルなインフラストラクチャー&lt;/h2&gt;

&lt;p&gt;Dockerを実用できる一例として、先日Traildashを採用する機会があった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/AppliedTrust/traildash&#34;&gt;AppliedTrust/traildash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CloudTrailという、AWS APIへのアクセスログをjsonで吐いてくれるAWSサービスがあるのだが、それをElasticsearchで集計してKibanaでブラウザ表示してくれるツール。このツールはDockerイメージで配布されていて、自分のサーバー上にpullしてきて、AWS APIへアクセスするための環境変数をいくつか設定するだけで使えるようになる。自分はElasticsearchの運用経験はないのだが、実質的に &lt;code&gt;docker run&lt;/code&gt; コマンド一発だけでそれが使えてしまう。（そのことの是非は置いておくとして）Dockerがアプリケーションサイドで実現することってこういうことなんだろうと。herokuが出たとき、ローカルからインターネットへのサービスのポータビリティが劇的に向上したわけだが、Dockerは稼働先を問わないわけで、ポータビリティはさらに拡大する。&lt;/p&gt;

&lt;p&gt;これはインフラ側としても嬉しいところで、今までnginxやらDBやらというミドル的な部分はアプリとしての要求もあり、インフラとしての要求もあり、双方の要件がガッシリ絡んでしまっていて、設定を後から見返すと「これなにゆえにこうなったんだっけ？」ってことが少なくなかったり、構築分担が面倒だったりというのがあって。コンテナとしてアプリをデプロイするとなると、サーバーとコンテナが明確に分離される。疎結合になる。ミドルの調整はコンテナ内だけを気にして行えばよいので、サーバーはとりあえずDocker動いてくれればいいやみたいな状態になる。雑だけど楽だろうなという気がぼんやりしている。&lt;/p&gt;

&lt;h2 id=&#34;dockerの運用:ccbe1575a20deb569178af4585ba95c4&#34;&gt;Dockerの運用&lt;/h2&gt;

&lt;p&gt;とりあえず前述のTraildashはDockerによる本番運用（外に出すものではないので本番といえるか微妙ではあるが）の発端にはなりそうなものの、いわゆるアプリ、サービスを本番稼働させるのがどんなもんなのかってところは自分自身見えてない。これをきちんと本番で扱うには可用性やら信頼性やらを担保しなくてはならないわけで、クラスタ構成に用いる&lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt;を導入するだとか、いわゆるインフラとしてのお仕事はやっぱり必要になる。そのへんどこかで試せればなぁとは思うので、ひとまずは自分の http;//chroju.net をDocker化しようかなどと。この前OSCでさくらのクラウド2万円クーポンもらったし、Dockerによる個人PaaS的なものでも作ってみようか。&lt;/p&gt;

&lt;p&gt;テストとしての利用には申し分のないところで、先日記事で上げたが&lt;a href=&#34;http://chroju.github.io/blog/2015/11/18/ansible-serverspec-circle-ci/&#34;&gt;AnsibleとServerspecのテスト&lt;/a&gt;に使えるまっさらなOS環境としてDockerは重宝している。Infra as Codeと大変相性がよくて、よくこのタイミングで出てきてくれたなという感じがする。時代の要請なのだろうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ansible &#43; Serverspec &#43; Docker &#43; circle ci によるインフラCI</title>
      <link>http://chroju.github.io/blog/2015/11/18/ansible-serverspec-circle-ci/</link>
      <pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chroju.github.io/blog/2015/11/18/ansible-serverspec-circle-ci/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.kenjiskywalker.org/blog/2014/11/13/circleci-docker-ansible-serverspec/&#34;&gt;CircleCIでDockerコンテナに対してansibleを実行しserverspecでテストをする - さよならインターネット&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この記事に書かれている内容を実際にやってみた。Ansibleを一旦は触ってみたところから、Circle.CIどころかCI経験が一切ない、ServerspecとDockerも使ったことがないという出発点だったので、得られるものはだいぶ大きい経験だった。完了したレポジトリは以下。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/chroju/ansible-ruby-devs&#34;&gt;chroju/ansible-ruby-devs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;ansibleにテストは必要か:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;Ansibleにテストは必要か？&lt;/h1&gt;

&lt;p&gt;AnsibleはPlaybookに書かれた設定通りにサーバーをセッティングしてくれるツールなのだから、傍証としてのテストは必要ないし、そもそもそれはAnsibleに対する信頼の問題だという話がある。（かのオライリーのServerspec本でも「Serverspecの必要性」を状況に応じて説明した章がある）が、自分は以下の理由からAnsible実行後のテストは必要と考えている。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;h2 id=&#34;playbookの書き方が間違っている:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;Playbookの書き方が間違っている&lt;/h2&gt;

&lt;p&gt;確かにPlaybookに書いた内容通りにサーバーは組まれるのだが、そもそもPlaybookの書き方がおかしくて、想定通りの実行結果にならない可能性はある。そのレベルであればコードレビューで気付くべきではないかという話もあるが、こういう趣味の個人開発では難しかったり、レビューで漏れがあったりというのも有り得るわけで、自動テストに任せられるならその方が確かかとは思う。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h2 id=&#34;冪等性の問題:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;冪等性の問題&lt;/h2&gt;

&lt;p&gt;特にshellモジュールを用いたときなどは冪等性が維持されない可能性があり、複数回の実行で想定外のサーバー状態になる可能性はある。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;テストツールの選定:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;テストツールの選定&lt;/h1&gt;

&lt;p&gt;普通にServerspec。Ansibleで定義したインベントリファイルやrolesをServerspecと共有してくれる&lt;a href=&#34;http://qiita.com/volanja/items/5e97432d6b231dbb31c1&#34;&gt;ansible_spec&lt;/a&gt;というツールもあり、当初はこちらを使おうとしていた。が、前述した「Ansibleの書き方自体が間違っている可能性」をテストするとなると、できるだけAnsibleとテストツールは疎結合とするべきと考え、ファイルや設定は一切共有しない形でServerspecを使っている。&lt;/p&gt;

&lt;h1 id=&#34;circle-ciの利用:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;Circle CIの利用&lt;/h1&gt;

&lt;p&gt;繰り返しになるが初である。インフラエンジニアがCIをすることはまぁない（なかった）。そんな頻繁に設定を変えるわけでもなし。インフラCIが可能かつ必要となったのは、Infrastructure as Codeの台頭と、クラウドネイティブ化によりImmutableかつ極めて速いライフサイクルでサーバーインフラが更新されるようになったことによるもの。&lt;/p&gt;

&lt;p&gt;で、Circle CIでググってもそんなに使い方みたいな初歩的な記事は出ない。どうもCIツールの使い方なんてのはJenkins登場の頃に身につけてて当然だろって感じの扱いっぽい。実際使いながら自分なりに理解したのは「レポジトリをpushすると、それを使って自動的にテストやデプロイを回してくれる」ツールということで、Circle CIについてはこんな感じに認識してるんだがあってんのかなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レポジトリの使用言語やファイル構成を見て良きに計らって勝手にテストしてくれる。&lt;/li&gt;
&lt;li&gt;もちろん自分でテストコマンドを書いてもOKで、Circle CIにやってほしいことは &lt;code&gt;circle.yml&lt;/code&gt; というYAMLファイルに書いてレポジトリの第一階層に置いておく。&lt;/li&gt;
&lt;li&gt;GitHub連携を前提としており、連携したレポジトリの &lt;code&gt;push&lt;/code&gt; をトリガーとして動作する。&lt;/li&gt;
&lt;li&gt;動作としてはCircle CI上でDockerコンテナ（ubuntuベース）を起動→レポジトリを &lt;code&gt;git clone&lt;/code&gt; →circle.ymlを読んで実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;実装:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;実装&lt;/h1&gt;

&lt;p&gt;実際のcircle.ymlはこうなった（といってもほぼ丸のまま冒頭記事のものを使っているが）。Dockerイメージのキャッシュには以下の記事も参考にした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stormcat.hatenablog.com/entry/2015/02/04/004227&#34;&gt;CircleCIでDockerイメージをキャッシュするのに、実はちょっとした工夫が必要な件 - tehepero note(・ω&amp;lt;)&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;machine:
  timezone:
    Asia/Tokyo
  services:
    - docker

dependencies:
  pre:
    - if [[ -e ~/docker/docker_ansible_image.tar ]]; then docker load --input ~/docker/docker_ansible_image.tar ; else docker build -t centos_ansible ~/ansible-ruby-devs/ ; mkdir -p ~/docker ; docker save -o ~/docker/docker_ansible_image.tar centos_ansible ; fi

  cache_directories:
    - &amp;quot;~/docker&amp;quot;

test:
  override:
    - docker run -v `pwd`/ansible:/ansible centos_ansible /bin/sh -c &#39;ansible-playbook /ansible/ci_site.yml -i /ansible/ci_hosts -c local &amp;amp;&amp;amp; cd /ansible/spec &amp;amp;&amp;amp; /home/develop/.rbenv/bin/rbenv exec bundle install &amp;amp;&amp;amp; /home/develop/.rbenv/bin/rbenv exec bundle exec rake spec&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この方法の肝はAnsibleとServerspecのフォルダを&lt;code&gt;docker run&lt;/code&gt;の&lt;code&gt;-v&lt;/code&gt;オプションでコンテナにマウントさせてしまって、ローカルでいずれも実行させている点だと思う。Dockerコンテナに対してSSHで外から処理を行うことももちろん可能ではあるが、ちょこちょこと小細工は必要だし、CI上の処理であればミニマムに済ませたいところ。&lt;/p&gt;

&lt;p&gt;テストにおいてはインベントリファイルも&lt;code&gt;site.yml&lt;/code&gt;もテスト用の設定値となるので、CI用のファイルを置いている。ただ、これらはレポジトリにとっては余分なファイルでしかないので、本来であれば取り除きたいような気もする。妙案は浮かばない。Dockerコンテナは2回目以降の実行だと&lt;code&gt;load&lt;/code&gt;するだけで済むし、AnsibleとServerspecはローカル実行なので、処理時間はだいぶ速い。&lt;/p&gt;

&lt;p&gt;実行結果はslackの個人チャンネルに流している。GtiHubに上げるだけで勝手にテストして結果も自動通知されるというのはとても楽しい。やれることの自由度が広すぎて夢が広がる。&lt;/p&gt;

&lt;h1 id=&#34;つまずいた点:8898f3cea5a7bf5fef79cdda3e165592&#34;&gt;つまずいた点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Dockerfile初挑戦につき、結構戸惑った。Ansibleでsshd_configを編集させていたのだが、コンテナにそもそもsshが入ってなくてコケたりした。&lt;/li&gt;
&lt;li&gt;Circle CIでのカレントディレクトリの扱いがわからず、しばらく &lt;code&gt;circle.yml&lt;/code&gt; で指定するファイルパスに悩まされた。クローンしたレポジトリの中にいる状態で始まるっぽい？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; に &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 付きでコマンド渡すときに &lt;code&gt;/bin/sh -c&lt;/code&gt; が必要だとしばらく気付かなかった。&lt;/li&gt;
&lt;li&gt;Dockerコンテナを &lt;code&gt;save&lt;/code&gt; して &lt;code&gt;load&lt;/code&gt; してるので、Dockerfile書き換えたら当然ながらCircle CIを「without cache」で実行しないとダメです。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>