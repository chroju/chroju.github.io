<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 環境構築 | the world as code]]></title>
  <link href="http://chroju.github.io/blog/categories/huan-jing-gou-zhu/atom.xml" rel="self"/>
  <link href="http://chroju.github.io/"/>
  <updated>2016-01-24T23:00:42+09:00</updated>
  <id>http://chroju.github.io/</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails環境構築（4）nginx導入]]></title>
    <link href="http://chroju.github.io/blog/2014/02/02/post/"/>
    <updated>2014-02-02T16:08:00+09:00</updated>
    <id>http://chroju.github.io/blog/2014/02/02/post</id>
    <content type="html"><![CDATA[<p>nginxの導入はyumを使ってサクッと。まずリポジトリを登録して、その後yumを使ってインストール。</p>

<pre><code>$ sudo rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
</code></pre>

<p>リポジトリが正しく登録されているか確認。</p>

<pre><code>$ yum list nginx --disablerepo=* --enablerepo=nginx
（中略）
Installed Packages
nginx.x86_64                1.4.4-1.e16.ngx           @nginx
</code></pre>

<p>yum install</p>

<pre><code>$ sudo yum install nginx
</code></pre>

<p>インストールは以上。EPEL様々ですね。あとは仮想ホスト設定用にディレクトリを作っておくという作業を入れる。</p>

<pre><code>$ sudo mkdir /etc/nginx/sites-available
$ sudo mkdir /etc/nginx/sites-enabled
$ sudo rm -f conf.d/*.conf
</code></pre>

<p>nginx.confを開いて、sites-enabledを読み込ませるための設定を追加する。具体的には以下の1行。</p>

<pre><code>include /etc/nginx/sites-enabled/*;
</code></pre>

<p>以上、終わり。最後にサービスを立ち上げて、自動起動を設定。</p>

<pre><code>$ sudo service nginx start
$ sudo chkconfig nginx on
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails環境構築（3）PostgreSQLインストール]]></title>
    <link href="http://chroju.github.io/blog/2014/01/26/post/"/>
    <updated>2014-01-26T16:22:00+09:00</updated>
    <id>http://chroju.github.io/blog/2014/01/26/post</id>
    <content type="html"><![CDATA[<p>ポスグレのインストール。yumで入るようなんだけど、聞くところによるとバージョンが古いらしい。念のため確認してみる。</p>

<pre><code>$ yum list | grep postgresql
（中略）
postgresql.i686                           8.4.18-1.el6_4                base
postgresql.x86_64                         8.4.18-1.el6_4                base
postgresql-contrib.x86_64                 8.4.18-1.el6_4                base
postgresql-devel.i686                     8.4.18-1.el6_4                base
postgresql-devel.x86_64                   8.4.18-1.el6_4                base
postgresql-docs.x86_64                    8.4.18-1.el6_4                base
postgresql-ip4r.x86_64                    1.05-1.el6                    epel
</code></pre>

<p>うん、確かに古い。この記事を書いている時点では9.3.2とか出てるけど、yumで用意されてるのは8.4である。最新を入れればいいというわけでもないが、さすがにちょっと古いような気が。（ところでyumに入ってるパッケージの調べ方、これであってんのかな？）</p>

<p>てわけで新しいバージョンをWebから持ってくる。<a href="http://yum.postgresql.org/repopackages.php">PostgreSQL RPM Repository (with Yum)</a>にいろいろあるので適切なリンクURLをコピー。1コ前のバージョンでPostgresql 9.2にしときましょか。自分のOSがなんだかわかんなくなったらunameコマンドで確認。</p>

<pre><code>$ uname -a
Linux xxx 2.6.32-358.23.2.el6.x86_64 #1 SMP Wed Oct 16 18:37:12 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
</code></pre>

<p>CentOS 6 x86_64であることがわかったので、wgetでダウンロード。</p>

<pre><code>$ wget -P /tmp http://yum.postgresql.org/9.2/redhat/rhel-6-x86_64/pgdg-centos92-9.2-6.noarch.rpm
</code></pre>

<p>続いてRPMにインストール。</p>

<pre><code>$ sudo rpm -ih /tmp/pgdg-centos92-9.2-6.noarch.rpm
warning: /temp/pgdg-centos92-9.2-6.noarch.rpm: Header V4 DSA/SHA1 Signature, key ID 442df0f8: NOKEY
########################################### [100%]
########################################### [100%]
</code></pre>

<p>rpmコマンドのオプションとして-iを付けるとパッケージのインストールが出来る。さらにhを付けると####で進捗が表示されるそうだ。必須オプションではないので、hについてはお好みで。</p>

<p>いよいよyumでインストール。</p>

<pre><code>$ yum -y install postgresql92-server.x86_64
</code></pre>

<p>……yum installって補完はできないんですかね入れたら初期化して起動て自動起動設定します。</p>

<pre><code>$ sudo service postgresql-9.2 initdb
$ sudo service postgresql-9.2 start
$ sudo chkconfig postgresql-9.2 on
</code></pre>

<p>ここまでで一旦インストールとしては終了。あとは基本的な設定をいくつか入れておく。</p>

<p>まずpg_hba.confを触る。これはDBに対するクライアントからのアクセスを制御するファイルで、さきほどinitdbしたときに作成されている。管理している内容としてはどのDBに対するどのユーザーのどこ（IP）からのアクセスを、どの認証方式で認証するか。必要に応じて書き入れてやる必要があるが、ひとまず参考書通りの設定をしておく。</p>

<pre><code>$ sudo vim /var/lib/pgsql/9.2/data
</code></pre>

<pre><code># TYPE  DATABASE     USER           ADDRESS                     METHOD

local  all           postgres                                   peer
local  all           all                                        md5
host   all           all            127.0.0.1/32                md5
host   all           all            ::1/128                     md5
</code></pre>

<p>終わったらPostgreSQLをリロード。</p>

<pre><code>$ sudo service postgresql-9.2 reload
</code></pre>

<p>今回はここまで。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.postgresql.jp/document/8.2/html/auth-pg-hba-conf.html">pg_hba.confファイル</a></li>
<li><a href="http://morizyun.github.io/blog/postgresql-mac-centos-rails/">Mac MountainLion/CentOS 6.4へのPostgreSQL 9.2の導入手順 - 酒と泪とRubyとRailsと</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails環境構築（2）Rubyのインストール + α]]></title>
    <link href="http://chroju.github.io/blog/2014/01/23/post/"/>
    <updated>2014-01-23T22:55:00+09:00</updated>
    <id>http://chroju.github.io/blog/2014/01/23/post</id>
    <content type="html"><![CDATA[<p>環境構築エントリーその2。まっさらなOSにRubyを入れていきます。</p>

<p>まずはいろいろパッケージのインストール。ぶっちゃけ参考書通りにやってるだけなので、どこまで必要なのかはよくわかってない。wgetとgitが必須であるのは言わずもがなだし、openssl-devel、make、postgresqlなんかもまぁ必要だろう。gccとかは要る……のか？</p>

<pre><code>$ sudo yum -y install gcc gcc-c++ make autoconf openssl-devel readline-devel libyaml-devel postgresql9.1-devel wget git
</code></pre>

<p>続いて意気揚々とRubyを入れたいとこだが、その前にrbenvを入れる。以前にエントリーで書いたこともあったけど、rbenvを使ってRubyをインストールすると、複数のバージョンのRubyを切り替えて使えるようになるので大変便利。インストールもwgetでダウンロードしてビルドしてなんてやり方をせず、rbenv installコマンドで簡単にできるようになる。</p>

<pre><code>$ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<p>rbenv自体のインストールもgithubからのクローンで済むのでスマートですね。ついでにもう1個git cloneしているのはruby-buildって奴で、これがないとrbenv install（rbenv使ってRubyをインストールするためのコマンド）が使えないらしい。で、入れたらPATHを通します。</p>

<pre><code>$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
</code></pre>

<p>PATHを通したらbash_profileを再読み込みして、それからtype rbenvコマンドを打ってインストールの正常完了を確認する。ちなみに自分は最初、bash_profileの再読み込み忘れて慌てました。</p>

<pre><code>$ source ~/.bash_profile
$ type rbenv # rbenv is a functionと表示されればOK
</code></pre>

<p>ここまでの手順はGitHubでrbenvのREADMEにも書かれてるから一読を推奨。</p>

<p>rbenvが入ったので、早速Rubyをインストール。</p>

<pre><code>$ rbenv install --list #インストール可能なバージョンが一覧表示される
$ rbenv install 1.9.3-p484 #入れるバージョンは任意で
</code></pre>

<p>もちろん複数バージョン入れてもOK。Rubyのインストールが完了したら、どのバージョンを使うか確定させる。使うコマンドはrbenv global。安易に想像できる話ではあるが、rbenv localもある。前者が文字通りシステム全体、どのシェルでも使われるバージョンであるのに対し、後者はローカル環境、すなわち今後入れるRailsのアプリケーションディレクトリとか、そういう環境でのRubyバージョンを指定するもの。今はローカル環境がないので、rbenv globalだけ指定すればいい。</p>

<pre><code>$ rbenv global 1.9.3-p484
$ ruby -v #確認
</code></pre>

<p>以上でRubyは入ったわけだけど、ついでに今後使うのでBundlerも入れておく。BundlerはRubyGemsを管理するためのツールであり、RubyGemsとはRubyのパッケージ管理システムのことである。GemはRailsでもめちゃめちゃ使うし、そもそものRailsもGemで入れることになるので、ここでBundlerを入れておく。</p>

<p>ちなみにGem自体はRubyと一緒にすでに入っている。が、バージョンが古い場合があるので更新してあげる必要がある。GemだけでももちろんRailsをインストールしたりはできるんだけど、その後の落とした各Gemの管理がマンドクセーってなるので、Bundlerが必要になる。まぁ詳しくは次回あたりで。</p>

<pre><code>$ gem update --system
$ gem -v #最新のバージョンになったことを確認
</code></pre>

<p>じゃあ喜び勇んでGemを使ってBundler入れましょう！と行きたいところだが、まだやることがある。デフォルトだとGemで何かをインストールしたとき、ずらずらーっとメッセージが出てくるのだが、それを消すためのおまじない。これで体感2倍ぐらいインストールが速くなるらしい。方法は簡単で、~/.gemrcファイルを新規で作成して、以下の内容を書き入れる。</p>

<pre><code>gem: --no-ri --no-rdoc
</code></pre>

<p>書き入れるって簡単にいうけどエディタは何使えばいいんだよ？って人はviあたり使っとけばいいと思う。もっといえば$ sudo yum install vimすればいいと思うんだが、そのあたりの話はまたおいおい。</p>

<p>はい、やっとこれで準備完了。Bundler入れます。</p>

<pre><code>$ rbenv exec gem install bundler
$ bundle -v
</code></pre>

<p>これで作業完了！のはずなんだが、なぜか自分はbundleにPATHが通ってなかったらしく、$ bundle -vできませんでした。なんでだろ？　仕方ないので<a href="http://qiita.com/hyshhryk/items/7e728ad57d963454b142">ココ</a>のやり方に従ってなんとかPATHは通ったんだけど、リンク先が何をやっていたのかはっきり言ってわかっておらず、不安。EXECUTABLE DIRECTORYってなんスか？</p>

<p>まーとりあえずRubyとBundlerは入ったので、次回はRailsのインストールといきますかね。</p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.ruedap.com/2011/05/14/ruby-gem-install-no-ri-no-rdoc-gemrc">RubyGemsでgemのインストール時に&ndash;no-ri &ndash;no-rdocをデフォルトにする - アインシュタインの電話番号</a></li>
<li><a href="http://qiita.com/ongaeshi/items/b07beebca21ba7ed8e7f">rbenv &amp; ruby-build の使い方メモ - Qiita [キータ]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails環境構築はじめます]]></title>
    <link href="http://chroju.github.io/blog/2014/01/18/post/"/>
    <updated>2014-01-18T21:50:00+09:00</updated>
    <id>http://chroju.github.io/blog/2014/01/18/post</id>
    <content type="html"><![CDATA[<p>Ruby on Railsのアプリ構築の勉強もそこそこに進んできたので、そろそろ環境構築始めてみようかと。（あんまりブログで書けてないけど……）。てわけで、この本買いました。</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844333755/diary081213-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Mb377pxwL._SL160_.jpg" alt="Ruby on Rails環境構築ガイド" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844333755/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">Ruby on Rails環境構築ガイド</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.03.01</div></div><div class="amazlet-detail">黒田 努 <br />インプレスジャパン <br />売り上げランキング: 44,343<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844333755/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>これまで環境としてはMax OS X 10.8にVMware FusionでCentOS浮かべて、その上でコード書いてWEBlick立ち上げてってやってたんだけど、考えてみればWEBlickでやるなら手元のMacで良かったわけで。いちいちコード書くのにSSHつなぐとかまぁ無駄なわけで。ということで、環境は次のように変えていく。</p>

<ul>
<li><p>開発環境：Mac OS X 10.8（物理）</p></li>
<li><p>Ruby 2.0.0</p></li>
<li>Rails 4.0</li>
<li><p>MySQL</p></li>
<li><p>ステージング：CentOS 6.4（Virtual Box）</p></li>
<li><p>Ruby 2.0.0</p></li>
<li>Rails 4.0</li>
<li>MySQL</li>
<li>nginx</li>
<li>unicorn</li>
<li><p>vagrant + chef soloで構築予定</p></li>
<li><p>本番環境：CentOS 6.4（VPS）</p></li>
<li><p>構成はステージングと同様</p></li>
</ul>


<p>Apacheは仕事でも使ったことがあるんで、流行りに乗ってnginx + unicornでやってみます。んでさらに流行りに乗ってvagrantとchef solo使おうかと。vagrantはちなみにもう試してみたけど、さっくり仮想マシンが立ってしまってビビる。あとでブログにまとめる予定。ただしchefはちょっとしっかりやんないと使えなさそう。</p>

<p>もともと自分はインフラをメインで飯食ってるんで、こころへんはあまり迷わずにいきたいところ。</p>
]]></content>
  </entry>
  
</feed>
