<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: solo | the world as code]]></title>
  <link href="http://chroju.github.io/blog/categories/solo/atom.xml" rel="self"/>
  <link href="http://chroju.github.io/"/>
  <updated>2016-01-03T14:03:55+09:00</updated>
  <id>http://chroju.github.io/</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[chefでさくらVPSの初期構築を全部自動化してみた]]></title>
    <link href="http://chroju.github.io/blog/2014/05/30/post/"/>
    <updated>2014-05-30T21:27:00+09:00</updated>
    <id>http://chroju.github.io/blog/2014/05/30/post</id>
    <content type="html"><![CDATA[<p>Chefでサーバー構築を全部自動化して、借りているさくらVPSに当ててみた。意地でも手作業はまったく入れない完全自動構築設定。これはよい。毎回手作業やらずに済むというのは、抜け漏れをなくすという点でも、構築時間を短縮するという面でも本当に楽。</p>

<h2>前提</h2>

<p>今回構築するサーバーの前提は次の通り。</p>

<ul>
<li>CentOS 6.4環境で試行</li>
<li>vagrantを使って試験後、さくらVPSに対して適用</li>
<li><p>基本の設定として以下を実施</p></li>
<li><p>構築用のユーザーを作成</p></li>
<li>構築用ユーザーにsudo権限を付与</li>
<li>構築用ユーザーを秘密鍵認証でsshログイン許可</li>
<li>rootによるsshログインを禁止</li>
<li>パスワード認証によるログインを禁止</li>
<li>sshのポート番号を変更</li>
<li><p>ssh, http以外のアクセスをiptablesでシャットアウト</p></li>
<li><p>nginxを導入</p></li>
<li>将来的にunicornを入れるための設定を準備</li>
<li>極力サードパーティクックブックは使わない（ブラックボックス化が嫌）</li>
</ul>


<h2>レシピ</h2>

<p>まず「どんなサーバーだろうとまず実行するだろうセキュリティ上の設定」はdefault_tasksというレシピにまとめた。</p>

<h3>default_tasks</h3>

<pre><code># sshdサービスの有効化
service "sshd" do
  supports :status =&gt; true, :restart =&gt; true, :reload =&gt; true
  action [ :enable, :start ]
end

# sshd_configの配置
template "sshd_config" do
  path "/etc/ssh/sshd_config"
  source "sshd_config.erb"
  owner "root"
  group "root"
  mode 0600
  notifies :restart, "service[sshd]"
end

# iptablesの設定
iptables_rule "iptables"
</code></pre>

<p>sshdの有効化と、templateを使ったsshd_configの配置、そしてiptablesの設定。このうちiptablesについてはサードパーティ・クックブックを使っている。</p>

<p><a href="https://github.com/opscode-cookbooks/iptables">opscode-cookbooks/iptables</a></p>

<p>iptablesに挿入したい内容をtemplateで用意し、<code>iptables_rule "template name"</code>の形でレシピ内に書き込んでおくと、templateの内容がそのままiptablesに追加されるというシンプルなレシピ。まぁ、これぐらいはサードパーティ使ってもよいかな、と。iptablesを丸ごとtemplate化してアップロードするという手もあるにはあるのだが。</p>

<p>sshd_configはCentOSから引っ張ってきたものをそのまま流用し、Attributesを使っていろいろと書き換えられるように仕込んだ。長いので割愛するけど、設定可能なAttributesはこんな感じ。</p>

<pre><code>  "sshd" : {
    "Port" : 22,
    "MaxStartups" : 10,
    "PermitRootLogin" : "yes",
    "RSAAuthentication" : "yes",
    "PubkeyAuthentication" : "yes",
    "AuthorizedKeysFile" : ".ssh/authorized_keys",
    "PasswordAuthentication" : "yes"
  },
</code></pre>

<p>よく編集する箇所を中心にAttributesとしてみた。他に設定したい項目が増えたら随時足していけば良いかなと。</p>

<h3>users</h3>

<p>ユーザーの作成は別のレシピに切り分け。</p>

<pre><code># wheelグループの作成
group "wheel" do
  gid 10
  action :create
end

# data bagsよりユーザーを作成
data_ids = data_bag('users')

data_ids.each do |id|
  # ユーザー作成
  u = data_bag_item('users', id)
  user u['username'] do
    password u['password']
    supports :manage_home =&gt; true, :non_unique =&gt; false
    group u['group']
    action [:create]
  end

  # ssh公開鍵配置用のディレクトリ作成
  directory "/home/#{id}/.ssh" do
    owner u["id"]
    group u["id"]
    mode 0700
    action :create
  end

  # ssh公開鍵の配置
  file "/home/#{id}/.ssh/authorized_keys" do
    owner u["id"]
    mode 0600
    content u["key"]
    action :create_if_missing
  end
end
</code></pre>

<p>sudoを許可するユーザーをwheelグループに入れるという定番設定。wheelを実際にsudo許可するのはまた別のレシピの仕事で、ここではグループとユーザーの作成のみ。</p>

<p>ユーザー作成にはdata_bagを使った。<a href="http://girigiribauer.com/archives/1066">こちら</a>を参考として作っている。ポイントとしては公開鍵まで登録させていること。fileリソースを使って実にシンプルな配置の仕方だけど、非常に楽ではある。</p>

<p>あまり詳しくは知らないのだが、data_bagについては暗号化する方法があるみたいなので、公開鍵を生でべろっと貼っとくのが気になる場合はそのへんも仕掛けておくと良さそう。</p>

<h3>nginx</h3>

<p>一番苦労した気がするし、あまり美しくない。。。</p>

<pre><code>
# nginxインストール
package "nginx" do
  action :install
end

# nginx有効化
service "nginx" do
  supports :status =&gt; true, :restart =&gt; true, :reload =&gt; true
  action [ :enable, :start ]
end

# templateからnginx.confを配置
template "nginx" do
  path "/etc/nginx/nginx.conf"
  source "nginx.conf.erb"
  owner "root"
  group "root"
  mode 0644
  notifies :reload, "service[nginx]"
end

# ディレクトリ作成
directories = ["/etc/nginx/sites-available","/etc/nginx/sites-enabled","/var/www","/var/www/#{node['nginx']['root']}","/var/www/#{node['unicorn']['root']}"]
directories.each do |directory_name|
  directory "#{directory_name}" do
    owner "root"
    group "root"
    mode 0644
    action :create
  end
end

# sites設定をtemplateごとに実行
node['nginx']['nginx_sites'].each do |site|
  # templateからsites-available配下に設定ファイルを配置
  template "nginx_sites_available" do
    path "/etc/nginx/sites-available/#{site}"
    source "nginx/#{site}.erb"
    owner "root"
    group "root"
    mode 0644
  end

  # sites-enabled配下へシンボリックリンクを配置
  link "/etc/nginx/sites-enabled/#{site}" do
    to "/etc/nginx/sites-available/#{site}"
    link_type :symbolic
    action :create
    notifies :reload, "service[nginx]"
  end

end
</code></pre>

<p>インストール、サービス有効化、templateからのnginx.confアップロードまでは良いとして。ディレクトリ作成がなんか。。。汚い。。。</p>

<p>/var/wwwを掘って、その中にウェブサイトのルートを置いたり、バーチャルホストの設定でsites-availableとかその辺を使っているもんで、ディレクトリ作成の量が多くなってしまった。いずれも設定は同じなので配列でやるのがベターだとは思うのだが、どうにも汚い。なんとかしたいとこではある。</p>

<p>あとはsites-availableにtemplateから設定ファイルを配置して、linkリソースでsites-enabledにシンボリックリンクを貼って終了。nginxの使い方はsites-availableを使うパターンだけではないので、もう少しスッキリさせることはできそう。</p>

<h2>サードパーティ・クックブック</h2>

<p>サードパーティとして導入したのはさっきのiptablesと、sudoの2つ。</p>

<p><a href="https://github.com/opscode-cookbooks/sudo">opscode-cookbooks/sudo</a></p>

<p>sudoはvisudoを<code>execute</code>で走らせるってのも怖いし、その後ファイル編集をどうやったらいいのかよくわからんなってのと、sudoresファイルをtemplateで上げるってのもちょっと怖いという感覚的な問題からサードパーティ採用とした。</p>

<p>使い方としては簡単なもので、変数でsudoを許可するユーザーやグループを指定して、passwordlessとするかどうかを設定するぐらいで終わり。</p>

<pre><code>  "authorization" : {
    "sudo" : {
      "groups" : ["wheel"],
      "passwordless" : "true"
    }
  },
</code></pre>

<p>冒頭でも書いた通り、なるべくサードパーティを使わない方針で行きたいんだけど、自力でレシピを書けないor書く自信がないところは已むなく実績のあるサードパーティを使ったという感じ。まぁサードパーティと言っても結局は人の手で書かれたレシピなので、自分でchef力上げれば相応なレシピは自力で書けるはず。このあたりは結局「どこまでchef力の向上に時間を割くか」という部分とトレードオフになるのかと。</p>

<h2>今後やりたいこと</h2>

<p>最終的にこのサーバーではRails動かしたいので、Rubyやpostgresqlのインストールを今後実装したい。あと「取りあえず動けばいいや」路線で一度作ってしまったので、もう少しメンテナンス性の高いもの、読みやすいレシピには育てたいところ。</p>

<p>汎用的に誰でもどんな用途でも使えるって感じではないと思うが、とりあえずGitHubには上げてみた。秘伝のタレのようにこれをじわじわ育てていくというのは良いなぁ。Linuxの勉強をするごとにきっと強靭なレシピとなっていくのだろう。まさに「レシピ」だな、これは。</p>

<p>まずは静的なページをってことで、近日中にプロフィールでも置いて公開する予定。</p>

<p><a href="https://github.com/chroju/chef_web_server">https://github.com/chroju/chef_web_server</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://tsuchikazu.net/vps_chef_solo/">さくらVPSの初期設定をChef Soloでやってみた〜サードパーティcookbookの使い方〜 | tsuchikazu blog</a></li>
<li><a href="http://ch.nicovideo.jp/dwango-engineer/blomaga/ar334285">Chef Soloと Knife Soloでの ニコニコサーバー構築 (4) ～コツ編～:dwango エンジニア ブロマガ:ドワンゴ研究開発チャンネル(ドワンゴグループのエンジニア) - ニコニコチャンネル:生活</a></li>
<li><a href="http://d.hatena.ne.jp/ntaku/20130324/1364132658">入門Chef-Soloを片手にRailsアプリを動作させるところまでやってみた - プログラミングノート</a></li>
<li><a href="http://m-tkg.hatenadiary.jp/entry/2013/12/12/151254">単純な環境構築を知る -Chefでiptables書き換え- - 技術いろいろ勉強メモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef soloはじめの一歩]]></title>
    <link href="http://chroju.github.io/blog/2014/05/06/02-post/"/>
    <updated>2014-05-06T13:56:00+09:00</updated>
    <id>http://chroju.github.io/blog/2014/05/06/02-post</id>
    <content type="html"><![CDATA[<p>Capistranoでいろいろやったので今度はChef、正確にはChef solo。サーバー立てて最初にやること（ユーザー作成、sshd_configの設定、もろもろインストールとか）はだいたい決まっていると思うので、Chefで全部コード化してしまえたらやっぱり楽だなぁという思い。なおChefとCapistranoの境界線については、システム全体をまかなうのがChefであり、Capistranoはあくまでアプリ単位のデプロイに使うイメージでいる。rbenvやRubyを入れるのはChef。/var/www/RailsApp/配下（仮）をごにょごにょするのがCapistrano。</p>

<p>参考としたのはお馴染みのアレです。ただ、すでに出版から1年近く経っているので若干事情が変わっている箇所もあったりした。</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BSPH158/diary081213-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/31u6VLGX2kL._SL160_.jpg" alt="入門Chef Solo - Infrastructure as Code" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BSPH158/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">入門Chef Solo - Infrastructure as Code</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.03.01</div></div><div class="amazlet-detail">伊藤直也 (2013-03-11)<br />売り上げランキング: 2,821<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BSPH158/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<h2>基本構成</h2>

<p>chefの基本構成を取りあえず押さえる。</p>

<ul>
<li>chef: インフラ自動化のフレームワーク</li>
<li>chef solo: 本来クラサバ構成で扱うChefをスタンドアロンで使えるようにしたもの</li>
<li>knife-solo: リモートからchef soloの実行に必要なツール</li>
<li>Berkshelf: サードパーティクックブックの管理に使う</li>
</ul>


<h2>インストール</h2>

<p>上記のものを全部インストール。Gemfile書いてる場合はそっちに追加で。また最後に<code>rbenv rehash</code>を忘れずに。</p>

<pre><code>gem install chef -v 11.10 --no-ri --no-rdoc
gem install knife-solo --no-ri --no-rdoc
gem install berkshelf
rbenv rehash
</code></pre>

<p>ちなみにChefの最新はv11.12.xなんだけど、どうもバグがあるっぽく上手くいかなかったのでバージョン指定で古いの入れてる。</p>

<ul>
<li>参考：<a href="http://qiita.com/sakatuba@github/items/1548818b02735b2047ad">Chef 11.12.2のknife configureが失敗する - Qiita</a></li>
</ul>


<h2>セットアップ</h2>

<p>初期設定。</p>

<pre><code>knife configure # 対話は全部デフォでOK
knife solo init chef-repo # chef-repoフォルダがレポジトリとして作られる
cd chef-repo
</code></pre>

<p>chef soloを使うリモート側へもchefをインストール。</p>

<pre><code>$ knife solo prepare vagrant@192.168.1.1
</code></pre>

<h2>Berkshelf</h2>

<p>続いてBerkshelfの初期設定。</p>

<pre><code>$ berks init
</code></pre>

<p>しかし、ここでまさかのエラー。。。</p>

<pre><code>cannot load such file -- hitimes/hitimes (LoadError)
</code></pre>

<p><a href="https://github.com/copiousfreetime/hitimes/issues/17">ここ</a>によればgem updateしてからhitimesを再インストールすれば大丈夫だよ的な話。やってみる。</p>

<pre><code>$ gem update
$ gem -v
2.2.2
$ gem install hitimes
$ rbenv rehash
</code></pre>

<p>気を取り直して。</p>

<pre><code>$ berks init
The resource at '/Users/chroju/Dropbox/lab/chef/vagrant-repo/metadata.rb' does not appear to be a valid cookbook. Does it have a metadata.rb?
</code></pre>

<p>(&lsquo;A`)ｳﾞｧｰ</p>

<p>わけわからんし、<code>berks init</code>しなくてもBerkfile自前で作りゃイケるらしいので諦めることにする。Berksfileを<code>touch</code>してからvimで編集。</p>

<pre><code>site :opscode

cookbook 'sudo'
cookbook 'iptables`
</code></pre>

<p>Gemfileと似たような書き方で、<code>cookbook 'hoge'</code>と書くとそのクックブックが<a href="http://community.opscode.com/">Opscode</a>からインストールされる。Opscode以外のGitHubで公開されているクックブックを使う場合は、これもGemfileのように<code>cookbook 'fuga' git:"..."</code>の形でURL指定が可能。</p>

<p>そしていざインストール……だがまたしてもエラー。</p>

<pre><code>$ berks install --path cookbooks
DEPRECATED: `berks install --path [PATH}` has been replaced by `berks vendor`.
DEPRECATED: Re-run your command as `berks vendor [PATH]` or see `berks help vendor`.
</code></pre>

<p>そろそろこのあたりから笑えてきた。調べたところ、Berkshelf v3.xでは<code>berks install --path hoge</code>は使えないらしいス。<code>berks vendor hoge</code>が今どきらしい。</p>

<pre><code>$ berks vendor cookbooks
destination already exists /Users/chroju/Dropbox/lab/chef/vagrant-repo/cookbooks. Delete it and try again or use a different filepath.
</code></pre>

<p>えー。</p>

<pre><code>$ rm -rf cookbooks
$ berks vendor cookbooks

DEPRECATED: Your Berksfile contains a site location pointing to the Opscode Community Site (site :opscode). Site locations have been replaced by the source location. Change this to: 'source "http://api.berkshelf.com"' to remove this warning. For more information visit https://github.com/berkshelf/berkshelf/wiki/deprecated-locations
Resolving cookbook dependencies...
Using iptables (0.13.2)
Using sudo (2.5.2)
# 以下略
</code></pre>

<p>文句言いながらもやってくれました。冒頭の1行目の書き方は<code>site :opscode</code>というのが通例だったけど、v2.0から<code>source "https://api.berkshelf.com"</code>に変わった模様。ただ、コマンドは通るには通るんだけど。</p>

<p>最初に<code>berks vendor cookbooks</code>したときに出たエラー、要は「すでにあるフォルダにはインストールできねーよ」って話なのだが、だとしたらBerksfileを書き換えて追加インストールしたいときはどうしたらいいんだろう？というのは素朴な疑問。サードパーティのクックブックは直接編集しない（変数などは自分のレシピの方で代入する）のが基本らしいので、一度フォルダを消してから再度<code>berks vendro cookbooks</code>でも不都合はないと言えばないのだが、なんだか馬鹿らしい感じもする。</p>

<p>あと<code>berks install</code>コマンドもあるんだけど使い方わかってない。</p>

<h2>レシピ作成</h2>

<p>その前におさえる基本。</p>

<ul>
<li>nodes/hostname.json : 実行するレシピをrun_listとして記述</li>
<li>solo.rb : chefが利用する各種パスの設定ファイル（knife soloの場合は生成されない）</li>
<li>cookbooks/hoge/recipes/default.rb : レシピ本体</li>
<li>cookbooks/hoge/templates/default/* : テンプレートファイル</li>
<li>cookbooks/hoge/files/* : 静的ファイル</li>
<li>cookbooks/hoge/attributes/* : 変数の格納</li>
</ul>


<p>あとcookbooksフォルダはサードパーティ製のものを入れて、自家製のクックブックはsite-cookbooksフォルダに入れるっていうルールもある。名前がわかりにくいが。</p>

<p>このへん押さえつつ、次回はレシピ作成編です。</p>
]]></content>
  </entry>
  
</feed>
