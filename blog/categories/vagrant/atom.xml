<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | the world as code]]></title>
  <link href="http://chroju.github.io/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://chroju.github.io/"/>
  <updated>2015-12-31T19:33:54+09:00</updated>
  <id>http://chroju.github.io/</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[$ vagrant sshで仮想マシンに入れなくなった場合の対処法]]></title>
    <link href="http://chroju.github.io/blog/2014/02/02/02-post/"/>
    <updated>2014-02-02T16:27:00+09:00</updated>
    <id>http://chroju.github.io/blog/2014/02/02/02-post</id>
    <content type="html"><![CDATA[<p>やらかしました。Rails環境構築シリーズ、次回でセキュリティ周りの設定をまとめようと思い、普段の要領でiptablesをいじったりsshのポート番号変えたりしてたんだけど、なんか設定しくじったっぽくてvagrant sshできなくなった。やべえ、仮想マシンだしこれもう詰んだんじゃねと思ったんだけど、なんとか元に戻せたので対処法まとめとく。</p>

<p>といっても簡単な話です。</p>

<ul>
<li>Virtual BoxをGUIで開く</li>
<li>該当仮想マシンがリストに入ってるので強制終了し、Virtual Box上で起動し直す</li>
<li>rootでログイン（パスワードはデフォルトでvagrant）</li>
<li>おかしい箇所を直す</li>
</ul>


<p>コマンド叩いて操作してるので忘れがちだけど、vagrantはVirtual Box上（有料版ならVMware上も有り得るが）に仮想マシンを立ててるので、普通にGUIから入ればいい話です。rootで入ってぐいぐいヤバそうなとこ直して、直したらターミナルからssh試してみてってのを交互に繰り返して直しませう。</p>

<p>rootで入り直す前に一度VM落とす手順を入れましたが、こうしないとGUIから入れないみたいです。僕の場合だとターミナルでiptablesとかいじって、よしじゃあsshログインできるか試してみようってことで一旦ログアウトしたら入れなくなった（アホだ）のでVMが立ち上がりっぱなしになっちゃったわけなんだけど、この状態で取りあえずVirtual Box開いてみたらコンソールを表示するボタンがグレーアウトされてました。なので一旦強制終了するしかないです。</p>

<h2>余談</h2>

<p>ちなみに今回何をやらかしたのかだけど、ポイントとしてはsshのポート番号を変えた（/.ssh/configをいじった）のと、iptablesをいじったのの二点。これを普通のVMの感覚でやっちゃったのがマズかったみたい。</p>

<p>まず、vagrant sshで使われているポート番号はデフォルトで22ではなく、2222なのです。これはホスト側で$ vagrant ssh-configコマンドを打ってみるとわかる。</p>

<pre><code>Host default
  Hostname 127.0.0.1
  User vagrant
  Port 2222
</code></pre>

<p>一方、ssh以外の各vagrantコマンドについても、いずれもsshを使っている模様。vagrant upもvagrant haltもssh経由で命令しているみたいです。ただ、こちらは通常通りPort 22を使っているのでややこしい。このあたりの事情を踏まえた上でポート番号あれこれしないと、必要なはずのポート塞いじゃってうああああああってなっちゃうっぽい。</p>

<p>まぁvagrantで作ったサーバーを表に公開することはあんまりないと思うんで、このへん触らないのが吉かも。練習でやりたいのであれば、vagrant以外でサーバー用意してやった方が良さそうな気がします。</p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://girigiribauer.com/archives/1127">Vagrant で SSH の接続ポート番号を変えると、けっこう複雑になるという話 | girigiribauer.com</a></li>
<li><a href="http://d.hatena.ne.jp/okinaka/20110805/1312474847">Vagrant のベースBOX作成手順 (Scientific Linux 6.1) - エンジニアきまぐれTips</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails環境構築（1） Vagrantで仮想マシン構築]]></title>
    <link href="http://chroju.github.io/blog/2014/01/19/post/"/>
    <updated>2014-01-19T21:08:00+09:00</updated>
    <id>http://chroju.github.io/blog/2014/01/19/post</id>
    <content type="html"><![CDATA[<p>Vagrantで仮想サーバー構築してみたのでメモ。構築するだけなら、楽。大してコマンドも要らない。</p>

<h2>インストール</h2>

<p>まずはGemでインストールしてみたけど、バージョン古いっぽくてダメだった。なので、ふつうにウェブからダウンロードしてインストールします。URLは以下。ついでに「GET STARTED」からいろいろ読んどくといいと思う。公式のRead meに勝るものはないです。</p>

<p><a href="http://www.vagrantup.com/">http://www.vagrantup.com/</a></p>

<p>インストールしたらバージョン確認。</p>

<pre><code>$ vagrant -v
</code></pre>

<h2>boxの追加</h2>

<p>まずはboxと呼ばれる仮想マシンイメージをvagrantに追加する。</p>

<pre><code>$ vagrant box add hoge url
</code></pre>

<p>hogeは適当なイメージ名、urlはウェブで公開されているboxのurl。イメージは<a href="http://www.vagrantbox.es/">ココ</a>に大量にあるので、任意のサーバーのURLをコピってくればOK。ほとんどがLinux、ちょこっとだけBSD。</p>

<h2>vagrantの初期化</h2>

<pre><code>$ mkdir vagrant
$ cd vagrant
$ vagrant init hoge
</code></pre>

<p>vagrant initでカレントディレクトリをvagrant用に初期化する。なのでmkdirは好きなとこに好きなフォルダ作ればよい。そこに仮想マシンの設定ファイルが作られるので。vagrant initの引数にはさっきvagrant box addで追加した仮想マシンイメージの名前を渡してやる。渡さないとデフォルト値で設定ファイルが作られてしまう。これで最初ハマった。ちなみにどうハマるかというと、vagrant upしたときにこんなエラーが出る。</p>

<pre><code>There are errors in the configuration of this machine. Please fix
the following errors and try again:

vm:
* The box 'base' could not be found.
</code></pre>

<p>「base」という名前のboxがないというエラー。どうもデフォルトでbaseという名前が使われるらしいのだが、さっきbox addした名前と異なるので、そんなboxはないから立ち上げられませんよということ。もしこの状態になってしまった場合の対処としては、vagrantfileのconfig.vm.boxの値を該当の仮想マシンイメージ名に替えてやれば上がるようになる。</p>

<p>話が飛んでしまったが、Vagrantfileはvagrant initしたディレクトリの中に出力されている。で、仮想マシンを上げる前にちょっとコイツの編集が必要。</p>

<pre><code>  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.xx.xx"
</code></pre>

<p>上のconfig〜行のコメントアウトを外してやって、IPを適当に設定する。が、自分の環境だとこれだけでは仮想マシンを起動した時にエラーが出てしまって、さらにprivate_networkをpublic_networkに替えてやらなくてはならなかった。ググってるとこの手順やってる人ほとんどいないんだけど、何が原因だろう。</p>

<h2>仮想マシンの起動</h2>

<p>で、ここまでやっていよいよVM起動。</p>

<pre><code>$ vagrant up
</code></pre>

<p>てっきりVirtual boxがGUIでも上がってくるのかと思ったが、仮想マシン上がりましたよ―というメッセージが表示されるだけでGUI上は何の変化もない。なのでOSが上がってるのかわかりにくいんだけど、SSHで入ると実際入れるのでどうも上がっているらしい（ちなみにGUIでVirtual box上げてももちろん起動状態はわかる。あとvagrant statusコマンドでもわかる）。</p>

<pre><code>$ vagrant ssh
</code></pre>

<p>bashのsshコマンド発行しなくても、vagrantの独自コマンドで入れる。楽。ちなみに入るときのユーザーは勝手にvagrantというユーザーが作られているんだとか。あとはもう好きにやっちゃってーというところ。他に使いそうなコマンドは以下の表あたりか。</p>

<table>
<thead>
<tr>
<th> コマンド         </th>
<th> 意味                    </th>
</tr>
</thead>
<tbody>
<tr>
<td> vagrant halt     </td>
<td> 仮想マシンの停止        </td>
</tr>
<tr>
<td> vagrant destroy  </td>
<td> 仮想マシンの削除        </td>
</tr>
<tr>
<td> vagrant box list </td>
<td> 仮想マシンイメージリストの表示 </td>
</tr>
<tr>
<td> vagrant status   </td>
<td> 仮想マシンの状態確認      </td>
</tr>
</tbody>
</table>


<p>vagrantが真価を発揮するのって多分chef-soloと組み合わせたときなので、今の段階だと「わざわざマウス使わずともターミナル上で仮想マシン上げられて便利〜」ぐらいの感想しか正直ないです。もっと勉強しよ。</p>

<h2>参考</h2>

<p><a href="http://www.happytrap.jp/blogs/2013/07/26/10602/">Vagrantで仮想サーバ構築 | HAPPY*TRAP</a></p>

<p><a href="http://qiita.com/nobu_blast/items/828cf7c002100a0fdeb2">vagrant + virtualbox 仮想サーバ構築 - Qiita [キータ]</a></p>
]]></content>
  </entry>
  
</feed>
