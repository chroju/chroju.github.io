<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | the world as code]]></title>
  <link href="http://chroju.github.io/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://chroju.github.io/"/>
  <updated>2016-01-30T10:46:27+09:00</updated>
  <id>http://chroju.github.io/</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ops JAWS#3に行ってきた]]></title>
    <link href="http://chroju.github.io/blog/2016/01/30/ops-jaws-3/"/>
    <updated>2016-01-30T10:32:13+09:00</updated>
    <id>http://chroju.github.io/blog/2016/01/30/ops-jaws-3</id>
    <content type="html"><![CDATA[<p>その名の通り運用管理系の話題を中心としたAWSユーザーグループです。ハンズオンもあるということで行ってきた。</p>

<p>メインとなったのはconfig rulesのハンズオン。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/g0o2kIUtI0yKmw" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/okochang/opsjaws-20160128" title="OpsJAWS 20160128" target="_blank">OpsJAWS 20160128</a> </strong> from <strong><a href="//www.slideshare.net/okochang" target="_blank">hideaki yanase</a></strong> </div></p>

<p>AWSリソース、使っているうちに無秩序になっていき、ルールの統一がはかれなくなったり、全体像が見えづらくなったりということはありがちですが、config rulesを使ってもうシステム的に制御しちゃいましょうというテーマ。例えばCloudTrailが有効化されていない場合にアラートを上げる、とか。監視結果が変化すると、それをトリガーにLambdaをinvokeしたりもできるので、それこそなんでもできる感じ。</p>

<p>やってみて気付いたけど、やっぱり自分は運用が好きなのかもしれない。システムによって、本来不確かであったり信用性に劣っていたりするはずの人間の動作を制御する、というのが好きなんだろうなと。SEやってた頃は運用の制御はExcel資料が元になることが多くて、それ自体は特に楽しくなかったのだけど、システム的に作りこんでいくのはわくわくする。これはいい気付きだったし、次回も是非参加してみたい。</p>

<p>問題としてはやはり、Lambda Functionを書くのにpythonかnode.jsを使う必要がある（いまさらJavaってのもなぁ）ので、次回参加するのであればそれまでにpythonをある程度やっておかねばなぁというところ。</p>

<p>その他、昨年とてもおもしろく読ませていただいたSDの特集『なぜ「運用でカバー」がダメなのか』を書かれた運用設計ラボの波多野氏がいらっしゃっていたりして、個人的にはテンション上がったりもしました。「運用でカバー」をググるとトップに出てくる、なんだか好評を得てしまった拙記事はこちら（あえて移行前ブログを貼るアレ）。</p>

<p><a href="http://chroju89.hatenablog.jp/entry/2015/02/11/164926">Software Design 2015年2月号『なぜ「運用でカバー」がダメなのか』読了 - そのねこが学ぶとき</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[東京Node学園付属小学校1限目に行ってきた]]></title>
    <link href="http://chroju.github.io/blog/2016/01/20/node-js-elementary-school-1/"/>
    <updated>2016-01-20T00:48:28+09:00</updated>
    <id>http://chroju.github.io/blog/2016/01/20/node-js-elementary-school-1</id>
    <content type="html"><![CDATA[<p><a href="http://connpass.com/event/23463/">【増枠！】東京Node学園付属小学校 1時限目 - connpass</a></p>

<p>東京node学園というNode.jsのユーザーコミュニティがありますが、その入門者向けバージョンが立ち上がったので行ってきました。</p>

<p>自分がNode.jsを扱った経験はAWS Lambdaとhubotで遊ぶために既存のスクリプトを少し触ったぐらいで、おそらくは小学校というより幼稚園レベルだったと思いますが、それ以前にやはりフロントエンドの集まりにインフラのエンジニアが行くというのはちょっと自分でも場違い感を覚えずにはいられず、さすがに提供できる話もないやろなってことで懇親会は出ずに帰ってしまいました（）。しかし刺激になったのは確かというか、フロントエンドの世界にちょっとだけ触れられる良い機会ではあったかなと。</p>

<p>そもそもにして自分にとって「言語」は最近手足になってきていて、Ansible使いたいからPythonやっておこうとか、Docker理解したいからgolangかなとかそういう選択ばかりするようになっていたのだが、フロントエンドにとって新しい言語というのは可能性の広がりなのだなーと当たり前のようなことに気付いた。例えば最近Kobitoの実装などで話題のElectronはNode.jsなわけで、サーバーサイドスクリプトであるNode.jsを学ぶことで、デスクトップアプリケーションを従前よりは容易に構築できる可能性になる。作れるものの幅が増える、やれることが膨らんでいくことはエンジニアにとってとても楽しい。</p>

<p>くっだらないものでもなんでも構わんから、とりあえず手を動かして「作る」ことが楽しいって経験をもっとしてもいいのかもなと思った。インフラのデリバリー、運用の効率化、そういうのも大切ではあるけれど、我々がそもそもビジネスとして提供しているサービス、システムとはなんぞやって部分をもう一度見返してみたい気がした。言語は単なるツール、ではないはず。だからこういう勉強会もいいけど、ハンズオンとかもっと行ってみるべきかなと。具体的に今回の勉強会で見かけた中ではMEANスタックが気になるのでやっておきたい。ちょうどMongoに手を付けたかったし。</p>

<p>以上、取り留めのない感想でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オープンソースカンファレンス2015 Tokyo/Fall行ってきた]]></title>
    <link href="http://chroju.github.io/blog/2015/10/25/osc-2015-tokyo-fall/"/>
    <updated>2015-10-25T21:42:59+09:00</updated>
    <id>http://chroju.github.io/blog/2015/10/25/osc-2015-tokyo-fall</id>
    <content type="html"><![CDATA[<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/chroju/22273557670/in/dateposted-public/" title="このはちゃんかわいい"><img src="https://farm1.staticflickr.com/630/22273557670_c7c51c391b_z.jpg" width="640" height="640" alt="このはちゃんかわいい"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>戦利品、ConoHaちゃんかわええ。</p>

<p>オープンソースカンファレンスに初めて行ってみた。2015 Tokyo/Fallです。だいぶ奥地の方でやってるなぁという印象があってなかなか行きづらかったのだが、実際行ってみると自然に囲まれて静かで建物綺麗で過ごしやすそうないい大学ですね。ちょっぴり休憩でもくもくしたりしてみたけどだいぶ捗ったし、もう少し近所なら作業環境に使いたい感じが（）</p>

<p>ぼっち参戦かつ初参戦かつコミュ障な故、ブースがんがん回ってがんがん自分から話しかけるみたいな度胸はなく、だいたいセッション聴いてました。ので、セッションごとにちょっとまとめる。</p>

<h1>はじめてのオープンソース・ライセンス</h1>

<p>オープンソース自体の考え方だとかは知ってはいたのだが、ライセンスがMITとかApacheとかそういういろいろがあるのがよくわかってなかったので。話の中で教えていただいた<a href="http://www.catch.jp/oss-license/2013/09/10/github/">Githubによる、オープンソースライセンスの選び方 | オープンソース・ライセンスの談話室</a>というページが確かに詳しそうなので後で読まなければなと思った。ギッハブ使ってるのに全然これ理解してなかった。</p>

<h1>実録！Hinemos導入経験者が語る、実運用でのあるある話</h1>

<p>最近実務でHinemosを使っているもので。監視設定をグループ（スコープ）単位で作ってしまうと静観するときに設定変更がしんどいだとかっていう本当にあるあるな話と、<a href="http://www.hinemos.info/option/utility">Hinemos Utility</a>が便利だという話など。Hinemos Utility、設定のインポートエクスポートがあるので、GUIポチポチの面倒臭さから救われそうな気はした。あるある話の方は他の監視ツールでもわりと似たところあるので、結局アーキテクチャーってどんなツールでも大して変わらんのかなぁ、そのへんどうにかしたツールないかなぁとか思った。</p>

<p>そういえばセッションはTISの主催だったのだが、同社といえば<a href="http://thinkit.co.jp/author/3519">Zabbixの池田氏</a>の印象が強いので、Zabbixと比較して同社としてどう考えてるのかってあたりも聞きたかった。</p>

<h1>[飲食OK]（発表者募集中！）1日目-ライトニングトーク（by OSCスポンサー）</h1>

<p>なかなかカオスにライトニングトーク。飲食OKでしたけど学食せっかくなので使いたかったので無飲食で。言及してるとキリがないので割愛。</p>

<h1>Ubuntuの最新情報</h1>

<p>Ubuntu使ってない。てかDebian系ほとんど触った経験ないんで触らなきゃなと思いました。</p>

<h1>ZabbixでDockerも監視してみよう</h1>

<p>最後の質疑で出た話で、新陳代謝の高いコンテナの監視に既存ツールの分単位での監視感覚が役に立つのか？っていうのがあったのだけど、わりとそれに同意した。自分はコンテナを実サービスで運用した経験がないのでアレなのだが、その性質からして既存サーバーより速いスピードで起動停止を繰り返すことは有り得ると思うし、むしろアーキテクチャーの考え方がスピーディーなものに変わるためには監視ツールの在り方も変わんなきゃならないんじゃないかなぁと思った。答えは出てないけど。</p>

<h1>コンテナ(Docker)時代のインフラ技術・運用管理に迫る！</h1>

<p>Docker最新事情という感じで、Dockerの概要もそこそこに周辺ツールや開発状況をいろいろ舐めていく感じのセッション。Docker触り始めたばかりの自分にはとてもありがたかった。Docker machine、Docker Swarm、docker-composeだとかなかなかにワクワクする話。</p>

<h1>aozorahackの今までとこれから ～インターネット電子図書館「青空文庫」をエンジニアリングで支える～</h1>

<p>ここから2日目。春に<a href="https://atnd.org/events/66230">青空文庫アイディアソン</a>が開かれて話題になりましたが、そのときから興味があったので話を聞いてみた。青空文庫の誕生が1997年、オープンソースという言葉が生まれたのが1998年ということで、オープンソースより古い歴史を持つ青空文庫がOSSライクな発想をしていたはずもない！という出発点だったようなのだが、それを変えていこうという試み。もともとサードパーティ的にビューアやコンバータを作る動きは周辺にあったわけで、それをまとめて今風の開発をしていくとなると面白そうだなと思う。自分は業務エンジニア＋趣味エンジニアでしかないけど、こういうボランティアというか、自らの意志で参画していくエンジニアリング活動というのがOSSの在り方なんだとここで初めて腑に落ちた気がした。</p>

<h1>Solaris ZoneとPuppet、Serverspecでインフラ CI</h1>

<p>Solarisわからないけどインフラ周りの知識手広くしたいなということで行ってはみたがやっぱりわからなかった。知識って広くて浅いか狭くて深いかの二択だと勝手に思ってたけど、実際それなりに出来るエンジニアってそこそこ手広く平均点取れる人が多い気がしていて、例えばこのセッションであればUNIX（Solaris）の知識にコンテナ（Zone）の知識、んでPuppetはRubyだし、ServerspecもRubyというかRSpecなんですよね。エンジニアとしての幅、ちょっと見直したいなと思わされたセッション。</p>

<h1>【パネルディスカッション】今こそ語るエンジニアの幸せな未来 ～OSC東京編～</h1>

<p>春に行ったJAWS DAYSでも同様のパネディスを聴いてはいたので実質第二回というか。こういう話題が定期的に持ち上がるようになったのって、さくらインターネットが15周年迎えたこともあるようにエンジニアの高齢化（家庭環境の変化）があるような気はする。働き方はライフステージによっても、世の中の技術動向やビジネス動向によっても変わるので、結局時間と金銭的余裕のあるうちに勉強して、常に自分が働きやすい場所にいられるようバリューを磨いておくしかないのだろうなと思う。そういう話でした。</p>

<p>以上、9セッション。知識のザッピングとしてこういうセッション形式のイベントはやはり良いなと。いわゆる勉強会だとだいたいが自分の興味関心のあることだけに集中してしまうのだが、こういう機会だとせっかくなのでってことで脇道に逸れたりしやすいので、知識の幅増やす機会にはなりやすいですね。OSS、TISのようにビジネスとして取り扱っている人たちもいれば、aozorahackのような草の根の動きもあったり、有り様はいろいろであって、んでGitHubで取りあえずソース読むところからいつでも手を付けられる時代にあるので、何かしらやってみると面白いのかもしれない。尻込みしてるのではなく。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">テロ <a href="https://twitter.com/hashtag/osc15tk?src=hash">#osc15tk</a> <a href="https://t.co/OEa2JYMezY">pic.twitter.com/OEa2JYMezY</a></p>&mdash; T.Kabu (@disco_v8) <a href="https://twitter.com/disco_v8/status/657855359357337600">2015, 10月 24</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>懇親会、<a href="https://twitter.com/chroju/status/657852424502276096">TRIGGER ANIMATION EXPO</a>に行けるチャンスがここしかなかったのと、200人という大所帯にぼっち参戦する勇気がないのと（あと、さすがに薄い話しかできなさそうであまり意味はないかなと思った）で行かなかったんだけど、生ハム原木はうらやましかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[すべての障害対応を、生まれる前に消し去りたい！ #障害対応きにならNight]]></title>
    <link href="http://chroju.github.io/blog/2015/07/03/how-about-your-troubleshooting/"/>
    <updated>2015-07-03T00:20:52+09:00</updated>
    <id>http://chroju.github.io/blog/2015/07/03/how-about-your-troubleshooting</id>
    <content type="html"><![CDATA[<p><a href="http://www.zusaar.com/event/6147005">エンジニア交流会〜他社の障害対応きにならNight!〜 on Zusaar</a></p>

<p>改めて見るとすげー名前のイベント……行ってきた。</p>

<p>障害対応は嫌いです。ていうか好きな人がいるならお目にかかってみたいもんですが、しかしシステムを動かす以上障害は避けられないし、それならばなるべく負担を軽減したいというのが人の、いやエンジニアの性。つわけでよりよいソリューションを探す目的で行ってきたイベントだったんですが、結局のところ <strong>より深い闇を知るだけの結果に終わった。</strong></p>

<p>世の中闇だらけですわ。闇しかないですわ。自分なんかぜんぜん甘いなっていうか闇とすら呼べないんじゃないかっていう。詳しくは書けませんけど世の中運用者って苦労してんなって認識新たにしました。まぁだからって闇を甘受していいわけじゃなくて、だからこそやることあるんだけどさ。</p>

<p>得た知見をザクっとまとめちゃいますけど、</p>

<ul>
<li>明文化と記録は何事も大事。顧客との契約にせよ、手順や構成にせよ、障害記録にせよ。</li>
<li>ただ記録するんじゃなくて探しやすいようにとか考えないと意味ない(Wikiに書き散らしても役には立たない)</li>
<li>日頃からの点検などによる障害の抑止も重要。障害訓練とか。</li>
<li>スーパーエンジニアだから治せるって状態は脱したいのでスキルの底上げは必要。</li>
<li>電話かかってくるのウザいけど必要。確実に対応しなきゃならない障害なら絶対電話。別にTwilioとかでいいので。</li>
</ul>


<p>障害対応って辛くないはずはないのだが、だったらより辛くない方法を探さねばなと思う。アラートの対象は極力絞ったり、自動復旧でイケる事象はスクリプト組んでおいたり。</p>

<p>あと自分はもともと金融系SEで、運用に用いてたのもJP1やTivoliみたいな商用製品が多かった故、会場で交聞いたnagiosやらcactiやらCloudWatchやらを学ばねばというところ。顧客とビジネスモデルが変わっただけで、見える技術領域もほんとに変わるものだと思う。</p>

<p>こういうopsやインフラに絞ったイベント、なかなかない気がするので良いですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansibleの入門イベント聞いてきた話]]></title>
    <link href="http://chroju.github.io/blog/2015/06/25/hika-labo-ansible/"/>
    <updated>2015-06-25T00:21:58+09:00</updated>
    <id>http://chroju.github.io/blog/2015/06/25/hika-labo-ansible</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/66419">これ</a>行ってきた。ざくっと感想を箇条書きで。</p>

<ul>
<li>ChefやPuppetに相当するインフラの設定管理ツールだと勝手に思い込んでいたが、対象範囲はそれらより広い。要はCapistranoがやるようなことまでまかなえる。</li>
<li>それどころかHomebrewの管理あたりも可。一時期brewfileとか流行ってたけど、冪等性とか考えるとAnsible管理の方がいいかも。

<ul>
<li>最近そんな記事がちょうど上がってた。→ <a href="http://dev.classmethod.jp/tool/osxc-ansible-configuration-for-mac/">【要するに】osxcでMacの環境の構成を記述管理する【MacでAnsible】 ｜ Developers.IO</a></li>
</ul>
</li>
<li>一番のポイントはエージェントレス、だと個人的にも思う。導入ハードルが低い。個人のVPSとかならChef-Zeroとかよりも気楽で良い。</li>
<li>yamlだからインフラ担当者でも読みやすいって点はそれほど惹かれないというか、Rubyぐらいインフラ屋でも昨今は読み書きできるべきではって気がする。

<ul>
<li>あとRubyの方がぶっちゃけ処理ベタ書きしちゃえるって点で安心感はある。Ansibleで細かいとこに手が届かないとき、どういうワークアラウンドがあるかはわかってないが。</li>
</ul>
</li>
<li>しかし、とはいえやっぱ楽そう。Vagrantと組み合わせて開発環境立てるみたいな小さなことからやってみて、イケると思ったら本番展開ってのもアリかもしれない。かも。</li>
<li>この手のツールが出たときに「こんなこともできる！すごい！」ってなりがちなんだけど、実は再発明された車輪で成り立ってる部分もあって、それshでできるよ？ってなることは結構ある（brewfileがわりとその気配あった）ので、その点に関してはきちんと見極めがしたい。</li>
<li>あとやっぱり構成管理ツールはインフラエンジニアから完全にdevを奪いにかかるツールではあるので、インフラ屋はスケーリングとかネットワークとか（そういえばネットワーク周りのas codeなかなか流行りませんね）障害対策とか、本気でops特化が求められるのかもなとか思った。</li>
</ul>

]]></content>
  </entry>
  
</feed>
