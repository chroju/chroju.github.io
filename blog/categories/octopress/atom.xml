<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | the world as code]]></title>
  <link href="http://chroju.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://chroju.github.io/"/>
  <updated>2015-12-31T19:33:54+09:00</updated>
  <id>http://chroju.github.io/</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[はてなブログからの記事移行を完了した]]></title>
    <link href="http://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress/"/>
    <updated>2015-03-01T13:15:20+09:00</updated>
    <id>http://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://chroju89.hatenablog.jp/">旧ブログ</a>から全記事移行完了しました。ちょっとだけ疲れた。</p>

<p>もともとはてなブログで記事を書いてたわけですが、こちらは記事のエクスポート形式がMovableType形式にしか対応してないので、そこからMarkdownに変換し直したりだとか、はてなキーワードリンクを削除したりとか、地道にいろいろやらねばならず。たぶんスクリプトでガチャーンと一発でやれるんでしょうけど、力が足りないのでvimでファイル開いて変換ポイント確認してはポチポチコマンドで置換してやりました。</p>

<h2>エクスポートファイルの分割</h2>

<p>はてなブログからエクスポートすると、最初は全記事が1ファイルに連なった状態で吐かれます。自分はMT使った経験ないんでわかりませんが、これは「そういうもの」と考えていいんですかね。一方のoctopressはエントリーごとに分割されているので、まずはこのエクスポートファイルを1記事ずつ分割してやらなくてはならない。あとヘッダの形式も微妙に両者で異なるので、ここの変換も必要。</p>

<p>なんか変換ツール落ちてないかなと堕落した感じで探しまわってたら、一応ありました。</p>

<script src="https://gist.github.com/railsbros-dirk/2351046.js"></script>


<p>名前がMT to Markdownなので完全にMarkdownへ変換してくれるものかと期待したのだけど、実際やってくれるのは先ほど挙げた「分割」と「ヘッダの書き換え」程度です。中身はHTMLタグのまま。一方で自分の環境だと<code>&lt;</code>が<code>&amp;lt;</code>に変わってしまうといった副作用もあり。あと元のヘッダにあったBASENAMEだとかCONVERT BREAKSといった文字列がそのまま本文内に残ってたり。。。ちょっと謎。ただ、変換が楽になるのは確か。</p>

<h2>vimによる置換</h2>

<p>スクリプト力弱いので、あとはvimによる力技です。今回初めて複数ファイルを一挙にvimで扱うってやったけど、便利ですね。</p>

<p>vimではバッファリストがあるのは知っていたけど、一方で引数リストっていうのもあって、<code>:args hoge.txt fuga.txt</code>とかでファイルリストを作れます。元々は名前の通り、vimを起動するときに与えた引数が入ってるリストらしいのだけど、任意に書き換えができるのであまり「引数」リストという感じはしない。バッファ内の全ファイルへのコマンド実行は<code>:bufdo</code>で出来るし、引数リストについても似た感じで<code>:argdo</code>が使える。このあたりを上手く活用すれば、今回のような複数ファイルを一挙に処理するのはたやすい。</p>

<p>例えば先の<code>&amp;lt;</code>を<code>&lt;</code>に全置換したり。他にも置換コマンドはh1タグを<code>#</code>に変換するだとか、いろいろな形で使いました。</p>

<pre><code class="vim">:argdo %s/&amp;lt;/&lt;/g
</code></pre>

<p>CONVERT BREAKSと書かれた行を全部消したり。</p>

<pre><code class="vim">:argdo g/CONVERT BREAKS/d
</code></pre>

<p>自分が今回初めて身に付けた知識でもっとも有効だったのは、検索でマッチした文字列を置換後の文字列内で指定する方法ですかね。検索パターンの括弧でくくった部分（vimなのでエスケープして<code>\(</code>と<code>\)</code>で囲った部分、ということになりますが）を、置換パターンから<code>\1</code>で指定できる。これははてなキーワードのリンクを一掃するのに役立ちました。</p>

<pre><code class="vim">:argdo %s/&lt;a class="keyword"\(.\{-}\)&lt;\/a&gt;/\1/g
</code></pre>

<p>あー、あとこのコマンドで重要なのは<code>{-}</code>の部分ですかね。これで最短マッチになるらしい。他、細かなとこだと改行コードを入力するには<code>&lt;C-v&gt;&lt;C-m&gt;</code>と打つとか、<code>&lt;C-r&gt;/</code>で直前の検索パターンをコマンドラインに入力できるとか、いろいろこの機会に調べられてタメになりました。</p>

<h3>参考</h3>

<ul>
<li><a href="http://scriptogr.am/error1009/post/201211151634">Vimで最短マッチと検索してから置換 - // Nice Catch! :)</a></li>
<li><a href="http://lesguillemets.github.io/blog/2014/08/05/vim-reuse-last-search-for-replace.html">Vim で直前の検索パターンを部分的に再利用する - Xeebi</a></li>
<li><a href="http://www.eightsee.net/?m=pc&amp;a=noticeinfodetail&amp;notice_no=31">改行コード変換 vi で改行コード一括置換　-eightsee.net</a></li>
</ul>


<h2>ファイルのリネーム</h2>

<p>また先のコードで分割したMarkdownファイルは自動的にファイル名も振ってくれるんですけど、日本語の場合は漢字をなんとなく頑張って読んでローマ字に変換してくれた、気持ちはありがたいけど残念な感じのものになっちゃいます。なのでこれも一括変換。</p>

<p>ファイル名一括変換だと<code>rename</code>コマンドってのがあるのですね。Linuxだと標準で入ってるけどUNIX系にはないだとか。なのでMacにも入ってなかったので、Homebrewでインストール。</p>

<pre><code>$ brew install rename
</code></pre>

<p>使い方としては<code>rename 's/hoge/fuga/' *.markdown</code>形式が使える、要はvimの置換コマンドっぽく書けるので、vimmerならこれが便利ではないかと。正規表現も当然使えます。ただし、vimで必要なあの面倒くさいエスケープの数々が要らなくなっていたり、先ほど書いた<code>\1</code>によるマッチ文字列の流用が<code>$1</code>に変わっていたり、若干の使用感の違いはあります。でも便利。</p>

<h3>参考</h3>

<ul>
<li><a href="http://qiita.com/yahihi/items/dd8b3cc7c7041c3f03b9">Linuxでrenameコマンドを使おう - Qiita</a></li>
</ul>


<p>そんなこんなで記事の変換が終わったら、あとはoctopressのレポジトリで<code>/source/_posts</code>の中に全ファイルブチ込んで<code>rake generate</code>かければ生成されます。最初はちょっと戸惑いもありましたが、やれてしまうと案外簡単に移行できるなという感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress + github.ioでブログを作りました]]></title>
    <link href="http://chroju.github.io/blog/2015/02/17/post/"/>
    <updated>2015-02-17T00:06:42+09:00</updated>
    <id>http://chroju.github.io/blog/2015/02/17/post</id>
    <content type="html"><![CDATA[<p>これまではてなブログで書いていた<a href="http://chroju89.hatenablog.jp">技術系ブログ</a>を移設する目的で、Octopressとgithub.ioを使ったブログを作成しました。もはや常套手段とも言えるブログ作成方法ですので、ノウハウはネット上のあちこちに公開されており、特に苦労することもなかったです。というか、こんな簡単にブログ作れちゃうもんなんだなぁという感慨。</p>

<ul>
<li><a href="http://www.miukoba.net/blog/2013/01/05/start-octopress/">Octopressはじめました | mimemo</a></li>
<li><a href="http://rcmdnk.github.io/blog/2013/03/07/octopress-customize/">Octopressで最初に行う設定変更</a></li>
<li><a href="http://qiita.com/fakestarbaby/items/4b9b6efd9d52d904986c">Octopressで新規ページを作成してみよう！ - Qiita</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes · imathis/octopress Wiki</a></li>
</ul>


<p>上記のうち、3つめの「新規ページ作成」に関しては、aboutページを作るときに参考としました。ブログのエントリー以外の個別ページもこの方法で作ってMarkdownで編集できるので、結構柔軟なカスタマイズが出来ると思います。aboutページには一番上のナビゲーション領域から飛べるのでよろしければ。</p>

<p>あとはボチボチと折を見て旧ブログから記事を持ってくる予定。</p>
]]></content>
  </entry>
  
</feed>
