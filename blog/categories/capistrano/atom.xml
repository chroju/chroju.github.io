<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: capistrano | the world as code]]></title>
  <link href="http://chroju.github.io//blog/categories/capistrano/atom.xml" rel="self"/>
  <link href="http://chroju.github.io//"/>
  <updated>2015-12-14T22:16:31+09:00</updated>
  <id>http://chroju.github.io//</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Railsのデプロイでハマった点まとめ]]></title>
    <link href="http://chroju.github.io//blog/2015/01/05/post/"/>
    <updated>2015-01-05T22:22:00+09:00</updated>
    <id>http://chroju.github.io//blog/2015/01/05/post</id>
    <content type="html"><![CDATA[<p>昨年末に自身初のRailsアプリを見切り発車という名でローンチしましたが、その際デプロイで1か月以上もハマってましたので、ハマリポイントをピックアップしてまとめておきます。</p>

<h2>Capistranoでssh-agentを使う</h2>

<p>Capistrano3のタスクの中に、<code>git clone</code>でレポジトリをダウンロードしてくる過程があるのだが、ここではもちろん、GitHub（他のサービス使ってる場合は他の）にアクセスするためのssh秘密鍵が必要になる。ここで利用する秘密鍵はssh先のサーバーに置いておいても良いのだが、Capistrano3ではssh agent forwardingを使えるようにするための設定箇所が存在するので、リモートに鍵をわざわざ転送しなくても、ローカルの鍵が使える。設定箇所は<code>deploy/(test|staging|production).rb</code>の中で、サーバー設定を書くときに以下のように<code>forward_agent</code>を<code>true</code>で宣言すればいい。</p>

<pre><code>server '192.168.1.1', port: 2222, user: 'develop', roles: %w{web app db}, ssh_options: {
  keys: %w(~/.ssh/id_rsa),
  forward_agent: true,
  auth_methods: %w(publickey)
}
</code></pre>

<h2>サブディレクトリでアプリを展開する場合の環境変数設定</h2>

<p>例えば<code>/var/www</code>がnginxの見に行くルートディレクトリになっていて、Railsのアプリは<code>/var/www/rails</code>で展開しているというように、サブディレクトリを使う場合はRails側に環境変数<code>RAILS_RELATIVE_URL_ROOT</code>の設定が必要になる。Railsが<code>link_to</code>などを展開してパスを埋め込むときは、このroot設定が元になるので、サブディレクトリを使っていることを環境変数上で明記してやらなければ、本来<code>http://example.com/rails/hoge</code>へのリンクを展開してほしいはずが、<code>http://example.com/hoge</code>が展開される、といったことになってしまう。設定箇所としては<code>config.ru</code>になる。</p>

<pre><code>ENV["RAILS_RELATIVE_URL_ROOT"] = "/rails"

if ENV['RAILS_RELATIVE_URL_ROOT']
  map ENV['RAILS_RELATIVE_URL_ROOT'] do
    run Rails.application
  end
else
  run Rails.application
end
</code></pre>

<p>はっきり言って<code>config.ru</code>が何者なのかよくわかってはいないのだが、Rackサーバーを起動するrackupコマンドに起動オプションを渡したりするもの、らしい。そのことについては<code>config.ru</code>の先頭行にコメントでも入っているのでなんとなくわかると思う。が、Rackが理解できてないので結局のところわからない。コマンドは意味から考えれば、Railsを起動するときにパスのマッピングとして<code>RAILS_RELATIVE_URL_ROOT</code>を渡してやっているように見える。ただ、この書き方だと環境変数の宣言を<code>config.ru</code>の中で行った上で、その環境変数の存在をifで確認するというちょっとマヌケなロジックになってしまっているので、おそらくは環境変数を別のところで宣言するのがベターなのだと思う。</p>

<p>なお、サブディレクトリでRailsアプリを立ち上げるには、ウェブサーバー（nginx + unicorn）に対しても設定が必要だが、ここでは割愛。nginxの<code>location</code>ディレクティブを使う、とだけ覚えておけばなんとかなるはず。</p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://qiita.com/akito1986/items/56198edcafc222b320a8">nginx + unicorn + Railsの設定方法 - Qiita</a></li>
<li><a href="http://blog.nazylabs.net/2013/07/06/124/">UnicornでRedmineをサブディレクトリにデプロイする方法 | ride on technology – 藝に游ぶ –</a></li>
<li><a href="http://quickhack.net/nom/blog/2012-09-19-rails-with-relative-url-root.html">Rails with Relative URL Root - Quickhack Diary</a></li>
</ul>


<h2>assetsに対するルーティング設定</h2>

<p><code>assets:precompile</code>を使ってあらかじめassetsフォルダ内にcssとjsを展開していたのだが、ブラウザ経由でいざアプリにアクセスすると、CSSもJavaScriptも適用されていない（assets配下が読み込めていない）という事象が発生した。</p>

<p>原因はルーティングが正しくなかったから。前述の通りExhiBiでは<code>/var/www/rails</code>にアプリを展開していたのだが、さらに細かく見ると<code>rails</code>フォルダの中には<code>releases</code>、<code>current</code>、<code>shared</code>という主に3種類のフォルダが配置される。<code>releases</code>は要するに<code>git clone</code>の対象フォルダで、ソースコードをCapistranoで宣言した数だけバージョン管理している。<code>shared</code>はbundleやlogといった、リリースバージョンに左右されず不変のファイルを格納する場所で、Capistranoで言えば<code>linked_dirs</code>にあたる。この2つのフォルダを<code>current</code>配下にシンボリックリンクすることにより、<code>current</code>が実際のアプリ配置場所として機能する。従ってnginxのlocationディレクティブはこんな感じになる。</p>

<pre><code>location /rails {
  alias /var/www/rails/current;
}
</code></pre>

<p>ここでassetsへのルーティングを考えてみると、assetsに対するパスは<code>http://example.com/rails/assets/hogehoge</code>になるため、<code>/var/www/rails/current/assets</code>を見に行くことになる。しかし実際にはassetsは<code>shared/public/assets</code>であり、シンボリックリンクは<code>current/public/assets</code>に貼られている。そのため先のlocatonだけではassetsに到達することはできないため、assets用のlocationディレクトリが別途必要になる。</p>

<pre><code>location ~ ^/rails/assets/(.*) {
  alias /var/www/rails/current/public/assets/$1;
}
</code></pre>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://qiita.com/kizashi1122/items/c827f0675dff4d82d06c">Nginx で Rails の assets (css, js) にアクセスできない（403 forbidden が返る） - Qiita</a></li>
</ul>


<h2>SECRET_KEY_BASEの環境変数設定</h2>

<p>ブラウザ経由でアプリにアクセスしたら、404ではないのだが画面が真っ白になってしまう事象。ぐぐってみるとドンピシャすぎる記事があって大変助かった。</p>

<iframe src="http://hatenablog.com/embed?url=http%3A%2F%2Feasyramble.com%2Frails-secret-key-base-env.html" title="Rails が production 環境で真っ白、SECRET_KEY_BASE 設定忘れが原因でした | EasyRamble" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">[Rails が production 環境で真っ白、SECRET_KEY_BASE 設定忘れが原因でした | EasyRamble](http://easyramble.com/rails-secret-key-base-env.html)</iframe>


<p><code>SECRET_KEY_BASE</code>という環境変数を設定してやらねばならんらしい。なんじゃそりゃ。環境変数の設定なので方法は下記のURLのようにいくつかあるみたいだが、自分は取りあえずChefレシピの中で、<code>.bash_profile</code>へ環境変数設定をいれこむことにした。これも何かしらベストプラクティスがありそうな気がする。。</p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://j1ykt68.hatenablog.com/entry/2014/07/03/111725">Missing <code>secret_key_base</code> for &lsquo;production&rsquo; environment が出たのをどうにかする件 - YKT68の日記</a></li>
<li><a href="http://qiita.com/kanpe777/items/cb11dc88ced544d10bd5">Rails - secret_key_baseあたりのメモ - Qiita</a></li>
</ul>


<h2>gem &lsquo;pg&#8217;が入らない</h2>

<p>入らない。なんか知らんが入らない。ググるとどうも入りづらいGemの筆頭である模様。いろいろ探って、therubyracerを先に入れるべきだと聴いてやってみたけど結局入らない。とにかくどうやっても、Capistranoの<code>bundle install</code>で<code>Make sure that gem install pg -v '0.17.1' succeeds before bundling.</code>と言われてしまう。仕方ないのでsshでサーバーに直に入って<code>bundle install</code>を手動実行してみるとなぜか入る。わからん。これだけは本当にわからん。さらにその後はtiltが入らないとか言われたりもした。ソースをrubygems.orgから変えたりしてなんとか入ったのだが、ちょっと腑に落ちない感。</p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://qiita.com/goking/items/bc34518c2628d1b2cae0">Ruby - bundlerでpgをインストールする - Qiita</a></li>
<li><a href="http://qiita.com/tq_jappy/items/4e05059169e509f08f75">Ruby - bundle installでつまずきやすいgem達 - Qiita</a></li>
<li><a href="http://this.aereal.org/entry/2012/11/18/152451">(解決済み) gem install などができない問題の一時的な解決方法と根本的な解決 - this A moment</a></li>
</ul>


<h2>posgresqlのユーザー管理</h2>

<p>SQLに関する基礎知識のなさを猛省した。とりあえずわかってなかったのこんなとこ。</p>

<ul>
<li><p>pg_hba.confで指定できる認証方式でmd5はパスワード認証、peerはOSにログイン中のユーザー名でログインしようとする</p></li>
<li><p>よってsqlで使う予定のユーザー名がOS側に存在しない場合、peerを使おうとするとコケる</p></li>
<li><p>psqlコマンドでログインしたとき、まずユーザー名と同名のDBにアクセスしようとするので、それが存在しないとエラーになる</p></li>
<li><p>でもDB作成って<code>rake db:create</code>でやると思うんだけど、このコマンド打つときはどうやってアクセスするの？あれ？</p></li>
<li><p>DBに初期データを投入したい場合は<code>db/seeds.rb</code>に書いて<code>rake db:seed</code>を打つ</p></li>
<li><code>rake db:migrate</code>はテーブル生成だけでデータ登録までは賄ってくれない</li>
<li>開発段階でmigrateファイルをやたらと作ってたりすると上手くdb:migrateできないこともあるので、整理した方がいいかも</li>
</ul>


<p><strong>参考</strong></p>

<ul>
<li><a href="http://www.nslabs.jp/postgresql-user-management.rhtml">PostgreSQLのユーザ管理 | Netsphere Laboratories</a></li>
<li><a href="http://www.techscore.com/tech/Ruby/Rails/model/migration/3">1. マイグレーション(3) | TECHSCORE(テックスコア)</a></li>
</ul>


<p>Rails、Capistranoのいずれも抽象度の高い技術で、これは何度かブログに書いてきてるけど、その内実をきちんと押さえてないとエラーが起きた場合に結構辛いことになる。READMEを読むこと、公式のWikiなどがあるならそっちも目を通すこと、エラーが起きたらログを見ること、あるいは前もってログを吐く設定にしておくこと。このあたりは改めて徹底したいところ。</p>

<p>あとここからは余談だが、Railsのデプロイ先としてherokuが好まれるのは、ある程度「間違いのない選択肢」ということなのだろうなと想像している。ここで自分がつまずいたサブディレクトリでのアプリ展開や、postgresqlのコンフィグなどは、herokuであれば必要がなくなる。一旦用意されている高速道路を全力で走ってみて、それが成功してから自分好みに変えていく方が近道なのかもしれない。なんとかしてposgresqlを使おうとこだわったり、サブディレクトリでの運用をさせたり、最初からいろいろ欲張りすぎた点も反省。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano3を最後にもう一度だけ懇切丁寧にまとめてみる]]></title>
    <link href="http://chroju.github.io//blog/2014/04/12/post/"/>
    <updated>2014-04-12T21:56:00+09:00</updated>
    <id>http://chroju.github.io//blog/2014/04/12/post</id>
    <content type="html"><![CDATA[<p>いろいろエントリーを上げながら苦しんでいたCapistranoだが、ようやっとそこそこ落ち着いてきた気がするのでそろそろ完結編といく。Capistranoの基本とかはすでに<a href="http://chroju89.hatenablog.jp/entry/2014/02/20/000348">こちら</a>のエントリーで書いたので、今回は各設定ファイルの書き方とか、その他ハマったポイントを中心に。</p>

<h2>今回作成したファイル</h2>

<p>以下4ファイルを作成した。</p>

<ul>
<li>Capfile</li>
<li>config/deploy.rb</li>
<li>config/deploy/staging.rb</li>
<li>lib/capistrano/tasks/unicorn.cap</li>
</ul>


<p>基本的にCapistranoを使う場合「必須」なのは上2つのファイル。<code>deploy/hoge.rb</code>も確実に必要にはなるが、デプロイ先の環境が本番なのかステージングなのかでproduction.rbとstaging.rbを使い分けることになる。もちろん、ステージング環境を用意していない場合はstaging.rbは不要。また4つ目のファイルだが、自分の場合はunicornをデプロイ先で使っているので、デプロイ後にunicornを再起動する目的で独自タスクを作成している。説明が遅れたが、今回デプロイ先となる環境は大雑把に以下の通り。</p>

<ul>
<li>Vagrant 1.4.3</li>
<li>CentOS 6.4</li>
<li>Postgresql 9.1</li>
<li>Ruby 1.9.3(rbenv)</li>
<li>Nginx + unicorn</li>
<li>位置付けはステージング環境</li>
</ul>


<h2>Capfile</h2>

<script src="https://gist.github.com/10530780.js"></script>


<p>ここはだいたい環境を問わず同じになってくる箇所。まず<code>capistrano/setup</code>と<code>capistrano/deploy</code>は<code>require</code>が必須。RailsをCapistranoで扱う場合は、<code>capistrano/bundler</code>から<code>capistrano/rails/assets</code>までも必須となる。rbenvを使っている場合は<code>capistrano/rbenv</code>が必要。rbenvをどこにインストールしたのかにより、<code>set :rbenv_type</code>を指定する。あとはデプロイするアプリケーションで使うRubyのバージョンも指定してやる。rvmを使う場合も似たような<code>capistrano/rvm</code>を使うみたいだが、そちらはよくわからんので割愛。</p>

<p>で、ここまでがrequireということなので、デプロイ元サーバーにGemfile書いてインストールしておくことを忘れずに。</p>

<pre><code>group :development do
  gem 'capistrano', '~&gt; 3.1.0', :require =&gt; false
  gem 'capistrano-rails', '~&gt; 1.0.0', :require =&gt; false
    gem 'capistrano-rbenv', '~&gt; 2.0', :require =&gt; false
  gem 'capistrano-bundler', '~&gt; 1.1.2', :require =&gt; false
end
</code></pre>

<p>最終行は独自カスタムタスクを読み込むための行。デフォルトで入っているのでそのままにしておけばよい。先のunicorn.capのように、何か独自タスクを作った場合はこのパスに入れれば読み込むよーということでもある。</p>

<p>なお、以前書いたエントリーでは<code>capistrano3/unicorn</code>も<code>require</code>していたのだが、これは撤回した。詳細はunicorn.capについて説明するときに後述。</p>

<h2>staging.rb</h2>

<script src="https://gist.github.com/10530945.js"></script>


<p>ステージング環境、というかデプロイ先環境の設定を書く。vagrantを使う場合はだいたいこれと同じように書いておけば通るんじゃないかと思う。Vagrantはデフォルトではvagrantユーザーによるsshが可能になっているので、それをそのまま使わせてもらっている。何か他のユーザーで入りたい場合などは頑張るしかない。</p>

<p>一点だけ注意すべきは、<code>RAILS_ENV</code>がstagingに設定されるということ。Capistrano3では<code>cap install</code>を叩くとデフォルトでstaging.rbとproduction.rbが作られ、<code>RAILS_ENV</code>もこのファイル名に倣うことになるのだが、Railsの動作環境は通常test, development, productionの3種類であり、stagingは存在していない。従ってこのままデプロイを始めてもうまくはいかない。面倒であればstaging.rbは使わず、production.rbだけを使っていてもいいかもしれない。</p>

<p>staging.rbを使う場合は、Rails側で環境の準備が必要になる。やることは大きく3つ。</p>

<h3>1. database.ymlにstagingを作成する</h3>

<p><code>rake db:migrate</code>などのDB系のコマンドはi<code>RAILS_ENV</code>を指定して実行される。ここで指定された<code>RAILS_ENV</code>をdatabase.ymlに見に行くので、設定を入れておく必要がある。ステージング環境の本来の意味を考えると、production用の記述をそのままコピーするだけで良いはず。</p>

<h3>2. config/environments/staging.rbを作成する</h3>

<p>動作環境設定ファイルとして、デフォルトではproduction.rbとdevelopment.rbだけが用意されているので、これもproduction.rbをコピーしてstaging.rbを作る。</p>

<h3>3. Gemfileにgroup :stagingを作成する</h3>

<p>これは<code>RAILS_ENV</code>と直結するわけではないが、GemfileのグループもRails環境ごとに作られているのでstagingを設けてやった方が良さそう。これもここまでと同様の話で、<code>group :staging, :production do</code>としてやるだけで良い。</p>

<ul>
<li>参考：<a href="http://spring-mt.tumblr.com/post/33209507135/rails-staging">railsでstaging環境を作る - CubicLouve</a></li>
</ul>


<h2>deploy.rb</h2>

<script src="https://gist.github.com/10530987.js"></script>


<p>いよいよデプロイ用の設定。面倒なので説明は省くが、だいたいはコメント読めば設定できるはず。</p>

<p><code>linked_files</code>と<code>linked_dirs</code>は<a href="http://chroju89.hatenablog.jp/entry/2014/04/06/191336">前回のエントリー</a>で書いた通り、shared配下に置いているファイルやフォルダのうち、currentに必要となるものを指定することでシンボリックリンクを張ってくれるというものなのだが、ではshared配下にこれらファイルやフォルダはいつ作られるのか？というのがかねてから疑問だった。</p>

<p>結論を言えば、<code>linked_files</code>は勝手には作成されない。というより、ここに指定したファイルがshared下に存在しない場合、Capistranoはデプロイ時にエラーを吐いてくる。正確に言えば<code>deploy:check:linked_files</code>というタスクがあり、ここで存在確認を行っている（<a href="https://github.com/capistrano/capistrano/blob/master/lib/capistrano/tasks/deploy.rake">参照</a>）。したがってこのタスクが投げられる前にファイルは別でアップロードしなくてはならない。ここではdetabase.ymlを指定しているので、アップロードタスクを独自で組み込んでいる。詳細は後述。</p>

<p>一方の<code>linked_dirs</code>は、shared配下に存在しない場合は<code>deploy:check:make_linked_dirs</code>で空っぽのフォルダとして作成してくれる。逆に言えば、元々ファイルが入っているようなフォルダをここで指定することはあまりないということ。例えばbundleなり、logやtmpなり、アプリが動作する中で必要とされるフォルダ（従ってGitHubで静的に管理はしていないフォルダ）がここに来ている。なお、shared/bundleは<code>capistrano/bundle</code>が<code>bundle install --path</code>で指定するデフォルトのフォルダなんだそうだが、古いバージョンの<code>capistrano/bundle</code>ではshared/vendor/bundleにインストールするらしいので要確認。</p>

<p>後半では独自タスクを3つ追加している。</p>

<p>1つ目はdatabase.ymlをアップロードするタスク。デプロイ先にshared/configフォルダを作成した上で、ローカルのconfig/database.ymlをアップロードしている。2つ目は<code>bundle exec rake db:create</code>を発動するタスク。Capistranoやcapistrano/railsにはDB作成用のタスクは一切含まれていないので、自力であらかじめ作っておく必要がある。手動で作成したり、Chefなんかで仕込んでおく手もあるのだろうが、ここではCapistranoのタスクとして書いている。必要になるのはもちろん初回1回限りなので、デプロイのルーチンの中には組み込んでいない。</p>

<ul>
<li>参照：<a href="http://yss44.hatenablog.com/entry/2013/12/01/150215">Capistrano3で快適デプロイ生活!! - Less is Best</a></li>
</ul>


<p>3つ目はunicornを再起動するタスク。これはunicorn.capの中で作成した<code>unicorn:restart</code>というタスクを呼んでいる。</p>

<p>最後の2行は独自タスクのルーチンへの組み込み。database.ymlのアップロードは真っ先にやらなくてはならないので、<code>deploy:starting</code>というデフォルトで言えば最初のタスクのさらに前に組み入れている。一方のunicorn再起動は<code>deploy:publishing</code>の後、ほぼすべてのタスクが終わったタイミング。</p>

<h2>unicorn.cap</h2>

<script src="https://gist.github.com/10531064.js"></script>


<p>ほぼほぼ以下エントリーの中身をそのまま使わせてもらいました。</p>

<ul>
<li>参照：<a href="http://qiita.com/satococoa/items/9b0cc416ffc042680b9b">unicorn + rails 用 Capistrano 3 の設定ファイル - Qiita</a></li>
</ul>


<p>異なる箇所は<code>start_unicorn</code>の内部処理。元エントリーでは<code>bundle exec unicorn</code>を叩いているのだが、自分としては<code>bundle exec unicorn_rails</code>を叩く認識だったので書き換えている。ここの書き換えが必要なのかどうかはちょっと自信がない。またコマンドのオプションとして<code>--path hoge</code>を指定しているのだが、これはサブディレクトリでRailsアプリを動作させたいため。予定として<a href="http://www.chroju.net/">http://www.chroju.net/</a>は静的なサイト、www.chroju.net/hogeでアプリごとにフォルダ作って管理としたかったもので。まー、こういう要らんチューニングを最初からやろうとするから迷走するわけなのだが。はじめはマニュアル通りにまず写経すべきだと思います。はい。サブディレクトリ云々の件はまた別途エントリー書きます。</p>

<p>ちなみにパスの指定やら何やらやらないのであれば、<a href="https://github.com/tablexi/capistrano3-unicorn">capistrano3-unicorn</a>を使うのも手だと思う。</p>

<h2>その他トラブルなど</h2>

<p>以上、ここまでの設定にはそれなりに自信がある。とりあえず<code>bundle exec cap staging deploy</code>を叩いてエラーが出ないことも確認はした。が、現状アプリは動いてない。。。いや、正確に言うと一度動いたのだが、その後Vagrant落として、セキュリティアップデートのためにiMacも再起動してもう一度やってみたところ、ダメダメになってしまったのだ。何が原因なのやらさっぱりだ。。。トラブルは3つほど遭遇している。</p>

<h3>1. Gitが通らない</h3>

<p><code>git ls-remote</code>で<code>Permission denid(publickey)</code>のエラーが出るという事象が発生、その先に進めなくなった。これについてはドンピシャなエントリーを探し当てたので、そのまま解決策を適用したらなんとかなった。なぜこのエラーが起きたのかまではまだ深堀りできてない。</p>

<ul>
<li>参考：<a href="http://peteoliveira.com/deploying-with-capistrano-3-failing-permission-denied-publickey/">Deploying with Capistrano 3 failing – Permission denied (publickey) | Pete Oliveira</a></li>
</ul>


<h3>2. 404が返される</h3>

<p>Nginxは動いている。unicornもプロセスは上がっているのだが、アプリを配置したフォルダを見に行くとThe page you were looking for doesn&rsquo;t exist.というメッセージが返される状態。他の有りもしないフォルダを見に行こうとするとNginxがBad Gatewayを返してくるし、unicorn.stderr.rbにログが残っているのでアクセスはできているようなのだが、なぜ表示に至らないのかわからない。</p>

<p>ちなみにstaging.logにはActionController::RoutingErrorが出ている。？？？</p>

<h3>3. Assets周りが不具合起こしている模様</h3>

<p>Vagrantを落とす前はアプリ自体つながりはしたのだが、jsとcssが反映されていない状態だった。ソースから探ってjsとcssをブラウザ上で開いてみたのだが、真っ白になっていた。アセットコンパイルのエラーなのかと思い、サーバー上でもコンパイル後のファイルを開いたりしてみたが、こっちは中身がきちんと書かれていた。なんなんだ一体。</p>

<p>以上。だいたい整ったはずなのだが、まだまだ先が長そうでいい加減ゲンナリしている。自分、この手のこと向いてないのかもしれんと思い始めた。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano3がわからんので今一度イチから考えなおしてみる]]></title>
    <link href="http://chroju.github.io//blog/2014/04/06/post/"/>
    <updated>2014-04-06T19:13:00+09:00</updated>
    <id>http://chroju.github.io//blog/2014/04/06/post</id>
    <content type="html"><![CDATA[<p>前回Capistranoが上手くいかないというエントリーを上げてから1か月。いまだにハマってしまっている……。何が悪いの皆目検討もつかない、というほどではないのだが、なんというか、雲を掴んでいるような状態ではある。一旦Capistranoについて整理してみるべきなんだろう。</p>

<h2>Capistranoは何をしてくれるのか</h2>

<p>そもそもCapistranoとは何をしてくれるツールなのか？</p>

<p><a href="http://qiita.com/yuku_t/items/01c0ec4389db143e27f5">Capistrano3のデプロイフレームワークの使い方 - Qiita</a></p>

<p>Capistranoは2まではRailsのデプロイツールだったけど、3は汎用的なデプロイツールに変わっている。したがってデフォルトの状態ではRails用のデプロイタスクは特に含まれていない。このあたりが上の方のリンク先で語られている内容になる。</p>

<p>ではデフォルトでのデプロイタスクは何をするのかと言えば、およそサーバーへのデプロイとして一般的に行われるようなものが組み込まれている。<a href="https://github.com/capistrano/capistrano/tree/master/lib/capistrano/tasks">capistrano/lib/capistrano/tasks</a>あたりを探るとデフォルトタスクがよくわかる。</p>

<ul>
<li>releases、sharedなどディレクトリの作成</li>
<li>レポジトリからgit clone</li>
<li>linked_files、linked_dirsの存在確認とシンボリックリンク作成</li>
<li>currentディレクトリへのシンボリックリンク作成</li>
<li>最古世代の削除、クリーンナップ</li>
</ul>


<p>ざっくり見てしまうと、単純にサーバーへファイルを上げて自動的に世代管理をさせるだけであればこれだけでもなんとかなりそうなところではある。逆にこれらが煩わしいのであれば、<a href="http://labs.gree.jp/blog/2013/12/10084/">デフォルトタスクを無効化して使う手もある。</a>デフォルトタスクの内容がよくわからないのであれば、一旦無効化してすべて自分でタスクを書くというのも手だと思う。</p>

<p>Railsをデプロイする場合はこれだけでは足りないので、capistrano/railsやcapistrano/bundleを追加で読み込むことになる。</p>

<h2>Capistranoのディレクトリ構成</h2>

<p>Capistranoでデフォルトのデプロイを行った時、デプロイ先サーバーに作成されるディレクトリについてもよくわかってないのでまとめておく。deploy.rbのdeploy_toで指定したディレクトリ内に、次の3つのディレクトリが作られる。</p>

<ul>
<li>releases : デプロイした内容を世代管理する</li>
<li>shared : bundleとかdatabase.ymlとかGitで管理してないファイル置き場（多分）</li>
<li>current : releasesの最新世代とsharedのシンボリックリンクが置かれる</li>
</ul>


<p>基本的に「デプロイ」される先はreleasesだ。releases配下にはデプロイ時のタイムスタンプから生成された名前のフォルダが作られ、その中にごっそりデプロイしたファイルが入っている。タイムスタンプが付くということは当然世代管理されているわけだが、保持される世代数はdeploy.rbの<code>set :keep_releases</code>で好きに指定できる。で、最新世代についてはcurrent配下にシンボリックリンクが自動的に貼られる。</p>

<p>sharedは正直よくわからない。デプロイのたびに更新するわけではない、すなわちGitで管理をしていないファイルやディレクトリを置いておくみたいなのだが、では<strong>どうやって配置すれば良いのか？</strong>がわからない。配置したファイルのうち、必要なものについてはlinked_dirsとlinked_filesで指定すればcurrent配下にこれもまたシンボリックリンクが貼られる。しかし、<strong>どうやって配置すれば良いのかわからない。</strong></p>

<p>関連：<a href="http://qiita.com/shunsugai@github/items/a112182ff5c0bb49249a">[自分用メモ]Capistrano3のlinked_filesって自分でuploadしなきゃダメですか？ - Qiita</a></p>

<p>で、これを書いていて気付いたのだが、アプリの中身がcurrent配下に展開されるということは、ウェブサーバーの設定もdeploy_toではなくてcurrentに飛ばすようにしておかないといけないわけだ。俺だけかも知れんが、案外罠ではないかという気がする。</p>

<h2>capistrano/rails</h2>

<p>取りあえずsharedの話はほっといて、Railsをデプロイする話に戻る。冒頭でデフォルトタスクにはRailsに対するものは何もないと書いたが、それではRails用のデプロイタスクはどこで生成されているのか？ 答えから書けば、capistrano-railsを読み込むことによって初めて生成される。</p>

<p><a href="http://qiita.com/yuku_t/items/78f32d6e5d21aee4e745">Capistrano3におけるRailsのデプロイタスクの内部実装 - Qiita</a>
いわく、追加されるタスクは主に3つ。</p>

<ul>
<li>assets compile(deploy:compile_assets)</li>
<li>assetsのタイムスタンプ更新(deploy:normalize_assets)</li>
<li>db:migrate(deploy:migrate)</li>
</ul>


<p>逆に言えば、ここで追加される以外のタスクはデフォルトでは<strong>行われない</strong>ということになる。その点を配慮せずにただググって適当なdeploy.rbをコピーしたりしただけでは、思ったとおりのデプロイは出来ない。</p>

<p>一例として自分がハマったのが、<code>db:create</code>は行われないということ。schema.rbを使って初回デプロイのときに上手いこと云々なんてことは一切してくれないので、このあたりは自分で書くか、サーバーを作ったときに予めDBをこしらえておく必要がある。</p>

<h2>capistrano/bundle</h2>

<p>もうひとつ、RailsをCapistranoでデプロイする場合に必要なのがcapistrano/bundler。Rails使っててGemfileがないなんてことはないだろうし、というかcapistrano/railsの中で<a href="https://github.com/capistrano/rails/blob/master/lib/capistrano/rails.rb">明示的にrequireされている。</a>何をやっているのかと言えば、簡単な話しである。</p>

<pre><code>  before 'deploy:updated', 'bundler:install'
</code></pre>

<p>デフォルトではshared配下にbundleディレクトリを作ってbundle installをかけてくれる。パスについては<code>set :bundle_path</code>オプションで自由に指定ができる。</p>

<h2>capistrano/rbenv</h2>

<p>あとよく使われるものとして、capistrano/rbenvがある。デプロイ先のサーバーで、Rubyをrbenvを使って入れてる場合には必須になるもの。中身はよく知らないが、そこまで気にしなくても良いのではないかという感覚がある。入れたらdeploy.rbに<code>set :rbenv_ruby_version</code>で使うRubyのバージョンを指定すればOK。</p>

<p>同じ類のものとして、capistrano/rvmももちろんあります。</p>

<h2>ソースにあたることの必要性</h2>

<p>以上がCapistrano3でRailsをデプロイする場合の主なデフォルトタスクの内容になる。繰り返しになるが、これ以外に何をやりたいのならタスクは書く必要がある。よく言われるのがデプロイ後のウェブサーバーの再起動で、unicornを再起動するタスクを追加している例はよく見かける。ただ、これも<a href="https://github.com/tablexi/capistrano3-unicorn">capistrano3-unicorn</a>という便利なものがすでに作られていたりはする。</p>

<p>個人的な思いなのだが、<a href="http://capistranorb.com/">Capistrano公式</a>の「Getting Started」は説明が不十分な気がしてならない。デプロイに至るまでの設定ファイルの書き方やら何やらは確かにだいたい載っているのだが、ではCapistrano3の内部実装がどうなっているのかとか、タスクを自分で書くにはどうすればよいのかといったあたりの情報が足りない。自分はまだこのDSLを読み下せないのだが、rakeあたりを知っていると結構書けるものなんだろうか？　ひょっとしたら、自分のようなRubyやRails初心者が安易に手を出すものではないのかなぁとか思う。</p>

<p>ただ、GitHubにいずれもソースが上がっているので、根気よく読んでいけばCapistranoが何をしているのか、また何を求めているのかは理解できる。誰かの書いたノウハウに頼るより、ソースにあたるのが大切なのは基本だと思う。常に。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails環境構築（5）Capistranoによるデプロイ ※未完]]></title>
    <link href="http://chroju.github.io//blog/2014/02/20/post/"/>
    <updated>2014-02-20T00:03:00+09:00</updated>
    <id>http://chroju.github.io//blog/2014/02/20/post</id>
    <content type="html"><![CDATA[<p>だいぶ間が空いてしまった……。Rails環境構築シリーズ、あとサーバーにはDB（postgresql）、unicorn、Railsを入れれば終わりなのだが、いずれもアプリ側のGemfileを使ってローカルにインストールするつもりなので、まずはアプリのデプロイが必要となる。そしてRailsのデプロイといえばCapistranoだ！と、いきたいところだったのだが。</p>

<p>Capistrano 3.0を試しているのだが、どうにもハマっている。ハマっているというのはのめり込んで楽しくなっちゃった的な意味ではなく、上手くいかずにっちもさっちもいかない的な意味である。とりあえず頭からやり方おさらいしつつ、ハマった箇所をまとめてみたい。</p>

<p>3.0についてはまだ登場してから時間も経ってないためか、日本語で有益な記事は少ない。が、まずは<a href="http://capistranorb.com/">本家</a>をよく読むこと推奨。一応これに則れば出来るようになっているはずではある。他に個人の方がまとめたハウツーで参考になったのは以下の記事。すでに2.0を使っている人ならよりわかりやすいのだろうが、これがCapistrano初体験となる自分にはちょっとわかりにくかったりも、した。特に3番目の記事は完全に2.0からの移行組に向けて書かれた内容。</p>

<ul>
<li><a href="http://threetreeslight.com/post/68344998681/capistrano-3-x-rails">capistrano 3.x系を使ってrailsをデプロイ | iii ThreeTreesLight</a></li>
<li><a href="http://labs.gree.jp/blog/2013/12/10084/">入門 Capistrano 3 ~ 全ての手作業を生まれる前に消し去りたい | GREE Engineers&#8217; Blog</a></li>
<li><a href="http://takkkun.hatenablog.com/entry/2013/10/12/Capistrano_3%E3%81%B8%E3%81%AE%E6%89%8B%E5%BC%95%E3%81%8D">Capistrano 3への手引き - 今日のごはんは素麺です</a></li>
<li><a href="http://d.hatena.ne.jp/ria10/20130526/1369583203">capistranoでステージングとか本番環境とか使い分ける - リア充爆発日記</a></li>
<li><a href="http://kakakakakku.hatenablog.com/entry/2013/12/11/090204">Capistrano3 で Vagrant で構築したVMにデプロイする - kakakakakku blog</a></li>
</ul>


<h2>Capistranoとは？</h2>

<p>そもそも論。開発完了したアプリをサーバーにデプロイするときの手順をRubyで書いて自動化しておくためのもの。デプロイ先はステージング環境とか本番環境とか何種類か存在する場合もあるが、環境ごとにデプロイ手順は別々に設定したりできる。なお、Rails用のツールだと思われがちだが、3.0からRails以外でも使える汎用的なツールになったらしい。自分の場合はRailsで使っているのであしからず。あと、SCMはGitを使っている必要がある。</p>

<h2>インストール</h2>

<p>インストールはGemで行う。デプロイ予定のRailsアプリで、Gemfileに以下追記してbundle install。</p>

<pre><code>group :development do
  gem 'capistrano', '~&gt; 3.1.0'
  gem 'capistrano-rails', '~&gt; 1.0.0'
  gem 'capistrano-bundler', '~&gt; 1.1.2'
end
</code></pre>

<p>capistranoが本体。先の本家によれば、Railsで使う場合はcapistrano-railsも必要になるとのこと。他にもいろいろ便利なプラギンがあったりするっぽいけど、わかんないので今はここまで。</p>

<h2>初期作業</h2>

<pre><code>$ bundle exec cap install
</code></pre>

<p>初期ファイルの生成。手元の本にはcapify .コマンドだと載っていたのだが、capistrano 3.0から変わったらしい。ほあ。これによりCapfileと、config配下にdeploy.rb、さらにconfig/deploy配下にproduction.rbとstaging.rbが作成される。それぞれの役割は次の通り。</p>

<ul>
<li>Capfile : 他のGem（capistrano-railsとか）の読み込みなどを記述</li>
<li>config/deploy.rb : デプロイタスクを記述</li>
<li>config/deploy/hoge.rb : 各サーバー情報を記述</li>
</ul>


<h2>Capfile編集</h2>

<p>capistrano-railsと同bundlerを読み込むため、Capfileを開いて以下追記。</p>

<pre><code>require 'capistrano/rails'
require 'capistrano/bundler'
</code></pre>

<h2>config/deploy.rb編集</h2>

<p>いろいろコメントアウトしてあってどれを使えばいいかよくわかんなかったりもするのだが、最低限以下は必要っぽい。</p>

<pre><code>set &lt;span class="synConstant"&gt;:application&lt;/span&gt;, &lt;span class="synSpecial"&gt;'&lt;/span&gt;&lt;span class="synConstant"&gt;hoge&lt;/span&gt;&lt;span class="synSpecial"&gt;'&lt;/span&gt;
set &lt;span class="synConstant"&gt;:repo_url&lt;/span&gt;, &lt;span class="synSpecial"&gt;'&lt;/span&gt;&lt;span class="synConstant"&gt;git@github.com:chroju/hoge&lt;/span&gt;&lt;span class="synSpecial"&gt;'&lt;/span&gt;
set &lt;span class="synConstant"&gt;:deploy_to&lt;/span&gt;, &lt;span class="synSpecial"&gt;'&lt;/span&gt;&lt;span class="synConstant"&gt;/var/www/hoge&lt;/span&gt;&lt;span class="synSpecial"&gt;'&lt;/span&gt;
set &lt;span class="synConstant"&gt;:scm&lt;/span&gt;, &lt;span class="synConstant"&gt;:git&lt;/span&gt;
</code></pre>

<p>上から。1行目はアプリケーション名。これはどこかで使われる設定ではないようなので、適当に入れておけばよさそう。2行目はGithubのリポジトリURL。3行目はデプロイ先となるサーバー上のディレクトリパス指定。ここではApacheの設定にならってみた。4行目は使用しているSCMの指定。とはいえ、現状Gitしか対応していないのでこれ以外の書き方は不可。</p>

<p>ファイル後半にはデプロイタスクのデフォルト設定が書かれている。一応、ここはそのままでも動くみたい。自分で何か特別なことをやらせたい場合は当然ながら編集する必要があるが、まだその域に至ってないです。</p>

<h2>config/deploy/hoge.rb編集</h2>

<p>ここではステージング環境としてvagrantを使うものと仮定。WebサーバーやDBサーバーを分けたりはせず、1台のサーバーですべてをまかなうこととする。よってstaging.rbを編集する。このファイルもデフォルトでいろいろ書かれてはいるのだが、とりあえず次の4行があればOK。</p>

<pre><code>server &lt;span class="synSpecial"&gt;'&lt;/span&gt;&lt;span class="synConstant"&gt;127.0.0.1&lt;/span&gt;&lt;span class="synSpecial"&gt;'&lt;/span&gt;, port: &lt;span class="synConstant"&gt;2222&lt;/span&gt;, user: &lt;span class="synSpecial"&gt;'&lt;/span&gt;&lt;span class="synConstant"&gt;vagrant&lt;/span&gt;&lt;span class="synSpecial"&gt;'&lt;/span&gt;, roles: &lt;span class="synSpecial"&gt;%w{&lt;/span&gt;&lt;span class="synConstant"&gt;web, app, db&lt;/span&gt;&lt;span class="synSpecial"&gt;}&lt;/span&gt;, ssh_options: {
  user: &lt;span class="synSpecial"&gt;'&lt;/span&gt;&lt;span class="synConstant"&gt;vagrant&lt;/span&gt;&lt;span class="synSpecial"&gt;'&lt;/span&gt;,
  keys: &lt;span class="synSpecial"&gt;%w(&lt;/span&gt;&lt;span class="synConstant"&gt;~/.vagrant.d/insecure_private_key&lt;/span&gt;&lt;span class="synSpecial"&gt;)&lt;/span&gt;,
  auth_methods: &lt;span class="synSpecial"&gt;%w(&lt;/span&gt;&lt;span class="synConstant"&gt;publickey&lt;/span&gt;&lt;span class="synSpecial"&gt;)&lt;/span&gt;
}
</code></pre>

<p>server〜で1台のサーバーの設定を一括で書ける。言わずもがな、まず対象IP。portがポート番号、userがSSHログインするユーザー名。roleはこのサーバーの役割を書く。web、app、dbの中から当てはまるものを書けばいいようだが、allという指定もできるとかできないとか。ssh_options:でさらに詳しい内容を記述。userはさっきのと被ってるので不要な気がするのだが、他のサイトを見てたら書いている設定があったので取りあえず入れてる。keysは認証に使うキーのパス。auth_methods:で認証方法を指定しているが、通例publickey認証とする。
ここに書いた設定の大半はvagrant ssh-configコマンドで拾えるので、自分の環境に合った設定に書き換えて下さい。</p>

<h2>デプロイ実行</h2>

<p>で、あとはデプロイでいけちゃうみたいです。</p>

<pre><code>bundle exec staging deploy
</code></pre>

<p>stagingをproductionに換えればproduction.rbの設定に則ります。あと、末尾に:checkを付けるとコマンドが通るかコールドでチェックしてくれるので、まずは:checkをした方がいい。あと、cap -Tで実行可能なコマンドがずらずら出てくる。デプロイのロールバックしたり、rake db:migrateを走らせたり、結構いろんなことができるので一度見ておくと吉。</p>

<h2>ハマった点</h2>

<p>自分の場合は以上の手順で上手くいきませんでした。何点かハマったポイントをば。</p>

<h3>デプロイ先ディレクトリのパーミッション</h3>

<p>大変アホみたいな話だが最初これでmkdirが上手くいかなかった。公式ドキュメントの<a href="http://capistranorb.com/documentation/getting-started/authentication-and-authorisation/">ココ</a>に書いてあるけど、SSHユーザーはsudoなしでデプロイ先ディレクトリを操作できる権限がなきゃダメです。vagrantユーザーは~/var配下の操作権限なかったので弾かれた次第。。。</p>

<p>対応としてはさっきのリンク先に書いてある手順通り<a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20080219/294154/">sgid</a>の設定とかしてあげたらなんとかなりました。あるいはパスワードなしでsudo実行可能にしてやっても動くみたいだけど、当然ながらサーバーセキュリティ的にはNGなので。まぁvagrantであればどうでもいいかもしんないけど。</p>

<h3>SQLiteのエラー</h3>

<p>deploy中にsqlite3.hが存在しないよというエラーが発生。<a href="http://www.guanxiaohua2k6.com/2012/07/sqlite3h-is-missing.html">このページ</a>に書いてあるのとまったく同じ症例だったので、同様の対策をしてあげて解決。これは俺のvagrant環境の準備に不備があったってことでいいんだろうか。根本原因がイマイチ謎。</p>

<h3>rake db:migrateのエラー</h3>

<p>そして現在進行形で未解決なのがこのエラー。デフォルトのデプロイタスクでは途中でデプロイ先サーバー上でRAILS_ENV=staging bundle exec rake db:migrateを叩くんだけど、これが次のエラーで停まってしまう。</p>

<pre><code>DEBUG [4be84d91]        rake aborted!
DEBUG [4be84d91]        database configuration does not specify adapter
</code></pre>

<p>いくつか思い当たった原因に取り組んではみたのだが、なおエラーが起きている。</p>

<ul>
<li>RAILS_ENV=hogeを追加した場合、Gemfileのgroup :hogeを見に行くのだが、stagingグループを用意していなかった（<a href="http://opentechnica.blogspot.jp/2012/01/railsenv.html">参考</a>）。</li>
<li>database.ymlにstagingの設定を用意していなかった。</li>
</ul>


<p>たぶんRAILS_ENV周りの設定が何かおかしいと思うのだが、わからないので取りあえず保留にしている。というか、これに行き当たるまでRAILS_ENVのことを全然知らなかった自分にも問題大有りなので、一度Railsの勉強に立ち返ってみている次第。知識がないと、連鎖的に他のこともできなくなってくるなぁというのを痛感している。</p>
]]></content>
  </entry>
  
</feed>
