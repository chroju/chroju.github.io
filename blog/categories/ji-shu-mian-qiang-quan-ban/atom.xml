<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技術・勉強全般 | the world as code]]></title>
  <link href="http://chroju.github.io/blog/categories/ji-shu-mian-qiang-quan-ban/atom.xml" rel="self"/>
  <link href="http://chroju.github.io/"/>
  <updated>2016-01-24T23:00:42+09:00</updated>
  <id>http://chroju.github.io/</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[短時間に限定して図書館で情報をザッピングするという勉強法]]></title>
    <link href="http://chroju.github.io/blog/2013/10/20/post/"/>
    <updated>2013-10-20T14:21:00+09:00</updated>
    <id>http://chroju.github.io/blog/2013/10/20/post</id>
    <content type="html"><![CDATA[<p>新しい分野の勉強をするときって、ネットの情報だけでは不十分だったり信頼性に欠けたりするし、だから書籍に頼ろうと思うんだけど、どんな本
を選べばいいのかわからなかったりもして悩ましい。かといって時間をかけて何冊も読む暇もないし、そんなにかけるお金もない。そういうとき、
基本に帰って図書館に行ってみたら良いのですよね。</p>

<p>NISAのこともあって、投資とか金融について少し勉強しようと思い立ったのだけど、特にこの分野って一人の言い分だけを鵜呑みにすると恐ろしく
危険。じゃあ時間を決めて、5冊ぐらいをザックリとザッピングしてみようということで、図書館に行きました。本を選び、時間を決めてザッピン
グ。とにかく多くの情報に触れることを重視したので、細部はバンバン読み飛ばす。わからない単語があったら取りあえずメモだけ取っておいて、
あとでググるなり調べることにする。そんな感じで約3時間で計7冊。A4見開きいっぱいに情報を書き留めて、それなりに情報を取り入れられた感じ
がした。</p>

<p>図書館を使うメリットとしては、</p>

<ul>
<li>お金がかからない（貧乏性でサーセン）</li>
<li>手元の情報じゃ足りないと気付いたとき、すぐ追加の本を探せる</li>
<li>とにかく静かで勉強するには快適</li>
<li>ハズレの本を引いたときのガッカリ感が少ない</li>
<li>逆にもし「これは！」という一冊があれば借りて帰れる</li>
<li>後から「あのとき読んだ本もっかい読みたい」と思っても楽に後追い可能</li>
</ul>


<p>というあたりか。あ、ただ小さな図書館で勉強スペースを長時間独占したりすると迷惑だったりもするので注意ね。ちゃんと勉強が許されてるとこ
で。</p>

<p>ちなみに俺が使ったのは<a href="http://hibiyal.jp/hibiya/index.html">日比谷図書文化館</a>。大学によくあるような勉強スペースが設けられてる上、館内のPRONTOで買ったコーヒーを飲みながら本
を読んでもOKだし、平日は22時まで（！！！）やってるから仕事帰りにも寄れて超オススメ。蔵書量はちょっと少ないかもしれんけど、オライリー
本がかなり置いてあったり面白い品揃えではある。あ、当然ながらわりと混んでます。あーやっぱ東京東部で働きてぇな。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術書のサンプル試す場合はバージョンを揃えるべきなのか]]></title>
    <link href="http://chroju.github.io/blog/2013/08/03/post/"/>
    <updated>2013-08-03T23:39:00+09:00</updated>
    <id>http://chroju.github.io/blog/2013/08/03/post</id>
    <content type="html"><![CDATA[<p>『RailsによるアジャイルWebアプリケーション開発』、大変くだらないところでつまずいているというか、なんか知らんがエラー出まくりで先に進めず。</p>

<p>問題が起きたのはp.79。モデルクラスのrbファイルにvalidatesメソッドによる検証過程を書き入れ、test/functional/xxxに有効なテストデータ（とされるもの）を入れてrake testコマンドを発行したところ、エラーが出る。何度やってもエラーが出る。仕方ないので一旦先に進もうともしたのだが、次に編集対象になっていたtest/unitフォルダが見当たらない。念のため別プロジェクトを作ったりもしてみたが、やはりtest/unitは生成されなかった。さすがにディレクトリ構造丸ごと違うとなると、自分のミスというよりはバージョンの相違によるものではないかと思い至る。この本ではRubyの1.9.2とrails 3.1.0を使っていたが、僕の環境はRuby2.0とrails 4.0.0だった（もっと他にも「バージョンが原因ではないか？」と思い当たった根拠があったはずなのだが失念。トラブルシュートは記録しながらやるべきだったなー……）。</p>

<p>というわけでRubyとrailsのバージョンを下げる。Rubyについてはrvmで管理しているので簡単に変更できたが、問題はrails。軽くググった感じでは、一度アンインストールしてから再度バージョン指定して入れなおせばよいという話だった。</p>

<blockquote>   #gem uninstall rails

   #gem install rails -v 3.1.0</blockquote>


<p>が、これだけで再びrake testを試すとまだエラー。Gemfile内のバージョン表記を変えろとのことだったので変更し、#bundle update。bundleについてはよくわかってないのでおいおい調べる予定。</p>

<p>しかし、まだエラー。エラーというより、SECURITY WARNINGとやらが表示された。どうもrails過去バージョンの脆弱性に起因するらしい。こういった事例がいくつかあり、最終的にはRails 3.2.13まで上げざるを得なかった。</p>

<p><a href="http://blog.popowa.com/2013/02/security-warning-no-secret-option.html">popowa: SECURITY WARNING: No secret option provided to Rack::Session::Cookie と出たら</a></p>

<p><a href="http://stackoverflow.com/questions/14206775/rails-emits-warning-rackfile-headers-parameter-replaces-cache-control-after">Rails emits warning: &ldquo;Rack::File headers parameter replaces cache_control after Rack 1.5&rdquo; - Stack Overflow</a></p>

<p>ここまででもうかなり疲れていたのだが、これでもまだ尚エラーが出るから嫌になる。Gemfileのcoffee-railsのバージョンがよろしくないらしく、以下サイトを参考にして編集。</p>

<p><a href="http://detham.tumblr.com/post/40225529175/rails-3-1-3-3-2-11-railties">Rails 3.1.3 -> 3.2.11 のアップデートで railties のdependencyが競合エラーになった - The longest day in my life</a></p>

<p>んで結論を言えばこれでもまだ上手く行かず、最終的にはRailsとRubyのバージョンを揃えた上で、イチからプロジェクトを作りなおしたらやっとエラーが出なくなった。もう自分のやってること何もかも間違ってる気がしてくる。</p>

<p>で、今回の一件からの考察というか帰結なのだが、技術書に沿って勉強していく場合、やはり技術書と同じバージョンの環境で進めていくべきなのだろうか。僕はそのへんわりと甘く見てしまっていたので、今回は「いや最新環境に慣れといた方がいいんじゃね？　Ruby2.0も最近出たとこで覚えといた方が得な気がするし」などという考えでRuby2.0とRails4.0.0を使っていたのだが、結果はこれである。Androidの勉強も似たような考え方でだいたい最新か、あるいは一つ前のOSで構築していたのだが、あちらは後方互換性が高いのか、それほど困ることもなかったので、Ruby on Railsでも安易に同じ事をしてしまった。</p>

<p>新しい環境に慣れておいた方がいい、というのはあると思う。が、技術書を読み進めていく上では、万が一バージョン相違によるエラーが出た場合、今回のように大きなロスを被ることになる。技術書、特にある分野での最初の一冊なんてのはとにかくまずは一冊流してみた方がいいわけで、最新バージョンへの対応なんてのはその後でゆっくり覚えればいいのかもしれない。旧バージョンの方がノウハウが多く蓄積されていて、エラー対処がしやすいという利点もある。とはいえ、Railsは旧バージョンを使っていると脆弱性の警告が出る場合があるので、新しいバージョンを使わざるを得ない場合もあるようなのだが。。。</p>

<p>あと、今回のトラブルシュートでいろいろググってみたところ、<a href="http://stackoverflow.com">Stack Overflow</a>が引っかかってくることが非常に多かった。やっぱ英語は必須。</p>
]]></content>
  </entry>
  
</feed>
