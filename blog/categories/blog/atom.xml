<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | the world as code]]></title>
  <link href="http://chroju.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://chroju.github.io/"/>
  <updated>2016-01-03T14:03:55+09:00</updated>
  <id>http://chroju.github.io/</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Qiitaはじめました]]></title>
    <link href="http://chroju.github.io/blog/2015/07/25/start-qiita/"/>
    <updated>2015-07-25T11:07:38+09:00</updated>
    <id>http://chroju.github.io/blog/2015/07/25/start-qiita</id>
    <content type="html"><![CDATA[<iframe class="bookmarklet hatena-embed" src="http://hatenablog.com/embed?url=http%3A%2F%2Fqiita.com%2Fchroju" title="chroju - Qiita" style="border:none;display:block;margin:0 0 1.7rem;overflow:hidden;height:155px;width:100%;max-width:100%;"><a href="http://qiita.com/chroju" target="_blank">chroju - Qiita</a></iframe>


<p>気分でQiitaはじめてみた。Kobitoをちらちら使って簡単なメモを残していたりしたのだけど、そこから一発で上げられるのはやっぱ楽かなと思って。あと先日の<a href="http://chroju.github.io/blog/2015/07/20/encryption-hash-at-first/">暗号化に関する記事</a>みたいなまとめ記事、tips系はやはりQiitaの方がフットワーク軽くて使いやすいような気がする。更新した場合にも履歴が残るし。</p>

<p>ブログとの使い分けが難しそうな気はするが、いわゆる勉強メモみたいな頻繁に見返すものをQiitaに上げて、ブログの方はもっとガッチリとした長文、たとえば勉強会の記録だとか技術に対する考え、あるいは何かを作った系の記事などを上げたらいいのではと思っている。まぁこのへんはあまり縛られず、あくまで中心に据えているのは自分用メモとしての役割なので、自分が使いやすいようなやり方でやれればいいかなと思っている。</p>

<p>ブログは多くとも週2回程度の更新だったが、Qiitaはもっと高い頻度でいろいろ貯めこんでいきたいし、そうできるような仕事をしていきたい所存。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the world as code]]></title>
    <link href="http://chroju.github.io/blog/2015/04/04/the-world-as-code/"/>
    <updated>2015-04-04T01:13:42+09:00</updated>
    <id>http://chroju.github.io/blog/2015/04/04/the-world-as-code</id>
    <content type="html"><![CDATA[<p>世界を構成するのはテクストである、という考え方が好きだ。より正確な言い方をするならば記号論やミーム的な考え方になるのだと思うが、記述されたもの、意味を成して認識されたものだけが実在足りうる、というような世界観をなんとなく抱いている。『ニルヤの島』では個人の生が物語へと還元され、データとして外部記憶装置へ保存されるようになった。『from the nothing, with love』では、ジェームズが自らを「生起しつつあるテクスト」であると述懐する。あるいはヘプタポッドの言語は、未来をも決定論的に「記述」する。</p>

<p>特にことインターネットの隆盛により、世界はテクストの、ミームの満ちるものへと変容しつつあるように思う。インターネット上に存在する「個人」とは、すなわちミームに他ならない。インターネットへのアクセスをしていても、能動的にテクストを紡がない個人は存在しないに等しい。この世界では個人は、あるいはあらゆる事象はデータへと還元され、そして半永久的にミームの海を彷徨っていく。</p>

<p>上述したように、最近頓に多い「言葉」に関するSFのなかで、最も好きなのは『屍者の帝国』なのだけど、ここでは人間の魂自体が「言葉」によるものと解されており、そして屍者は「言葉」によってフランケンシュタインと化す。言葉は物質化する。書物がそうであるように。歴史上の人物がそうであるように。これが自らもまた「物質化した言葉」であるはずのヴァン・ヘルシングの言葉であるというのは皮肉でもあるのだと思うが、生きとし生けるものが言葉によりもたらされるというハッキリとした記述と、それに基づいて構成された世界観は実に興味深い。</p>

<p>Infrastructure as Code、物理的な世界の技術であったはずのITインフラが、近年言語により記述され、管理、構築されるフェーズへと転換したように。Internet of Things、家電や家具といった非電子的であったはずの「モノ」たちが、APIを提供して「言語」による働きかけを許すようになったように。我々エンジニアの一つの使命は、万物の情報化であると思う。言語が支配する世界にすべてを置き換え、言語を介した制御を可能とすること。それがエンジニアとしてやるべきことなのだと。</p>

<p>私はなぜ書くのか？という問いに対する答えはあまりに簡単で、それは生きるに等しい行為だからだ。語らぬ者は存在しないのならば、語る以外に選択肢はない。世界と関わりたいのならば、言語によって働きかけていくしかない。紡いだ言葉がミームの海を流れていき、対岸でやがて物語として物質化する日を夢見る。言葉が世界を構成し、言葉が万物を紡ぎ上げて、やがて物語と化していく。</p>

<p>the world as code.</p>

<p>世界は言葉で成り立っている。</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4150114587/diary081213-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51191C0153L._SL160_.jpg" alt="あなたの人生の物語 (ハヤカワ文庫SF)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4150114587/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">あなたの人生の物語 (ハヤカワ文庫SF)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.04.03</div></div><div class="amazlet-detail">テッド・チャン <br />早川書房 <br />売り上げランキング: 10,379<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4150114587/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はてなブログからの記事移行を完了した]]></title>
    <link href="http://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress/"/>
    <updated>2015-03-01T13:15:20+09:00</updated>
    <id>http://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://chroju89.hatenablog.jp/">旧ブログ</a>から全記事移行完了しました。ちょっとだけ疲れた。</p>

<p>もともとはてなブログで記事を書いてたわけですが、こちらは記事のエクスポート形式がMovableType形式にしか対応してないので、そこからMarkdownに変換し直したりだとか、はてなキーワードリンクを削除したりとか、地道にいろいろやらねばならず。たぶんスクリプトでガチャーンと一発でやれるんでしょうけど、力が足りないのでvimでファイル開いて変換ポイント確認してはポチポチコマンドで置換してやりました。</p>

<h2>エクスポートファイルの分割</h2>

<p>はてなブログからエクスポートすると、最初は全記事が1ファイルに連なった状態で吐かれます。自分はMT使った経験ないんでわかりませんが、これは「そういうもの」と考えていいんですかね。一方のoctopressはエントリーごとに分割されているので、まずはこのエクスポートファイルを1記事ずつ分割してやらなくてはならない。あとヘッダの形式も微妙に両者で異なるので、ここの変換も必要。</p>

<p>なんか変換ツール落ちてないかなと堕落した感じで探しまわってたら、一応ありました。</p>

<script src="https://gist.github.com/railsbros-dirk/2351046.js"></script>


<p>名前がMT to Markdownなので完全にMarkdownへ変換してくれるものかと期待したのだけど、実際やってくれるのは先ほど挙げた「分割」と「ヘッダの書き換え」程度です。中身はHTMLタグのまま。一方で自分の環境だと<code>&lt;</code>が<code>&amp;lt;</code>に変わってしまうといった副作用もあり。あと元のヘッダにあったBASENAMEだとかCONVERT BREAKSといった文字列がそのまま本文内に残ってたり。。。ちょっと謎。ただ、変換が楽になるのは確か。</p>

<h2>vimによる置換</h2>

<p>スクリプト力弱いので、あとはvimによる力技です。今回初めて複数ファイルを一挙にvimで扱うってやったけど、便利ですね。</p>

<p>vimではバッファリストがあるのは知っていたけど、一方で引数リストっていうのもあって、<code>:args hoge.txt fuga.txt</code>とかでファイルリストを作れます。元々は名前の通り、vimを起動するときに与えた引数が入ってるリストらしいのだけど、任意に書き換えができるのであまり「引数」リストという感じはしない。バッファ内の全ファイルへのコマンド実行は<code>:bufdo</code>で出来るし、引数リストについても似た感じで<code>:argdo</code>が使える。このあたりを上手く活用すれば、今回のような複数ファイルを一挙に処理するのはたやすい。</p>

<p>例えば先の<code>&amp;lt;</code>を<code>&lt;</code>に全置換したり。他にも置換コマンドはh1タグを<code>#</code>に変換するだとか、いろいろな形で使いました。</p>

<pre><code class="vim">:argdo %s/&amp;lt;/&lt;/g
</code></pre>

<p>CONVERT BREAKSと書かれた行を全部消したり。</p>

<pre><code class="vim">:argdo g/CONVERT BREAKS/d
</code></pre>

<p>自分が今回初めて身に付けた知識でもっとも有効だったのは、検索でマッチした文字列を置換後の文字列内で指定する方法ですかね。検索パターンの括弧でくくった部分（vimなのでエスケープして<code>\(</code>と<code>\)</code>で囲った部分、ということになりますが）を、置換パターンから<code>\1</code>で指定できる。これははてなキーワードのリンクを一掃するのに役立ちました。</p>

<pre><code class="vim">:argdo %s/&lt;a class="keyword"\(.\{-}\)&lt;\/a&gt;/\1/g
</code></pre>

<p>あー、あとこのコマンドで重要なのは<code>{-}</code>の部分ですかね。これで最短マッチになるらしい。他、細かなとこだと改行コードを入力するには<code>&lt;C-v&gt;&lt;C-m&gt;</code>と打つとか、<code>&lt;C-r&gt;/</code>で直前の検索パターンをコマンドラインに入力できるとか、いろいろこの機会に調べられてタメになりました。</p>

<h3>参考</h3>

<ul>
<li><a href="http://scriptogr.am/error1009/post/201211151634">Vimで最短マッチと検索してから置換 - // Nice Catch! :)</a></li>
<li><a href="http://lesguillemets.github.io/blog/2014/08/05/vim-reuse-last-search-for-replace.html">Vim で直前の検索パターンを部分的に再利用する - Xeebi</a></li>
<li><a href="http://www.eightsee.net/?m=pc&amp;a=noticeinfodetail&amp;notice_no=31">改行コード変換 vi で改行コード一括置換　-eightsee.net</a></li>
</ul>


<h2>ファイルのリネーム</h2>

<p>また先のコードで分割したMarkdownファイルは自動的にファイル名も振ってくれるんですけど、日本語の場合は漢字をなんとなく頑張って読んでローマ字に変換してくれた、気持ちはありがたいけど残念な感じのものになっちゃいます。なのでこれも一括変換。</p>

<p>ファイル名一括変換だと<code>rename</code>コマンドってのがあるのですね。Linuxだと標準で入ってるけどUNIX系にはないだとか。なのでMacにも入ってなかったので、Homebrewでインストール。</p>

<pre><code>$ brew install rename
</code></pre>

<p>使い方としては<code>rename 's/hoge/fuga/' *.markdown</code>形式が使える、要はvimの置換コマンドっぽく書けるので、vimmerならこれが便利ではないかと。正規表現も当然使えます。ただし、vimで必要なあの面倒くさいエスケープの数々が要らなくなっていたり、先ほど書いた<code>\1</code>によるマッチ文字列の流用が<code>$1</code>に変わっていたり、若干の使用感の違いはあります。でも便利。</p>

<h3>参考</h3>

<ul>
<li><a href="http://qiita.com/yahihi/items/dd8b3cc7c7041c3f03b9">Linuxでrenameコマンドを使おう - Qiita</a></li>
</ul>


<p>そんなこんなで記事の変換が終わったら、あとはoctopressのレポジトリで<code>/source/_posts</code>の中に全ファイルブチ込んで<code>rake generate</code>かければ生成されます。最初はちょっと戸惑いもありましたが、やれてしまうと案外簡単に移行できるなという感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github.ioにブログを移行します]]></title>
    <link href="http://chroju.github.io/blog/2015/02/18/post/"/>
    <updated>2015-02-18T21:16:00+09:00</updated>
    <id>http://chroju.github.io/blog/2015/02/18/post</id>
    <content type="html"><![CDATA[<p>GitHub.ioとOctopressの組み合わせでブログを作成しました。</p>

<iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fchroju.github.io" title="No intention" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">[No intention](http://chroju.github.io)</iframe>


<p>こちらのブログを消すことはしませんが、おいおい全部の記事をエクスポートしてgithub.ioに持っていくつもりです。はてなブログでもまぁ、不満はなかったんですけど、流行りのやり方に乗ってみようかなというのと、隅々までカスタマイズできるフォーマットが欲しいかなということでやってみました。</p>

<p>実際のところ、ブログの構成ファイルやエントリーをすべて手元に残しておける（それもMarkdownで）というのはどことなく安心感もあって良いものです。管理が行き届くという意味でも、Github.ioとOctopressによるブログ運営は良いんじゃないかなと。</p>

<p>そこそこにはてなブログ読者登録もしていただいていたみたいですが、よろしければ今後共よろしくお願いします。なお、ブログ名の「No intention」は大した意味がないですが、好きなボカロ曲から連想したりしてます。</p>

<iframe src="https://youtube.googleapis.com/v/OA1btvnzfDY&amp;source=uds" allowfullscreen="" frameborder="0" height="315" width="420"></iframe>


<p><br><a href="http://www.youtube.com/watch?v=OA1btvnzfDY">【初音ミク PV】Chaining Intention【HD】[HD1080p] - YouTube</a></p>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm7046584"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress + github.ioでブログを作りました]]></title>
    <link href="http://chroju.github.io/blog/2015/02/17/post/"/>
    <updated>2015-02-17T00:06:42+09:00</updated>
    <id>http://chroju.github.io/blog/2015/02/17/post</id>
    <content type="html"><![CDATA[<p>これまではてなブログで書いていた<a href="http://chroju89.hatenablog.jp">技術系ブログ</a>を移設する目的で、Octopressとgithub.ioを使ったブログを作成しました。もはや常套手段とも言えるブログ作成方法ですので、ノウハウはネット上のあちこちに公開されており、特に苦労することもなかったです。というか、こんな簡単にブログ作れちゃうもんなんだなぁという感慨。</p>

<ul>
<li><a href="http://www.miukoba.net/blog/2013/01/05/start-octopress/">Octopressはじめました | mimemo</a></li>
<li><a href="http://rcmdnk.github.io/blog/2013/03/07/octopress-customize/">Octopressで最初に行う設定変更</a></li>
<li><a href="http://qiita.com/fakestarbaby/items/4b9b6efd9d52d904986c">Octopressで新規ページを作成してみよう！ - Qiita</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes · imathis/octopress Wiki</a></li>
</ul>


<p>上記のうち、3つめの「新規ページ作成」に関しては、aboutページを作るときに参考としました。ブログのエントリー以外の個別ページもこの方法で作ってMarkdownで編集できるので、結構柔軟なカスタマイズが出来ると思います。aboutページには一番上のナビゲーション領域から飛べるのでよろしければ。</p>

<p>あとはボチボチと折を見て旧ブログから記事を持ってくる予定。</p>
]]></content>
  </entry>
  
</feed>
