<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | the world as code]]></title>
  <link href="http://chroju.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://chroju.github.io/"/>
  <updated>2016-01-30T10:46:27+09:00</updated>
  <id>http://chroju.github.io/</id>
  <author>
    <name><![CDATA[chroju]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[はてなブログからの記事移行を完了した]]></title>
    <link href="http://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress/"/>
    <updated>2015-03-01T13:15:20+09:00</updated>
    <id>http://chroju.github.io/blog/2015/03/01/move-from-hatena-blog-to-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://chroju89.hatenablog.jp/">旧ブログ</a>から全記事移行完了しました。ちょっとだけ疲れた。</p>

<p>もともとはてなブログで記事を書いてたわけですが、こちらは記事のエクスポート形式がMovableType形式にしか対応してないので、そこからMarkdownに変換し直したりだとか、はてなキーワードリンクを削除したりとか、地道にいろいろやらねばならず。たぶんスクリプトでガチャーンと一発でやれるんでしょうけど、力が足りないのでvimでファイル開いて変換ポイント確認してはポチポチコマンドで置換してやりました。</p>

<h2>エクスポートファイルの分割</h2>

<p>はてなブログからエクスポートすると、最初は全記事が1ファイルに連なった状態で吐かれます。自分はMT使った経験ないんでわかりませんが、これは「そういうもの」と考えていいんですかね。一方のoctopressはエントリーごとに分割されているので、まずはこのエクスポートファイルを1記事ずつ分割してやらなくてはならない。あとヘッダの形式も微妙に両者で異なるので、ここの変換も必要。</p>

<p>なんか変換ツール落ちてないかなと堕落した感じで探しまわってたら、一応ありました。</p>

<script src="https://gist.github.com/railsbros-dirk/2351046.js"></script>


<p>名前がMT to Markdownなので完全にMarkdownへ変換してくれるものかと期待したのだけど、実際やってくれるのは先ほど挙げた「分割」と「ヘッダの書き換え」程度です。中身はHTMLタグのまま。一方で自分の環境だと<code>&lt;</code>が<code>&amp;lt;</code>に変わってしまうといった副作用もあり。あと元のヘッダにあったBASENAMEだとかCONVERT BREAKSといった文字列がそのまま本文内に残ってたり。。。ちょっと謎。ただ、変換が楽になるのは確か。</p>

<h2>vimによる置換</h2>

<p>スクリプト力弱いので、あとはvimによる力技です。今回初めて複数ファイルを一挙にvimで扱うってやったけど、便利ですね。</p>

<p>vimではバッファリストがあるのは知っていたけど、一方で引数リストっていうのもあって、<code>:args hoge.txt fuga.txt</code>とかでファイルリストを作れます。元々は名前の通り、vimを起動するときに与えた引数が入ってるリストらしいのだけど、任意に書き換えができるのであまり「引数」リストという感じはしない。バッファ内の全ファイルへのコマンド実行は<code>:bufdo</code>で出来るし、引数リストについても似た感じで<code>:argdo</code>が使える。このあたりを上手く活用すれば、今回のような複数ファイルを一挙に処理するのはたやすい。</p>

<p>例えば先の<code>&amp;lt;</code>を<code>&lt;</code>に全置換したり。他にも置換コマンドはh1タグを<code>#</code>に変換するだとか、いろいろな形で使いました。</p>

<pre><code class="vim">:argdo %s/&amp;lt;/&lt;/g
</code></pre>

<p>CONVERT BREAKSと書かれた行を全部消したり。</p>

<pre><code class="vim">:argdo g/CONVERT BREAKS/d
</code></pre>

<p>自分が今回初めて身に付けた知識でもっとも有効だったのは、検索でマッチした文字列を置換後の文字列内で指定する方法ですかね。検索パターンの括弧でくくった部分（vimなのでエスケープして<code>\(</code>と<code>\)</code>で囲った部分、ということになりますが）を、置換パターンから<code>\1</code>で指定できる。これははてなキーワードのリンクを一掃するのに役立ちました。</p>

<pre><code class="vim">:argdo %s/&lt;a class="keyword"\(.\{-}\)&lt;\/a&gt;/\1/g
</code></pre>

<p>あー、あとこのコマンドで重要なのは<code>{-}</code>の部分ですかね。これで最短マッチになるらしい。他、細かなとこだと改行コードを入力するには<code>&lt;C-v&gt;&lt;C-m&gt;</code>と打つとか、<code>&lt;C-r&gt;/</code>で直前の検索パターンをコマンドラインに入力できるとか、いろいろこの機会に調べられてタメになりました。</p>

<h3>参考</h3>

<ul>
<li><a href="http://scriptogr.am/error1009/post/201211151634">Vimで最短マッチと検索してから置換 - // Nice Catch! :)</a></li>
<li><a href="http://lesguillemets.github.io/blog/2014/08/05/vim-reuse-last-search-for-replace.html">Vim で直前の検索パターンを部分的に再利用する - Xeebi</a></li>
<li><a href="http://www.eightsee.net/?m=pc&amp;a=noticeinfodetail&amp;notice_no=31">改行コード変換 vi で改行コード一括置換　-eightsee.net</a></li>
</ul>


<h2>ファイルのリネーム</h2>

<p>また先のコードで分割したMarkdownファイルは自動的にファイル名も振ってくれるんですけど、日本語の場合は漢字をなんとなく頑張って読んでローマ字に変換してくれた、気持ちはありがたいけど残念な感じのものになっちゃいます。なのでこれも一括変換。</p>

<p>ファイル名一括変換だと<code>rename</code>コマンドってのがあるのですね。Linuxだと標準で入ってるけどUNIX系にはないだとか。なのでMacにも入ってなかったので、Homebrewでインストール。</p>

<pre><code>$ brew install rename
</code></pre>

<p>使い方としては<code>rename 's/hoge/fuga/' *.markdown</code>形式が使える、要はvimの置換コマンドっぽく書けるので、vimmerならこれが便利ではないかと。正規表現も当然使えます。ただし、vimで必要なあの面倒くさいエスケープの数々が要らなくなっていたり、先ほど書いた<code>\1</code>によるマッチ文字列の流用が<code>$1</code>に変わっていたり、若干の使用感の違いはあります。でも便利。</p>

<h3>参考</h3>

<ul>
<li><a href="http://qiita.com/yahihi/items/dd8b3cc7c7041c3f03b9">Linuxでrenameコマンドを使おう - Qiita</a></li>
</ul>


<p>そんなこんなで記事の変換が終わったら、あとはoctopressのレポジトリで<code>/source/_posts</code>の中に全ファイルブチ込んで<code>rake generate</code>かければ生成されます。最初はちょっと戸惑いもありましたが、やれてしまうと案外簡単に移行できるなという感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimで意識しておきたいことまとめ＠2015新春]]></title>
    <link href="http://chroju.github.io/blog/2015/01/20/post/"/>
    <updated>2015-01-20T00:24:00+09:00</updated>
    <id>http://chroju.github.io/blog/2015/01/20/post</id>
    <content type="html"><![CDATA[<p>前の記事がやたらポエミーになってしまったので、もうちょっと実際的なとこでVim使う上での注意点とか、今後覚えておきたいこと書いときます。</p>

<h2>正規表現を使いこなす</h2>

<p>そもそも正規表現がきちんと修められていないので、これまで検索と置換はあまり使ってこなかった。が、これ使えないとVimの魅力半減だと思うので、ちゃんと使いこなせるようになるのが目標。</p>

<p>正規表現と一言に言っても言語やツールによって書き方が違う場合があって、Vimについても一部の正規表現用の特殊文字を使うとき、エスケープが必要なことがある。これについては<code>very magic</code>というオプションを使うとエスケープせずに済むらしい。<code>vimrc</code>に書いたりできないのがちょっと煩わしいが、エスケープ必要な特殊文字を逐一覚えて1個1個処理していくよりは良い。</p>

<iframe src="http://deris.hatenablog.jp/embed/2013/05/15/024932" title="Vimでパターン検索するなら知っておいたほうがいいこと - derisの日記" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">[Vimでパターン検索するなら知っておいたほうがいいこと - derisの日記](http://deris.hatenablog.jp/entry/2013/05/15/024932)</iframe>


<p>せっかく正規表現を使うなら<code>vimgrep</code>もマスターしておこうと思う。というかカレントバッファだけを編集するんじゃなくて、ファイルを扱うツールとしてVimを使いたい。今使っているのは<a href="https://github.com/scrooloose/nerdtree">NERDTree</a>ぐらいなものである。</p>

<p>vimgrepは名前通り<code>:vimgrep</code>で打ちたくなるが、<code>:vim {pattern} {files}</code>の書式で使える。<code>{files}</code>にはフォルダパスやワイルドカードの他、標準出力も渡せるらしく、例えば<code>git ls-files</code>でGitにインデックスされているファイルだけを対象にしたりできるらしい。よくコード中に「TODO」とコメントしていく場面があるみたいだが、IDEではなくVimでも一斉検索して処理したりできるってことか。なるほど。vimgrepで探し当てた候補は<code>:cprevious</code>と<code>:cnext</code>というちょっと面倒なコマンドで選択するようなので、ここはマッピングしときたいですね。</p>

<iframe src="http://hatenablog.com/embed?url=http%3A%2F%2Fqiita.com%2Fyuku_t%2Fitems%2F0c1aff03949cb1b8fe6b" title="vimgrepとQuickfix知らないVimmerはちょっとこっち来い - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">[vimgrepとQuickfix知らないVimmerはちょっとこっち来い - Qiita](http://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6b)</iframe>


<h2>繰り返し操作</h2>

<p>去年読んだ『実践Vim』にこのあたりのことはガッツリ書いてあった。<code>.</code>を有効活用せよ、繰り返しができるような操作を心掛けよと。例えば<code>hoge=fuga</code>とあって、イコールの前後にスペースを入れたい場合どうするか。イコールにカーソル持って行って<code>i&lt;Space&gt;&lt;esc&gt;la&lt;Space&gt;&lt;esc&gt;</code>とかでももちろんいいんだろうけど、『実践Vim』では<code>s&lt;Space&gt;=&lt;Space&gt;</code>を進める。挿入モード1回だけで入力が終わるので、この操作は<code>.</code>で使いまわせるからだ。もっと言えば<code>u</code>によるアンドゥも可能。移動→挿入モード→<code>&lt;esc&gt;</code>という動き1回で何が出来るか考えろと、簡単にまとめるとそういうこと。もちろんマクロも使えと。自分は複数行に同じ処理をするときとかによく使ってます。一度記録したマクロを再編集するとか、そういう使い方もあるらしいけど、ちょっとまだそこまではできてない。</p>

<h2>コマンド、コード実行</h2>

<p>今はtmuxで画面分割して、一方ではVimでコードを書き、もう一方で実行してエラーを確認したりしている。でもこれはVim内で完結できるはずかなと。プラグインとして<code>vim-quickrun</code>を入れているのに使っていないのが原因。すっごい単純な話、</p>

<pre><code class="vim">:QuickRun
</code></pre>

<p>さえ覚えておけば、編集中のコードを実行させることができる。長いので何かしらマッピングはしたいが。最初はこれだけやってればいいかもしれない。物足りなくなったらオプションいじってみたり。あとは<code>:!</code>でシェルのコマンド実行できるってこともちゃんと覚えておけば、Vim上だけでやれることがだいぶ増えると思う。</p>

<pre><code class="vim">:!&lt;span class="synStatement"&gt;echo&lt;/span&gt; $&lt;span class="synIdentifier"&gt;HOME&lt;/span&gt;
</code></pre>

<h2>移動</h2>

<p>ぶっちゃけキーアサイン覚えるのが面倒なので、基本の<code>hjkl</code>と<code>gg</code>,<code>G</code>,あとは<code>ft/?</code>あたりによる検索でしか移動してなかった。行番号指定での移動もデバッグのときとか（エラーメッセージ内に行番号出るので）よく使うけど、いちいち移動したい先の行番号確認してコマンド打つのは面倒だなぁとか思っててあまり使ってない。</p>

<p>というわけで移動をもうちょっとハッピーにしようと思う。このあたり？</p>

<pre><code>w 次の単語の語頭へ移動
b 前の単語の語頭へ移動
e 次の単号の語末へ移動
ge 前の単語の語末へ移動
{ 段落単位で戻る
} 段落単位で進む
C-u 画面半分単位で戻る
C-d 画面半分単位で進む
H 画面内最上の行へ移動
M 画面内中央の行へ移動
L 画面内最下の行へ移動
% 対応する括弧へ移動
</code></pre>

<p><code>wbe</code>あたり、<code>w</code>の逆が<code>b</code>に対して<code>e</code>の逆が<code>ge</code>ってのは気に入らないなぁ。。。<code>WBE</code>にもそれぞれマッピングはあるみたいだけど、覚えるの面倒だし逆移動にマッピングしちゃってもいいかもと思う。<code>Shift</code>付ければ逆操作になるってのは直感的で良い。あと<code>bb</code>にバッファウィンドウ開くようマッピングしてしまっている自分は<code>b</code>を多用できない問題もあったりする。他は比較的納得感のあるアサインなので覚えやすい気が。特に<code>{}</code>、Vimでブログも書いてる自分は重宝しそう。括弧に関しては自分Rubyをよく書くので、matchitの設定で<code>def</code>から<code>end</code>とかにも飛べるようにした。</p>

<pre><code class="vim">&lt;span class="synStatement"&gt;if&lt;/span&gt; !&lt;span class="synIdentifier"&gt;exists&lt;/span&gt;&lt;span class="synSpecial"&gt;(&lt;/span&gt;&lt;span class="synConstant"&gt;'loaded_matchit'&lt;/span&gt;&lt;span class="synSpecial"&gt;)&lt;/span&gt;
  &lt;span class="synStatement"&gt;runtime&lt;/span&gt; macros/matchit&lt;span class="synStatement"&gt;.vim&lt;/span&gt;
&lt;span class="synStatement"&gt;endif&lt;/span&gt;
</code></pre>

<p>また移動系だと<a href="https://github.com/Lokaltog/vim-easymotion">vim-easymotion</a>を入れているけど使ってないので、使えれば使ってみようかなと。コンセプトとしては<code>3w</code>や<code>4fa</code>等と打つとき、いくつ先に行くのか数を数えなくてはならないという煩わしさがあるので、移動可能な場所候補にラベルを表示して、ラベルの打ち込みにより一発で移動しようというもの。<code>s{char}</code>で画面全体検索というキーバインドもあるみたい。感覚としてはVimperatorの<code>Follow hint</code>の動作に近いのか。ちなみに『実践Vim』では回数指定はやっぱり煩わしいので、<code>.</code>や<code>;</code>で繰り返した方が速いよってなことが書いてあった。</p>

<p>あと<code>ctags</code>とかマークの機能もちゃんと使いたいのだが。<code>ctags</code>はVimの機能というより、元々あったプログラムを活用して楽に移動できるようにしましたという話なので、そもそもの<code>ctags</code>に対する理解を深めなければと思う。マークは次のキーマップを覚えれば使えそうだが、使いこなすのが難しそうな気もする。</p>

<pre><code>m{char} カーソル位置にマークを設定
`{char} 指定のマークに移動
`` 直前のマークに移動
:marks マーク一覧の表示
</code></pre>

<h2>その他キーマップ</h2>

<p>今まであまり使ってなかったけど便利そうなキーマップ、改めてピックアップ。</p>

<pre><code>D カーソル位置から行末まで削除
C カーソル位置から行末まで削除して挿入モード
</code></pre>

<p>このキーマップに付随して<code>Y</code>も<code>y$</code>に割り当てたいよねってのが↓の記事に載ってたので早速vimrcに追記してます。<code>+</code>で<code>&lt;C-a&gt;</code>,<code>-</code>で<code>&lt;C-x&gt;</code>というのも真似してみた。確かにこれ、今まで便利なのは知ってたけど、キーマップが覚えられてなかった。そういうのはガンガン割り当て替えるべきですね。</p>

<iframe src="http://itchyny.hatenablog.com/embed/2014/12/25/090000" title="個人的に便利だと思うVimの基本設定のランキングを発表します！ - プログラムモグモグ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">[個人的に便利だと思うVimの基本設定のランキングを発表します！ - プログラムモグモグ](http://itchyny.hatenablog.com/entry/2014/12/25/090000)</iframe>


<pre><code>s 1文字消して挿入モード
S 1行消して挿入モード
c{operator} 指定範囲を消して挿入モード
</code></pre>

<p><code>s</code>と<code>c</code>の違いが掴めてなかった。<code>c</code>はオペレーターを取る。</p>

<pre><code>zf 折り畳み（folding）
</code></pre>

<p>忘れる。これ。あまり使ってないけど。foldingの展開は<code>&lt;Space&gt;</code>で。</p>

<pre><code>ヴィジュアルモードでo 始点と終点を入れ替え
</code></pre>

<p>『実践Vim』に載ってた。始点間違えて<code>v</code>押しちゃってもモード抜けなくて済むのですごく便利。</p>

<pre><code>"0p ヤンクレジスタから貼り付け
</code></pre>

<p>0はヤンクレジスタにあたり、ヤンクしたテキストが暗黙的に入力されている。<code>dd</code>などで削除したテキストはこちらには入らないので、よくあるヤンクして数行後の行を削除してからペーストしようとしたら、<code>dd</code>したものが貼り付けられてしまった、みたいな事象を避けられる。レジスタはこれ意外にもいろいろ奥が深そうなので、機会があれば調べたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『Software Design 2015年1月』Vim使い 事始め 読了]]></title>
    <link href="http://chroju.github.io/blog/2015/01/16/post/"/>
    <updated>2015-01-16T00:57:00+09:00</updated>
    <id>http://chroju.github.io/blog/2015/01/16/post</id>
    <content type="html"><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00QH3HQMO/diary081213-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51sv-OIQh%2BL._SL160_.jpg" alt="ソフトウェア デザイン 2015年 01月号 [雑誌]" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00QH3HQMO/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">ソフトウェア デザイン 2015年 01月号 [雑誌]</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.03.01</div></div><div class="amazlet-detail"><br />技術評論社 (2014-12-18)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00QH3HQMO/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>正月休みにSD読みました。今月からpdfで買うことにしたんだけど、表紙の見出しの文字がちゃんと中のページに対するリンクになっていたり、サンプルソース内のコメントに書かれているような細かいURLまでちゃんとリンクになっていたり、とても丁寧に作られている感じがして良い。問題はこれを何で読もうかということ。普段は電子書籍サービスとしてKindleを使っているので、Kindleパーソナルドキュメントサービスにメールして入れておこうと思ったんだけど、サイズが大きすぎて添付して送れず。仕方なくiBooksで読んだけど、これだと当然ながらAndroidからは使えないなぁという不満があったり。悩ましい。</p>

<p>特集は「超基本」と、用途別に「プログラマ編」「インフラエンジニア編」「文書作成編」に分かれている。超基本は本当にインストールから初期設定のあたりの話。自分はVimをウェブ検索で得た断片的な情報を元に使い始めてしまっていたので、このあたりも参考にさせていただきました。「プログラマ編」はIDE風の使い方を、「インフラエンジニア編」は運用作業を想定して素のVimをどう使うかという話を、「文書作成編」はVimによるmarkdown編集をそれぞれピックアップしてます。</p>

<p>自分が思うにVimは単にエディタというよりは、テキストに対する扱い方の概念というか、フレームワークみたいなものなんだと思う。テキストの捉え方そのものが違うというか。オペレータやテキストオブジェクトあたりの考え方がまさにそうで、テキストを効率的に扱うために、どういう単位でテキストを編集していくかという考え方がこのあたりには反映されている。だから<code>diw</code>を単にカーソル下の1単語を削除するコマンドとして丸暗記しても本質ではなくて、d,i,wがそれぞれ何を表しているのかを理解して、身体に染み込ませていかない限りは多分「Vim便利！」とはならないんじゃないかと思う。</p>

<p>Vimのプラグインっていうのは、これは様々なVimmerが考えた「もっともテキストを扱いやすい方法」の塊みたいなもんで、そのうち自分にも合うものを1個1個組み合わせていくことで、「ボクが考える最強のVim」になるんだろう。自分が当初やってしまっていた「ウェブで検索して便利そうなオプションはプラグインを取りあえず入れてみる」というのは間違いではないのかもしれないけど、入れたものちゃんと理解してる？とか、使ってる？っていうのを今後は意識したい。</p>

<p>特にプログラマ編でも触れられてたvim-quickrunは入れたはいいけど全然使ってないので使う。あとctagsも概念的に理解できてなくて、ちゃんとわかって使えば便利そう。Vimスクリプトもちゃんと読み書きしたいんだけど、まずその前に今年はテクニックバイブル読もうと思います。</p>

<p>あと全然この雑誌と関係ないんだけど、最近知った<code>DiffOrig</code>コマンドがすげー便利。編集中のファイルの編集前後をdiffってくれる。こういう発見がいつまで経っても尽きないのよなぁ。</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774147958/diary081213-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/516K5O-bN8L._SL160_.jpg" alt="Vimテクニックバイブル　～作業効率をカイゼンする150の技" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774147958/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">Vimテクニックバイブル　～作業効率をカイゼンする150の技</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.03.01</div></div><div class="amazlet-detail">Vimサポーターズ <br />技術評論社 <br />売り上げランキング: 165,426<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774147958/diary081213-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kaoriya版Vimでtxtファイルの自動改行が解除できない件]]></title>
    <link href="http://chroju.github.io/blog/2013/07/23/post/"/>
    <updated>2013-07-23T22:00:00+09:00</updated>
    <id>http://chroju.github.io/blog/2013/07/23/post</id>
    <content type="html"><![CDATA[<p>2週間ぐらいハマってた。</p>

<p>プレーンテキストの管理やRuby書くときとかにKaoriya版MacVimを使っているのだが、.vimrcでset textwidth=0を設定しているにも関わらず、txtファイルのみ自動改行が解除できなくて困っていた。最近QFix_howmをよく使うようになっていて、機能としては申し分なかったんだけど、まったく関係ないこの一点のためにイライラしっぱなしだった。</p>

<p>で、結論。Kaoriya版Vimのデフォルト設定により、textwidthが上書かれてしまうらしい。</p>

<blockquote>Kaoriya版Vimではデフォルトの設定ファイルであるvimrc_example.vimを読み込んでおり、その設定ファイル内でテキストファイルを開いたときにtextwidth=78の設定が上書きされてしまうらしい。

[Vimのtextwidth設定と.vimrc - 続・日々の雑感](http://d.hatena.ne.jp/WK6/20120606/1338993826)</blockquote>


<p>なので引用元の記事にもある通り、.vimrcに以下を挿入すればおｋ。</p>

<pre><code class="vim">&lt;span class="synStatement"&gt;autocmd&lt;/span&gt; &lt;span class="synType"&gt;FileType&lt;/span&gt; text &lt;span class="synStatement"&gt;setlocal&lt;/span&gt; &lt;span class="synPreProc"&gt;textwidth&lt;/span&gt;=0
</code></pre>

<p>これでQFix_howm使って快適メモライフ！！！　他にもデフォルト設定いろいろ入ってそうなんで、見直した方がいいかもしれない。</p>
]]></content>
  </entry>
  
</feed>
